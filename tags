!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADVANCE	ctree.c	5343;"	d	file:
ADVANCE_ONLY_NEXT	ctree.c	5344;"	d	file:
ALLOC_CHUNK	ctree.h	/^	ALLOC_CHUNK		=	5,$/;"	e	enum:btrfs_flush_state
ASSERT	ctree.h	3454;"	d
ASSERT	ctree.h	3457;"	d
BACKREF_FOUND_SHARED	backref.c	31;"	d	file:
BITMAP_FIRST_BYTE_MASK	extent_io.h	77;"	d
BITMAP_LAST_BYTE_MASK	extent_io.h	79;"	d
BITS_PER_BITMAP	free-space-cache.c	33;"	d	file:
BITS_PER_BITMAP	tests/free-space-tests.c	25;"	d	file:
BIT_BYTE	extent_io.h	75;"	d
BTRFSIC_BLOCK_HASHTABLE_SIZE	check-integrity.c	111;"	d	file:
BTRFSIC_BLOCK_LINK_HASHTABLE_SIZE	check-integrity.c	112;"	d	file:
BTRFSIC_BLOCK_LINK_MAGIC_NUMBER	check-integrity.c	115;"	d	file:
BTRFSIC_BLOCK_MAGIC_NUMBER	check-integrity.c	114;"	d	file:
BTRFSIC_BLOCK_STACK_FRAME_MAGIC_NUMBER	check-integrity.c	117;"	d	file:
BTRFSIC_DEV2STATE_HASHTABLE_SIZE	check-integrity.c	113;"	d	file:
BTRFSIC_DEV2STATE_MAGIC_NUMBER	check-integrity.c	116;"	d	file:
BTRFSIC_GENERATION_UNKNOWN	check-integrity.c	120;"	d	file:
BTRFSIC_PRINT_MASK_END_IO_BIO_BH	check-integrity.c	131;"	d	file:
BTRFSIC_PRINT_MASK_INITIAL_ALL_TREES	check-integrity.c	135;"	d	file:
BTRFSIC_PRINT_MASK_INITIAL_DATABASE	check-integrity.c	136;"	d	file:
BTRFSIC_PRINT_MASK_INITIAL_TREE	check-integrity.c	134;"	d	file:
BTRFSIC_PRINT_MASK_NUM_COPIES	check-integrity.c	137;"	d	file:
BTRFSIC_PRINT_MASK_ROOT_CHUNK_LOG_TREE_LOCATION	check-integrity.c	127;"	d	file:
BTRFSIC_PRINT_MASK_SUBMIT_BIO_BH	check-integrity.c	130;"	d	file:
BTRFSIC_PRINT_MASK_SUBMIT_BIO_BH_VERBOSE	check-integrity.c	139;"	d	file:
BTRFSIC_PRINT_MASK_SUPERBLOCK_WRITE	check-integrity.c	126;"	d	file:
BTRFSIC_PRINT_MASK_TREE_AFTER_SB_WRITE	check-integrity.c	128;"	d	file:
BTRFSIC_PRINT_MASK_TREE_BEFORE_SB_WRITE	check-integrity.c	129;"	d	file:
BTRFSIC_PRINT_MASK_TREE_WITH_ALL_MIRRORS	check-integrity.c	138;"	d	file:
BTRFSIC_PRINT_MASK_VERBOSE	check-integrity.c	132;"	d	file:
BTRFSIC_PRINT_MASK_VERY_VERBOSE	check-integrity.c	133;"	d	file:
BTRFSIC_TREE_DUMP_MAX_INDENT_LEVEL	check-integrity.c	118;"	d	file:
BTRFS_ADD_DELAYED_EXTENT	delayed-ref.h	26;"	d
BTRFS_ADD_DELAYED_REF	delayed-ref.h	24;"	d
BTRFS_ATTR	sysfs.h	28;"	d
BTRFS_ATTR_PTR	sysfs.h	32;"	d
BTRFS_ATTR_RW	sysfs.h	24;"	d
BTRFS_BACKREF_REV_MASK	ctree.h	131;"	d
BTRFS_BACKREF_REV_MAX	ctree.h	129;"	d
BTRFS_BACKREF_REV_SHIFT	ctree.h	130;"	d
BTRFS_BDEV_BLOCKSIZE	disk-io.h	34;"	d
BTRFS_BIO_INLINE_CSUM_SIZE	volumes.h	264;"	d
BTRFS_BLOCK_RSV_CHUNK	ctree.h	457;"	d
BTRFS_BLOCK_RSV_DELALLOC	ctree.h	455;"	d
BTRFS_BLOCK_RSV_DELOPS	ctree.h	458;"	d
BTRFS_BLOCK_RSV_EMPTY	ctree.h	459;"	d
BTRFS_BLOCK_RSV_GLOBAL	ctree.h	454;"	d
BTRFS_BLOCK_RSV_TEMP	ctree.h	460;"	d
BTRFS_BLOCK_RSV_TRANS	ctree.h	456;"	d
BTRFS_BYTES_TO_BLKS	ctree.h	1445;"	d
BTRFS_CACHE_ERROR	ctree.h	/^	BTRFS_CACHE_ERROR	= 4,$/;"	e	enum:btrfs_caching_type
BTRFS_CACHE_FAST	ctree.h	/^	BTRFS_CACHE_FAST	= 2,$/;"	e	enum:btrfs_caching_type
BTRFS_CACHE_FINISHED	ctree.h	/^	BTRFS_CACHE_FINISHED	= 3,$/;"	e	enum:btrfs_caching_type
BTRFS_CACHE_NO	ctree.h	/^	BTRFS_CACHE_NO		= 0,$/;"	e	enum:btrfs_caching_type
BTRFS_CACHE_STARTED	ctree.h	/^	BTRFS_CACHE_STARTED	= 1,$/;"	e	enum:btrfs_caching_type
BTRFS_COMPARE_TREE_CHANGED	ctree.h	/^	BTRFS_COMPARE_TREE_CHANGED,$/;"	e	enum:btrfs_compare_tree_result
BTRFS_COMPARE_TREE_DELETED	ctree.h	/^	BTRFS_COMPARE_TREE_DELETED,$/;"	e	enum:btrfs_compare_tree_result
BTRFS_COMPARE_TREE_NEW	ctree.h	/^	BTRFS_COMPARE_TREE_NEW,$/;"	e	enum:btrfs_compare_tree_result
BTRFS_COMPARE_TREE_SAME	ctree.h	/^	BTRFS_COMPARE_TREE_SAME,$/;"	e	enum:btrfs_compare_tree_result
BTRFS_COMPAT_EXTENT_TREE_V0	ctree.h	68;"	d
BTRFS_COMPRESS_LZO	compression.h	/^	BTRFS_COMPRESS_LZO   = 2,$/;"	e	enum:btrfs_compression_type
BTRFS_COMPRESS_NONE	compression.h	/^	BTRFS_COMPRESS_NONE  = 0,$/;"	e	enum:btrfs_compression_type
BTRFS_COMPRESS_TYPES	compression.h	/^	BTRFS_COMPRESS_TYPES = 3,$/;"	e	enum:btrfs_compression_type
BTRFS_COMPRESS_ZLIB	compression.h	/^	BTRFS_COMPRESS_ZLIB  = 1,$/;"	e	enum:btrfs_compression_type
BTRFS_COMPRESS_ZSTD	compression.h	/^	BTRFS_COMPRESS_ZSTD  = 3,$/;"	e	enum:btrfs_compression_type
BTRFS_DC_CLEAR	ctree.h	/^	BTRFS_DC_CLEAR		= 2,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DC_ERROR	ctree.h	/^	BTRFS_DC_ERROR		= 1,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DC_SETUP	ctree.h	/^	BTRFS_DC_SETUP		= 3,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DC_WRITTEN	ctree.h	/^	BTRFS_DC_WRITTEN	= 0,$/;"	e	enum:btrfs_disk_cache_state
BTRFS_DEFAULT_COMMIT_INTERVAL	ctree.h	1342;"	d
BTRFS_DEFAULT_MAX_INLINE	ctree.h	1343;"	d
BTRFS_DEFRAG_BATCH	file.c	284;"	d	file:
BTRFS_DELAYED_BACKGROUND	delayed-inode.c	27;"	d	file:
BTRFS_DELAYED_BATCH	delayed-inode.c	28;"	d	file:
BTRFS_DELAYED_DELETION_ITEM	delayed-inode.h	34;"	d
BTRFS_DELAYED_INSERTION_ITEM	delayed-inode.h	33;"	d
BTRFS_DELAYED_NODE_DEL_IREF	delayed-inode.h	53;"	d
BTRFS_DELAYED_NODE_INODE_DIRTY	delayed-inode.h	52;"	d
BTRFS_DELAYED_NODE_IN_LIST	delayed-inode.h	51;"	d
BTRFS_DELAYED_WRITEBACK	delayed-inode.c	26;"	d	file:
BTRFS_DEVICE_GETSET_FUNCS	volumes.h	160;"	d
BTRFS_DEVICE_GETSET_FUNCS	volumes.h	184;"	d
BTRFS_DEVICE_GETSET_FUNCS	volumes.h	204;"	d
BTRFS_DIO_ORIG_BIO_SUBMITTED	btrfs_inode.h	292;"	d
BTRFS_DIRTY_METADATA_THRESH	ctree.h	97;"	d
BTRFS_DROP_DELAYED_REF	delayed-ref.h	25;"	d
BTRFS_EMPTY_DIR_SIZE	ctree.h	92;"	d
BTRFS_EXPORT_H	export.h	3;"	d
BTRFS_FEATURE_COMPAT_RO_SAFE_CLEAR	ctree.h	265;"	d
BTRFS_FEATURE_COMPAT_RO_SAFE_SET	ctree.h	264;"	d
BTRFS_FEATURE_COMPAT_RO_SUPP	ctree.h	260;"	d
BTRFS_FEATURE_COMPAT_SAFE_CLEAR	ctree.h	258;"	d
BTRFS_FEATURE_COMPAT_SAFE_SET	ctree.h	257;"	d
BTRFS_FEATURE_COMPAT_SUPP	ctree.h	256;"	d
BTRFS_FEATURE_INCOMPAT_SAFE_CLEAR	ctree.h	281;"	d
BTRFS_FEATURE_INCOMPAT_SAFE_SET	ctree.h	279;"	d
BTRFS_FEATURE_INCOMPAT_SUPP	ctree.h	267;"	d
BTRFS_FEAT_ATTR	sysfs.h	47;"	d
BTRFS_FEAT_ATTR_COMPAT	sysfs.h	57;"	d
BTRFS_FEAT_ATTR_COMPAT_RO	sysfs.h	59;"	d
BTRFS_FEAT_ATTR_INCOMPAT	sysfs.h	61;"	d
BTRFS_FEAT_ATTR_PTR	sysfs.h	55;"	d
BTRFS_FID_SIZE_CONNECTABLE	export.c	12;"	d	file:
BTRFS_FID_SIZE_CONNECTABLE_ROOT	export.c	14;"	d	file:
BTRFS_FID_SIZE_NON_CONNECTABLE	export.c	10;"	d	file:
BTRFS_FIEMAP_FLAGS	inode.c	8929;"	d	file:
BTRFS_FILE_EXTENT_INLINE_DATA_START	ctree.h	1295;"	d
BTRFS_FREE_SPACE_BITMAP_BITS	free-space-tree.h	28;"	d
BTRFS_FREE_SPACE_BITMAP_SIZE	free-space-tree.h	27;"	d
BTRFS_FS_BARRIER	ctree.h	705;"	d
BTRFS_FS_BTREE_ERR	ctree.h	714;"	d
BTRFS_FS_CLOSING_DONE	ctree.h	707;"	d
BTRFS_FS_CLOSING_START	ctree.h	706;"	d
BTRFS_FS_CREATING_FREE_SPACE_TREE	ctree.h	713;"	d
BTRFS_FS_EXCL_OP	ctree.h	725;"	d
BTRFS_FS_FROZEN	ctree.h	719;"	d
BTRFS_FS_LOG1_ERR	ctree.h	715;"	d
BTRFS_FS_LOG2_ERR	ctree.h	716;"	d
BTRFS_FS_LOG_RECOVERING	ctree.h	708;"	d
BTRFS_FS_OPEN	ctree.h	709;"	d
BTRFS_FS_QUOTA_ENABLED	ctree.h	710;"	d
BTRFS_FS_QUOTA_ENABLING	ctree.h	711;"	d
BTRFS_FS_QUOTA_OVERRIDE	ctree.h	717;"	d
BTRFS_FS_STATE_DEV_REPLACING	ctree.h	126;"	d
BTRFS_FS_STATE_DUMMY_FS_INFO	ctree.h	127;"	d
BTRFS_FS_STATE_ERROR	ctree.h	123;"	d
BTRFS_FS_STATE_REMOUNTING	ctree.h	124;"	d
BTRFS_FS_STATE_TRANS_ABORTED	ctree.h	125;"	d
BTRFS_FS_UPDATE_UUID_TREE_GEN	ctree.h	712;"	d
BTRFS_I	btrfs_inode.h	/^static inline struct btrfs_inode *BTRFS_I(const struct inode *inode)$/;"	f
BTRFS_INODE_APPEND	ctree.h	1431;"	d
BTRFS_INODE_COMPRESS	ctree.h	1435;"	d
BTRFS_INODE_COPY_EVERYTHING	btrfs_inode.h	43;"	d
BTRFS_INODE_DELALLOC_META_RESERVED	btrfs_inode.h	39;"	d
BTRFS_INODE_DIRSYNC	ctree.h	1434;"	d
BTRFS_INODE_DUMMY	btrfs_inode.h	37;"	d
BTRFS_INODE_HAS_ASYNC_EXTENT	btrfs_inode.h	41;"	d
BTRFS_INODE_HAS_ORPHAN_ITEM	btrfs_inode.h	40;"	d
BTRFS_INODE_HAS_PROPS	btrfs_inode.h	46;"	d
BTRFS_INODE_IMMUTABLE	ctree.h	1430;"	d
BTRFS_INODE_IN_DEFRAG	btrfs_inode.h	38;"	d
BTRFS_INODE_IN_DELALLOC_LIST	btrfs_inode.h	44;"	d
BTRFS_INODE_NEEDS_FULL_SYNC	btrfs_inode.h	42;"	d
BTRFS_INODE_NOATIME	ctree.h	1433;"	d
BTRFS_INODE_NOCOMPRESS	ctree.h	1427;"	d
BTRFS_INODE_NODATACOW	ctree.h	1425;"	d
BTRFS_INODE_NODATASUM	ctree.h	1424;"	d
BTRFS_INODE_NODUMP	ctree.h	1432;"	d
BTRFS_INODE_ORDERED_DATA_CLOSE	btrfs_inode.h	35;"	d
BTRFS_INODE_ORPHAN_META_RESERVED	btrfs_inode.h	36;"	d
BTRFS_INODE_PREALLOC	ctree.h	1428;"	d
BTRFS_INODE_READDIO_NEED_LOCK	btrfs_inode.h	45;"	d
BTRFS_INODE_READONLY	ctree.h	1426;"	d
BTRFS_INODE_ROOT_ITEM_INIT	ctree.h	1437;"	d
BTRFS_INODE_SYNC	ctree.h	1429;"	d
BTRFS_IOC_SET_RECEIVED_SUBVOL_32	ioctl.c	85;"	d	file:
BTRFS_IOPRIO_READA	ctree.h	95;"	d
BTRFS_LEAF_DATA_OFFSET	ctree.h	1283;"	d
BTRFS_LEAF_DATA_SIZE	ctree.h	/^static inline u32 BTRFS_LEAF_DATA_SIZE(const struct btrfs_fs_info *info)$/;"	f
BTRFS_LINK_MAX	ctree.h	87;"	d
BTRFS_MAGIC	ctree.h	62;"	d
BTRFS_MAP_DISCARD	volumes.h	/^	BTRFS_MAP_DISCARD,$/;"	e	enum:btrfs_map_op
BTRFS_MAP_GET_READ_MIRRORS	volumes.h	/^	BTRFS_MAP_GET_READ_MIRRORS,$/;"	e	enum:btrfs_map_op
BTRFS_MAP_READ	volumes.h	/^	BTRFS_MAP_READ,$/;"	e	enum:btrfs_map_op
BTRFS_MAP_WRITE	volumes.h	/^	BTRFS_MAP_WRITE,$/;"	e	enum:btrfs_map_op
BTRFS_MAX_COMPRESSED	compression.h	33;"	d
BTRFS_MAX_DEDUPE_LEN	ioctl.c	3225;"	d	file:
BTRFS_MAX_DEVS	volumes.c	4575;"	d	file:
BTRFS_MAX_DEVS_SYS_CHUNK	volumes.c	4579;"	d	file:
BTRFS_MAX_EXTENT_ITEM_SIZE	ctree.h	350;"	d
BTRFS_MAX_EXTENT_SIZE	ctree.h	99;"	d
BTRFS_MAX_INLINE_DATA_SIZE	ctree.h	/^static inline u32 BTRFS_MAX_INLINE_DATA_SIZE(const struct btrfs_fs_info *info)$/;"	f
BTRFS_MAX_ITEM_SIZE	ctree.h	/^static inline u32 BTRFS_MAX_ITEM_SIZE(const struct btrfs_fs_info *info)$/;"	f
BTRFS_MAX_LEVEL	ctree.h	66;"	d
BTRFS_MAX_METADATA_BLOCKSIZE	ctree.h	74;"	d
BTRFS_MAX_MIRRORS	ctree.h	64;"	d
BTRFS_MAX_UNCOMPRESSED	compression.h	35;"	d
BTRFS_MAX_XATTR_SIZE	ctree.h	/^static inline u32 BTRFS_MAX_XATTR_SIZE(const struct btrfs_fs_info *info)$/;"	f
BTRFS_MINOR	super.c	/^MODULE_ALIAS_MISCDEV(BTRFS_MINOR);$/;"	v
BTRFS_MIXED_BACKREF_REV	ctree.h	135;"	d
BTRFS_MOUNT_AUTO_DEFRAG	ctree.h	1329;"	d
BTRFS_MOUNT_CHECK_INTEGRITY	ctree.h	1333;"	d
BTRFS_MOUNT_CHECK_INTEGRITY_INCLUDING_EXTENT_DATA	ctree.h	1334;"	d
BTRFS_MOUNT_CLEAR_CACHE	ctree.h	1326;"	d
BTRFS_MOUNT_COMPRESS	ctree.h	1318;"	d
BTRFS_MOUNT_DEGRADED	ctree.h	1317;"	d
BTRFS_MOUNT_DISCARD	ctree.h	1323;"	d
BTRFS_MOUNT_ENOSPC_DEBUG	ctree.h	1328;"	d
BTRFS_MOUNT_FLUSHONCOMMIT	ctree.h	1320;"	d
BTRFS_MOUNT_FORCE_COMPRESS	ctree.h	1324;"	d
BTRFS_MOUNT_FRAGMENT_DATA	ctree.h	1337;"	d
BTRFS_MOUNT_FRAGMENT_METADATA	ctree.h	1338;"	d
BTRFS_MOUNT_FREE_SPACE_TREE	ctree.h	1339;"	d
BTRFS_MOUNT_INODE_MAP_CACHE	ctree.h	1330;"	d
BTRFS_MOUNT_NOBARRIER	ctree.h	1315;"	d
BTRFS_MOUNT_NODATACOW	ctree.h	1314;"	d
BTRFS_MOUNT_NODATASUM	ctree.h	1313;"	d
BTRFS_MOUNT_NOLOGREPLAY	ctree.h	1340;"	d
BTRFS_MOUNT_NOSSD	ctree.h	1322;"	d
BTRFS_MOUNT_NOTREELOG	ctree.h	1319;"	d
BTRFS_MOUNT_PANIC_ON_FATAL_ERROR	ctree.h	1335;"	d
BTRFS_MOUNT_RESCAN_UUID_TREE	ctree.h	1336;"	d
BTRFS_MOUNT_SKIP_BALANCE	ctree.h	1332;"	d
BTRFS_MOUNT_SPACE_CACHE	ctree.h	1325;"	d
BTRFS_MOUNT_SSD	ctree.h	1316;"	d
BTRFS_MOUNT_SSD_SPREAD	ctree.h	1321;"	d
BTRFS_MOUNT_USEBACKUPROOT	ctree.h	1331;"	d
BTRFS_MOUNT_USER_SUBVOL_RM_ALLOWED	ctree.h	1327;"	d
BTRFS_NAME_LEN	ctree.h	80;"	d
BTRFS_NODEPTRS_PER_BLOCK	ctree.h	/^static inline u32 BTRFS_NODEPTRS_PER_BLOCK(const struct btrfs_fs_info *info)$/;"	f
BTRFS_NO_LOG_SYNC	tree-log.h	26;"	d
BTRFS_NUM_BACKUP_ROOTS	ctree.h	166;"	d
BTRFS_OLD_BACKREF_REV	ctree.h	134;"	d
BTRFS_ORDERED_COMPLETE	ordered-data.h	55;"	d
BTRFS_ORDERED_COMPRESSED	ordered-data.h	59;"	d
BTRFS_ORDERED_DIRECT	ordered-data.h	63;"	d
BTRFS_ORDERED_IOERR	ordered-data.h	65;"	d
BTRFS_ORDERED_IO_DONE	ordered-data.h	53;"	d
BTRFS_ORDERED_LOGGED	ordered-data.h	74;"	d
BTRFS_ORDERED_LOGGED_CSUM	ordered-data.h	70;"	d
BTRFS_ORDERED_NOCOW	ordered-data.h	57;"	d
BTRFS_ORDERED_PENDING	ordered-data.h	76;"	d
BTRFS_ORDERED_PREALLOC	ordered-data.h	61;"	d
BTRFS_ORDERED_REGULAR	ordered-data.h	78;"	d
BTRFS_ORDERED_TRUNCATED	ordered-data.h	72;"	d
BTRFS_ORDERED_UPDATED_ISIZE	ordered-data.h	67;"	d
BTRFS_PENDING_CLEAR_INODE_MAP_CACHE	ctree.h	1387;"	d
BTRFS_PENDING_COMMIT	ctree.h	1388;"	d
BTRFS_PENDING_SET_INODE_MAP_CACHE	ctree.h	1386;"	d
BTRFS_PROP_HANDLERS_HT_BITS	props.c	27;"	d	file:
BTRFS_RAID_ATTR	sysfs.h	34;"	d
BTRFS_RAID_ATTR_PTR	sysfs.h	38;"	d
BTRFS_RBIO_PARITY_SCRUB	raid56.c	/^	BTRFS_RBIO_PARITY_SCRUB,$/;"	e	enum:btrfs_rbio_ops	file:
BTRFS_RBIO_READ_REBUILD	raid56.c	/^	BTRFS_RBIO_READ_REBUILD,$/;"	e	enum:btrfs_rbio_ops	file:
BTRFS_RBIO_REBUILD_MISSING	raid56.c	/^	BTRFS_RBIO_REBUILD_MISSING,$/;"	e	enum:btrfs_rbio_ops	file:
BTRFS_RBIO_WRITE	raid56.c	/^	BTRFS_RBIO_WRITE,$/;"	e	enum:btrfs_rbio_ops	file:
BTRFS_READ_LOCK	locking.h	23;"	d
BTRFS_READ_LOCK_BLOCKING	locking.h	25;"	d
BTRFS_REF_TYPE_ANY	ctree.h	/^	BTRFS_REF_TYPE_ANY =		 3,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_REF_TYPE_BLOCK	ctree.h	/^	BTRFS_REF_TYPE_BLOCK =		 1,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_REF_TYPE_DATA	ctree.h	/^	BTRFS_REF_TYPE_DATA =		 2,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_REF_TYPE_INVALID	ctree.h	/^	BTRFS_REF_TYPE_INVALID =	 0,$/;"	e	enum:btrfs_inline_ref_type
BTRFS_RESERVE_FLUSH_ALL	ctree.h	/^	BTRFS_RESERVE_FLUSH_ALL,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_FLUSH_LIMIT	ctree.h	/^	BTRFS_RESERVE_FLUSH_LIMIT,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_RESERVE_NO_FLUSH	ctree.h	/^	BTRFS_RESERVE_NO_FLUSH,$/;"	e	enum:btrfs_reserve_flush_enum
BTRFS_ROOT_DEFRAG_RUNNING	ctree.h	1130;"	d
BTRFS_ROOT_DIRTY	ctree.h	1133;"	d
BTRFS_ROOT_FORCE_COW	ctree.h	1131;"	d
BTRFS_ROOT_IN_RADIX	ctree.h	1128;"	d
BTRFS_ROOT_IN_TRANS_SETUP	ctree.h	1125;"	d
BTRFS_ROOT_MULTI_LOG_TASKS	ctree.h	1132;"	d
BTRFS_ROOT_ORPHAN_ITEM_INSERTED	ctree.h	1129;"	d
BTRFS_ROOT_REF_COWS	ctree.h	1126;"	d
BTRFS_ROOT_TRACK_DIRTY	ctree.h	1127;"	d
BTRFS_ROOT_TRANS_TAG	transaction.c	36;"	d	file:
BTRFS_SEND_A_ATIME	send.h	/^	BTRFS_SEND_A_ATIME,$/;"	e	enum:__anon7
BTRFS_SEND_A_CLONE_CTRANSID	send.h	/^	BTRFS_SEND_A_CLONE_CTRANSID,$/;"	e	enum:__anon7
BTRFS_SEND_A_CLONE_LEN	send.h	/^	BTRFS_SEND_A_CLONE_LEN,$/;"	e	enum:__anon7
BTRFS_SEND_A_CLONE_OFFSET	send.h	/^	BTRFS_SEND_A_CLONE_OFFSET,$/;"	e	enum:__anon7
BTRFS_SEND_A_CLONE_PATH	send.h	/^	BTRFS_SEND_A_CLONE_PATH,$/;"	e	enum:__anon7
BTRFS_SEND_A_CLONE_UUID	send.h	/^	BTRFS_SEND_A_CLONE_UUID,$/;"	e	enum:__anon7
BTRFS_SEND_A_CTIME	send.h	/^	BTRFS_SEND_A_CTIME,$/;"	e	enum:__anon7
BTRFS_SEND_A_CTRANSID	send.h	/^	BTRFS_SEND_A_CTRANSID,$/;"	e	enum:__anon7
BTRFS_SEND_A_DATA	send.h	/^	BTRFS_SEND_A_DATA,$/;"	e	enum:__anon7
BTRFS_SEND_A_FILE_OFFSET	send.h	/^	BTRFS_SEND_A_FILE_OFFSET,$/;"	e	enum:__anon7
BTRFS_SEND_A_GID	send.h	/^	BTRFS_SEND_A_GID,$/;"	e	enum:__anon7
BTRFS_SEND_A_INO	send.h	/^	BTRFS_SEND_A_INO,$/;"	e	enum:__anon7
BTRFS_SEND_A_MAX	send.h	130;"	d
BTRFS_SEND_A_MODE	send.h	/^	BTRFS_SEND_A_MODE,$/;"	e	enum:__anon7
BTRFS_SEND_A_MTIME	send.h	/^	BTRFS_SEND_A_MTIME,$/;"	e	enum:__anon7
BTRFS_SEND_A_OTIME	send.h	/^	BTRFS_SEND_A_OTIME,$/;"	e	enum:__anon7
BTRFS_SEND_A_PATH	send.h	/^	BTRFS_SEND_A_PATH,$/;"	e	enum:__anon7
BTRFS_SEND_A_PATH_LINK	send.h	/^	BTRFS_SEND_A_PATH_LINK,$/;"	e	enum:__anon7
BTRFS_SEND_A_PATH_TO	send.h	/^	BTRFS_SEND_A_PATH_TO,$/;"	e	enum:__anon7
BTRFS_SEND_A_RDEV	send.h	/^	BTRFS_SEND_A_RDEV,$/;"	e	enum:__anon7
BTRFS_SEND_A_SIZE	send.h	/^	BTRFS_SEND_A_SIZE,$/;"	e	enum:__anon7
BTRFS_SEND_A_UID	send.h	/^	BTRFS_SEND_A_UID,$/;"	e	enum:__anon7
BTRFS_SEND_A_UNSPEC	send.h	/^	BTRFS_SEND_A_UNSPEC,$/;"	e	enum:__anon7
BTRFS_SEND_A_UUID	send.h	/^	BTRFS_SEND_A_UUID,$/;"	e	enum:__anon7
BTRFS_SEND_A_XATTR_DATA	send.h	/^	BTRFS_SEND_A_XATTR_DATA,$/;"	e	enum:__anon7
BTRFS_SEND_A_XATTR_NAME	send.h	/^	BTRFS_SEND_A_XATTR_NAME,$/;"	e	enum:__anon7
BTRFS_SEND_BUF_SIZE	send.h	25;"	d
BTRFS_SEND_C_CHMOD	send.h	/^	BTRFS_SEND_C_CHMOD,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_CHOWN	send.h	/^	BTRFS_SEND_C_CHOWN,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_CLONE	send.h	/^	BTRFS_SEND_C_CLONE,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_END	send.h	/^	BTRFS_SEND_C_END,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_LINK	send.h	/^	BTRFS_SEND_C_LINK,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MAX	send.h	92;"	d
BTRFS_SEND_C_MKDIR	send.h	/^	BTRFS_SEND_C_MKDIR,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKFIFO	send.h	/^	BTRFS_SEND_C_MKFIFO,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKFILE	send.h	/^	BTRFS_SEND_C_MKFILE,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKNOD	send.h	/^	BTRFS_SEND_C_MKNOD,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_MKSOCK	send.h	/^	BTRFS_SEND_C_MKSOCK,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_REMOVE_XATTR	send.h	/^	BTRFS_SEND_C_REMOVE_XATTR,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_RENAME	send.h	/^	BTRFS_SEND_C_RENAME,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_RMDIR	send.h	/^	BTRFS_SEND_C_RMDIR,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SET_XATTR	send.h	/^	BTRFS_SEND_C_SET_XATTR,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SNAPSHOT	send.h	/^	BTRFS_SEND_C_SNAPSHOT,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SUBVOL	send.h	/^	BTRFS_SEND_C_SUBVOL,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_SYMLINK	send.h	/^	BTRFS_SEND_C_SYMLINK,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_TRUNCATE	send.h	/^	BTRFS_SEND_C_TRUNCATE,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UNLINK	send.h	/^	BTRFS_SEND_C_UNLINK,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UNSPEC	send.h	/^	BTRFS_SEND_C_UNSPEC,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UPDATE_EXTENT	send.h	/^	BTRFS_SEND_C_UPDATE_EXTENT,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_UTIMES	send.h	/^	BTRFS_SEND_C_UTIMES,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_C_WRITE	send.h	/^	BTRFS_SEND_C_WRITE,$/;"	e	enum:btrfs_send_cmd
BTRFS_SEND_READ_SIZE	send.h	26;"	d
BTRFS_SEND_STREAM_MAGIC	send.h	22;"	d
BTRFS_SEND_STREAM_VERSION	send.h	23;"	d
BTRFS_SEND_TRANS_STUB	transaction.h	108;"	d
BTRFS_SETGET_FUNCS	ctree.h	1497;"	d
BTRFS_SETGET_HEADER_FUNCS	ctree.h	1525;"	d
BTRFS_SETGET_STACK_FUNCS	ctree.h	1539;"	d
BTRFS_STRIPE_HASH_TABLE_BITS	ctree.h	694;"	d
BTRFS_STRIPE_LEN	volumes.h	29;"	d
BTRFS_SUPER_FLAG_SUPP	disk-io.c	58;"	d	file:
BTRFS_SUPER_INFO_OFFSET	disk-io.h	22;"	d
BTRFS_SUPER_INFO_SIZE	disk-io.h	23;"	d
BTRFS_SUPER_MIRROR_MAX	disk-io.h	25;"	d
BTRFS_SUPER_MIRROR_SHIFT	disk-io.h	26;"	d
BTRFS_SYSTEM_CHUNK_ARRAY_SIZE	ctree.h	159;"	d
BTRFS_TLV_BINARY	send.h	/^	BTRFS_TLV_BINARY,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_STRING	send.h	/^	BTRFS_TLV_STRING,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_TIMESPEC	send.h	/^	BTRFS_TLV_TIMESPEC,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U16	send.h	/^	BTRFS_TLV_U16,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U32	send.h	/^	BTRFS_TLV_U32,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U64	send.h	/^	BTRFS_TLV_U64,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_U8	send.h	/^	BTRFS_TLV_U8,$/;"	e	enum:btrfs_tlv_type
BTRFS_TLV_UUID	send.h	/^	BTRFS_TLV_UUID,$/;"	e	enum:btrfs_tlv_type
BTRFS_TRANS_CACHE_ENOSPC	transaction.h	39;"	d
BTRFS_TRANS_DIRTY_BG_RUN	transaction.h	38;"	d
BTRFS_TRANS_HAVE_FREE_BGS	transaction.h	37;"	d
BTRFS_UPDATE_DELAYED_HEAD	delayed-ref.h	27;"	d
BTRFS_WORK_HELPER	async-thread.c	69;"	d	file:
BTRFS_WORK_HELPER_PROTO	async-thread.h	44;"	d
BTRFS_WQ_ENDIO_DATA	disk-io.h	/^	BTRFS_WQ_ENDIO_DATA = 0,$/;"	e	enum:btrfs_wq_endio_type
BTRFS_WQ_ENDIO_DIO_REPAIR	disk-io.h	/^	BTRFS_WQ_ENDIO_DIO_REPAIR = 4,$/;"	e	enum:btrfs_wq_endio_type
BTRFS_WQ_ENDIO_FREE_SPACE	disk-io.h	/^	BTRFS_WQ_ENDIO_FREE_SPACE = 2,$/;"	e	enum:btrfs_wq_endio_type
BTRFS_WQ_ENDIO_METADATA	disk-io.h	/^	BTRFS_WQ_ENDIO_METADATA = 1,$/;"	e	enum:btrfs_wq_endio_type
BTRFS_WQ_ENDIO_RAID56	disk-io.h	/^	BTRFS_WQ_ENDIO_RAID56 = 3,$/;"	e	enum:btrfs_wq_endio_type
BTRFS_WRITE_LOCK	locking.h	22;"	d
BTRFS_WRITE_LOCK_BLOCKING	locking.h	24;"	d
BUFFER_LRU_MAX	extent_io.c	101;"	d	file:
BYTE_MASK	extent_io.h	76;"	d
CACHING_CTL_WAKE_UP	ctree.h	526;"	d
CHUNK_ALLOC_FORCE	extent-tree.c	/^	CHUNK_ALLOC_FORCE = 2,$/;"	e	enum:__anon8	file:
CHUNK_ALLOC_LIMITED	extent-tree.c	/^	CHUNK_ALLOC_LIMITED = 1,$/;"	e	enum:__anon8	file:
CHUNK_ALLOC_NO_FORCE	extent-tree.c	/^	CHUNK_ALLOC_NO_FORCE = 0,$/;"	e	enum:__anon8	file:
COMMIT_TRANS	ctree.h	/^	COMMIT_TRANS		=	6,$/;"	e	enum:btrfs_flush_state
COPY_COMPLETE	scrub.c	4359;"	d	file:
CORRUPT	disk-io.c	546;"	d	file:
CREATE_TRACE_POINTS	super.c	65;"	d	file:
DEBUG	reada.c	32;"	d	file:
DECLARE_BTRFS_SETGET_BITS	ctree.h	1473;"	d
DEFINE_BTRFS_SETGET_BITS	struct-funcs.c	52;"	d	file:
DESCRIBE_FLAG	relocation.c	4313;"	d	file:
DESCRIBE_FLAG	relocation.c	4329;"	d	file:
DFT_THRESHOLD	async-thread.c	33;"	d	file:
DROP_REFERENCE	extent-tree.c	8576;"	d	file:
EXTENT_BIO_COMPRESSED	extent_io.h	36;"	d
EXTENT_BIO_FLAG_SHIFT	extent_io.h	38;"	d
EXTENT_BIO_TREE_LOG	extent_io.h	37;"	d
EXTENT_BOUNDARY	extent_io.h	17;"	d
EXTENT_BUFFER_CORRUPT	extent_io.h	43;"	d
EXTENT_BUFFER_DIRTY	extent_io.h	42;"	d
EXTENT_BUFFER_DUMMY	extent_io.h	49;"	d
EXTENT_BUFFER_IN_TREE	extent_io.h	50;"	d
EXTENT_BUFFER_READAHEAD	extent_io.h	44;"	d
EXTENT_BUFFER_READ_ERR	extent_io.h	48;"	d
EXTENT_BUFFER_STALE	extent_io.h	46;"	d
EXTENT_BUFFER_TREE_REF	extent_io.h	45;"	d
EXTENT_BUFFER_UPTODATE	extent_io.h	41;"	d
EXTENT_BUFFER_WRITEBACK	extent_io.h	47;"	d
EXTENT_BUFFER_WRITE_ERR	extent_io.h	51;"	d
EXTENT_CLEAR_DATA_RESV	extent_io.h	25;"	d
EXTENT_CLEAR_META_RESV	extent_io.h	19;"	d
EXTENT_CTLBITS	extent_io.h	30;"	d
EXTENT_DAMAGED	extent_io.h	22;"	d
EXTENT_DEFRAG	extent_io.h	16;"	d
EXTENT_DELALLOC	extent_io.h	15;"	d
EXTENT_DELALLOC_NEW	extent_io.h	26;"	d
EXTENT_DIRTY	extent_io.h	10;"	d
EXTENT_DO_ACCOUNTING	extent_io.h	28;"	d
EXTENT_FIRST_DELALLOC	extent_io.h	20;"	d
EXTENT_FLAG_COMPRESSED	extent_map.h	15;"	d
EXTENT_FLAG_FILLING	extent_map.h	19;"	d
EXTENT_FLAG_FS_MAPPING	extent_map.h	20;"	d
EXTENT_FLAG_LOGGING	extent_map.h	18;"	d
EXTENT_FLAG_PINNED	extent_map.h	14;"	d
EXTENT_FLAG_PREALLOC	extent_map.h	17;"	d
EXTENT_FLAG_VACANCY	extent_map.h	16;"	d
EXTENT_IOBITS	extent_io.h	27;"	d
EXTENT_LOCKED	extent_io.h	13;"	d
EXTENT_MAP_DELALLOC	extent_map.h	11;"	d
EXTENT_MAP_HOLE	extent_map.h	9;"	d
EXTENT_MAP_INLINE	extent_map.h	10;"	d
EXTENT_MAP_LAST_BYTE	extent_map.h	8;"	d
EXTENT_NEED_WAIT	extent_io.h	21;"	d
EXTENT_NEW	extent_io.h	14;"	d
EXTENT_NODATASUM	extent_io.h	18;"	d
EXTENT_NORESERVE	extent_io.h	23;"	d
EXTENT_PAGE_PRIVATE	extent_io.h	66;"	d
EXTENT_QGROUP_RESERVED	extent_io.h	24;"	d
EXTENT_SIZE_PER_ITEM	extent-tree.c	4838;"	d	file:
EXTENT_UPTODATE	extent_io.h	12;"	d
EXTENT_WRITEBACK	extent_io.h	11;"	d
FEAT_COMPAT	sysfs.h	/^	FEAT_COMPAT,$/;"	e	enum:btrfs_feature_set
FEAT_COMPAT_RO	sysfs.h	/^	FEAT_COMPAT_RO,$/;"	e	enum:btrfs_feature_set
FEAT_INCOMPAT	sysfs.h	/^	FEAT_INCOMPAT,$/;"	e	enum:btrfs_feature_set
FEAT_MAX	sysfs.h	/^	FEAT_MAX$/;"	e	enum:btrfs_feature_set
FLUSH_DELALLOC	ctree.h	/^	FLUSH_DELALLOC		=	3,$/;"	e	enum:btrfs_flush_state
FLUSH_DELALLOC_WAIT	ctree.h	/^	FLUSH_DELALLOC_WAIT	=	4,$/;"	e	enum:btrfs_flush_state
FLUSH_DELAYED_ITEMS	ctree.h	/^	FLUSH_DELAYED_ITEMS	=	2,$/;"	e	enum:btrfs_flush_state
FLUSH_DELAYED_ITEMS_NR	ctree.h	/^	FLUSH_DELAYED_ITEMS_NR	=	1,$/;"	e	enum:btrfs_flush_state
FS_PATH_INLINE_SIZE	send.c	65;"	d	file:
INIT_FEATURE_FLAGS	ioctl.c	5321;"	d	file:
INIT_THRESHOLD	inode-map.c	288;"	d	file:
INLINE_EXTENT_BUFFER_PAGES	extent_io.h	165;"	d
INODES_PER_BITMAP	inode-map.c	289;"	d	file:
KDIR	Makefile	/^KDIR :=\/lib\/modules\/$(shell uname -r)\/build$/;"	m
LOG_INODE_ALL	tree-log.c	38;"	d	file:
LOG_INODE_EXISTS	tree-log.c	39;"	d	file:
LOG_OTHER_INODE	tree-log.c	40;"	d	file:
LOG_WALK_PIN_ONLY	tree-log.c	94;"	d	file:
LOG_WALK_REPLAY_ALL	tree-log.c	97;"	d	file:
LOG_WALK_REPLAY_DIR_INDEX	tree-log.c	96;"	d	file:
LOG_WALK_REPLAY_INODES	tree-log.c	95;"	d	file:
LOOP_ALLOC_CHUNK	extent-tree.c	/^	LOOP_ALLOC_CHUNK = 2,$/;"	e	enum:btrfs_loop_type	file:
LOOP_CACHING_NOWAIT	extent-tree.c	/^	LOOP_CACHING_NOWAIT = 0,$/;"	e	enum:btrfs_loop_type	file:
LOOP_CACHING_WAIT	extent-tree.c	/^	LOOP_CACHING_WAIT = 1,$/;"	e	enum:btrfs_loop_type	file:
LOOP_NO_EMPTY_SIZE	extent-tree.c	/^	LOOP_NO_EMPTY_SIZE = 3,$/;"	e	enum:btrfs_loop_type	file:
LOWER	relocation.c	97;"	d	file:
LZO_LEN	lzo.c	31;"	d	file:
MAX_CACHE_BYTES_PER_GIG	free-space-cache.c	34;"	d	file:
MAX_CSUM_ITEMS	file-item.c	34;"	d	file:
MAX_EXTENTS	relocation.c	150;"	d	file:
MAX_INLINE_EXTENT_BUFFER_SIZE	extent_io.h	166;"	d
MAX_IN_FLIGHT	reada.c	58;"	d	file:
MAX_ORDERED_SUM_BYTES	file-item.c	37;"	d	file:
MOD_LOG_KEY_ADD	ctree.c	/^	MOD_LOG_KEY_ADD,$/;"	e	enum:mod_log_op	file:
MOD_LOG_KEY_REMOVE	ctree.c	/^	MOD_LOG_KEY_REMOVE,$/;"	e	enum:mod_log_op	file:
MOD_LOG_KEY_REMOVE_WHILE_FREEING	ctree.c	/^	MOD_LOG_KEY_REMOVE_WHILE_FREEING,$/;"	e	enum:mod_log_op	file:
MOD_LOG_KEY_REMOVE_WHILE_MOVING	ctree.c	/^	MOD_LOG_KEY_REMOVE_WHILE_MOVING,$/;"	e	enum:mod_log_op	file:
MOD_LOG_KEY_REPLACE	ctree.c	/^	MOD_LOG_KEY_REPLACE,$/;"	e	enum:mod_log_op	file:
MOD_LOG_MOVE_KEYS	ctree.c	/^	MOD_LOG_MOVE_KEYS,$/;"	e	enum:mod_log_op	file:
MOD_LOG_ROOT_REPLACE	ctree.c	/^	MOD_LOG_ROOT_REPLACE,$/;"	e	enum:mod_log_op	file:
MOVE_DATA_EXTENTS	relocation.c	195;"	d	file:
NO_THRESHOLD	async-thread.c	32;"	d	file:
NUM_FEATURE_BITS	sysfs.c	528;"	d	file:
ORPHAN_CLEANUP_DONE	ctree.h	/^	ORPHAN_CLEANUP_DONE	= 2,$/;"	e	enum:btrfs_orphan_cleanup_state
ORPHAN_CLEANUP_STARTED	ctree.h	/^	ORPHAN_CLEANUP_STARTED	= 1,$/;"	e	enum:btrfs_orphan_cleanup_state
Opt_acl	super.c	/^	Opt_noenospc_debug, Opt_noflushoncommit, Opt_acl, Opt_datacow,$/;"	e	enum:__anon9	file:
Opt_alloc_start	super.c	/^	Opt_nodatacow, Opt_max_inline, Opt_alloc_start, Opt_nobarrier, Opt_ssd,$/;"	e	enum:__anon9	file:
Opt_barrier	super.c	/^	Opt_commit_interval, Opt_barrier, Opt_nodefrag, Opt_nodiscard,$/;"	e	enum:__anon9	file:
Opt_check_integrity	super.c	/^	Opt_skip_balance, Opt_check_integrity,$/;"	e	enum:__anon9	file:
Opt_check_integrity_including_extent_data	super.c	/^	Opt_check_integrity_including_extent_data,$/;"	e	enum:__anon9	file:
Opt_check_integrity_print_mask	super.c	/^	Opt_check_integrity_print_mask, Opt_fatal_errors, Opt_rescan_uuid_tree,$/;"	e	enum:__anon9	file:
Opt_clear_cache	super.c	/^	Opt_space_cache, Opt_space_cache_version, Opt_clear_cache,$/;"	e	enum:__anon9	file:
Opt_commit_interval	super.c	/^	Opt_commit_interval, Opt_barrier, Opt_nodefrag, Opt_nodiscard,$/;"	e	enum:__anon9	file:
Opt_compress	super.c	/^	Opt_nossd, Opt_ssd_spread, Opt_thread_pool, Opt_noacl, Opt_compress,$/;"	e	enum:__anon9	file:
Opt_compress_force	super.c	/^	Opt_compress_type, Opt_compress_force, Opt_compress_force_type,$/;"	e	enum:__anon9	file:
Opt_compress_force_type	super.c	/^	Opt_compress_type, Opt_compress_force, Opt_compress_force_type,$/;"	e	enum:__anon9	file:
Opt_compress_type	super.c	/^	Opt_compress_type, Opt_compress_force, Opt_compress_force_type,$/;"	e	enum:__anon9	file:
Opt_datacow	super.c	/^	Opt_noenospc_debug, Opt_noflushoncommit, Opt_acl, Opt_datacow,$/;"	e	enum:__anon9	file:
Opt_datasum	super.c	/^	Opt_datasum, Opt_treelog, Opt_noinode_cache, Opt_usebackuproot,$/;"	e	enum:__anon9	file:
Opt_defrag	super.c	/^	Opt_defrag, Opt_inode_cache, Opt_no_space_cache, Opt_recovery,$/;"	e	enum:__anon9	file:
Opt_degraded	super.c	/^	Opt_degraded, Opt_subvol, Opt_subvolid, Opt_device, Opt_nodatasum,$/;"	e	enum:__anon9	file:
Opt_device	super.c	/^	Opt_degraded, Opt_subvol, Opt_subvolid, Opt_device, Opt_nodatasum,$/;"	e	enum:__anon9	file:
Opt_discard	super.c	/^	Opt_notreelog, Opt_ratio, Opt_flushoncommit, Opt_discard,$/;"	e	enum:__anon9	file:
Opt_enospc_debug	super.c	/^	Opt_user_subvol_rm_allowed, Opt_enospc_debug, Opt_subvolrootid,$/;"	e	enum:__anon9	file:
Opt_err	super.c	/^	Opt_err,$/;"	e	enum:__anon9	file:
Opt_fatal_errors	super.c	/^	Opt_check_integrity_print_mask, Opt_fatal_errors, Opt_rescan_uuid_tree,$/;"	e	enum:__anon9	file:
Opt_flushoncommit	super.c	/^	Opt_notreelog, Opt_ratio, Opt_flushoncommit, Opt_discard,$/;"	e	enum:__anon9	file:
Opt_fragment_all	super.c	/^	Opt_fragment_data, Opt_fragment_metadata, Opt_fragment_all,$/;"	e	enum:__anon9	file:
Opt_fragment_data	super.c	/^	Opt_fragment_data, Opt_fragment_metadata, Opt_fragment_all,$/;"	e	enum:__anon9	file:
Opt_fragment_metadata	super.c	/^	Opt_fragment_data, Opt_fragment_metadata, Opt_fragment_all,$/;"	e	enum:__anon9	file:
Opt_inode_cache	super.c	/^	Opt_defrag, Opt_inode_cache, Opt_no_space_cache, Opt_recovery,$/;"	e	enum:__anon9	file:
Opt_max_inline	super.c	/^	Opt_nodatacow, Opt_max_inline, Opt_alloc_start, Opt_nobarrier, Opt_ssd,$/;"	e	enum:__anon9	file:
Opt_no_space_cache	super.c	/^	Opt_defrag, Opt_inode_cache, Opt_no_space_cache, Opt_recovery,$/;"	e	enum:__anon9	file:
Opt_noacl	super.c	/^	Opt_nossd, Opt_ssd_spread, Opt_thread_pool, Opt_noacl, Opt_compress,$/;"	e	enum:__anon9	file:
Opt_nobarrier	super.c	/^	Opt_nodatacow, Opt_max_inline, Opt_alloc_start, Opt_nobarrier, Opt_ssd,$/;"	e	enum:__anon9	file:
Opt_nodatacow	super.c	/^	Opt_nodatacow, Opt_max_inline, Opt_alloc_start, Opt_nobarrier, Opt_ssd,$/;"	e	enum:__anon9	file:
Opt_nodatasum	super.c	/^	Opt_degraded, Opt_subvol, Opt_subvolid, Opt_device, Opt_nodatasum,$/;"	e	enum:__anon9	file:
Opt_nodefrag	super.c	/^	Opt_commit_interval, Opt_barrier, Opt_nodefrag, Opt_nodiscard,$/;"	e	enum:__anon9	file:
Opt_nodiscard	super.c	/^	Opt_commit_interval, Opt_barrier, Opt_nodefrag, Opt_nodiscard,$/;"	e	enum:__anon9	file:
Opt_noenospc_debug	super.c	/^	Opt_noenospc_debug, Opt_noflushoncommit, Opt_acl, Opt_datacow,$/;"	e	enum:__anon9	file:
Opt_noflushoncommit	super.c	/^	Opt_noenospc_debug, Opt_noflushoncommit, Opt_acl, Opt_datacow,$/;"	e	enum:__anon9	file:
Opt_noinode_cache	super.c	/^	Opt_datasum, Opt_treelog, Opt_noinode_cache, Opt_usebackuproot,$/;"	e	enum:__anon9	file:
Opt_nologreplay	super.c	/^	Opt_nologreplay, Opt_norecovery,$/;"	e	enum:__anon9	file:
Opt_norecovery	super.c	/^	Opt_nologreplay, Opt_norecovery,$/;"	e	enum:__anon9	file:
Opt_nossd	super.c	/^	Opt_nossd, Opt_ssd_spread, Opt_thread_pool, Opt_noacl, Opt_compress,$/;"	e	enum:__anon9	file:
Opt_notreelog	super.c	/^	Opt_notreelog, Opt_ratio, Opt_flushoncommit, Opt_discard,$/;"	e	enum:__anon9	file:
Opt_ratio	super.c	/^	Opt_notreelog, Opt_ratio, Opt_flushoncommit, Opt_discard,$/;"	e	enum:__anon9	file:
Opt_recovery	super.c	/^	Opt_defrag, Opt_inode_cache, Opt_no_space_cache, Opt_recovery,$/;"	e	enum:__anon9	file:
Opt_rescan_uuid_tree	super.c	/^	Opt_check_integrity_print_mask, Opt_fatal_errors, Opt_rescan_uuid_tree,$/;"	e	enum:__anon9	file:
Opt_skip_balance	super.c	/^	Opt_skip_balance, Opt_check_integrity,$/;"	e	enum:__anon9	file:
Opt_space_cache	super.c	/^	Opt_space_cache, Opt_space_cache_version, Opt_clear_cache,$/;"	e	enum:__anon9	file:
Opt_space_cache_version	super.c	/^	Opt_space_cache, Opt_space_cache_version, Opt_clear_cache,$/;"	e	enum:__anon9	file:
Opt_ssd	super.c	/^	Opt_nodatacow, Opt_max_inline, Opt_alloc_start, Opt_nobarrier, Opt_ssd,$/;"	e	enum:__anon9	file:
Opt_ssd_spread	super.c	/^	Opt_nossd, Opt_ssd_spread, Opt_thread_pool, Opt_noacl, Opt_compress,$/;"	e	enum:__anon9	file:
Opt_subvol	super.c	/^	Opt_degraded, Opt_subvol, Opt_subvolid, Opt_device, Opt_nodatasum,$/;"	e	enum:__anon9	file:
Opt_subvolid	super.c	/^	Opt_degraded, Opt_subvol, Opt_subvolid, Opt_device, Opt_nodatasum,$/;"	e	enum:__anon9	file:
Opt_subvolrootid	super.c	/^	Opt_user_subvol_rm_allowed, Opt_enospc_debug, Opt_subvolrootid,$/;"	e	enum:__anon9	file:
Opt_thread_pool	super.c	/^	Opt_nossd, Opt_ssd_spread, Opt_thread_pool, Opt_noacl, Opt_compress,$/;"	e	enum:__anon9	file:
Opt_treelog	super.c	/^	Opt_datasum, Opt_treelog, Opt_noinode_cache, Opt_usebackuproot,$/;"	e	enum:__anon9	file:
Opt_usebackuproot	super.c	/^	Opt_datasum, Opt_treelog, Opt_noinode_cache, Opt_usebackuproot,$/;"	e	enum:__anon9	file:
Opt_user_subvol_rm_allowed	super.c	/^	Opt_user_subvol_rm_allowed, Opt_enospc_debug, Opt_subvolrootid,$/;"	e	enum:__anon9	file:
PAGE_CLEAR_DIRTY	extent_io.h	55;"	d
PAGE_END_WRITEBACK	extent_io.h	57;"	d
PAGE_LOCK	extent_io.h	60;"	d
PAGE_SET_ERROR	extent_io.h	59;"	d
PAGE_SET_PRIVATE2	extent_io.h	58;"	d
PAGE_SET_WRITEBACK	extent_io.h	56;"	d
PAGE_UNLOCK	extent_io.h	54;"	d
PREFTREE_INIT	backref.c	129;"	d	file:
PROCESS_RELEASE	tests/extent-io-tests.c	28;"	d	file:
PROCESS_TEST_LOCKED	tests/extent-io-tests.c	29;"	d	file:
PROCESS_UNLOCK	tests/extent-io-tests.c	27;"	d	file:
PWD	Makefile	/^PWD := $(shell pwd)$/;"	m
QGROUP_FREE	qgroup.h	113;"	d
QGROUP_RELEASE	qgroup.h	112;"	d
QGROUP_RESERVE	qgroup.h	111;"	d
RAID5_P_STRIPE	raid56.h	36;"	d
RAID6_Q_STRIPE	raid56.h	37;"	d
RBIO_CACHE_BIT	raid56.c	54;"	d	file:
RBIO_CACHE_READY_BIT	raid56.c	59;"	d	file:
RBIO_CACHE_SIZE	raid56.c	61;"	d	file:
RBIO_RMW_LOCKED_BIT	raid56.c	48;"	d	file:
READA_BACK	ctree.h	/^enum { READA_NONE = 0, READA_BACK, READA_FORWARD };$/;"	e	enum:__anon11
READA_FORWARD	ctree.h	/^enum { READA_NONE = 0, READA_BACK, READA_FORWARD };$/;"	e	enum:__anon11
READA_NONE	ctree.h	/^enum { READA_NONE = 0, READA_BACK, READA_FORWARD };$/;"	e	enum:__anon11
RELOCATION_RESERVED_NODES	relocation.c	99;"	d	file:
SCRAMBLE_DELAYED_REFS	extent-tree.c	42;"	d	file:
SCRUB_BIOS_PER_SCTX	scrub.c	58;"	d	file:
SCRUB_MAX_PAGES_PER_BLOCK	scrub.c	65;"	d	file:
SCRUB_PAGES_PER_RD_BIO	scrub.c	56;"	d	file:
SCRUB_PAGES_PER_WR_BIO	scrub.c	57;"	d	file:
SEND_CTX_MAX_NAME_CACHE_SIZE	send.c	78;"	d	file:
SEND_CTX_NAME_CACHE_CLEAN_SIZE	send.c	79;"	d	file:
SEQ_LAST	ctree.h	672;"	d
SEQ_LIST_INIT	ctree.h	670;"	d
SPACE_INFO_ATTR	sysfs.c	306;"	d	file:
STATIC	ctree.h	57;"	d
STATIC	ctree.h	59;"	d
S_SHIFT	inode.c	92;"	d	file:
TLV_PUT	send.c	613;"	d	file:
TLV_PUT_BTRFS_TIMESPEC	send.c	650;"	d	file:
TLV_PUT_DEFINE_INT	send.c	579;"	d	file:
TLV_PUT_INT	send.c	620;"	d	file:
TLV_PUT_PATH	send.c	637;"	d	file:
TLV_PUT_STRING	send.c	631;"	d	file:
TLV_PUT_U16	send.c	628;"	d	file:
TLV_PUT_U32	send.c	629;"	d	file:
TLV_PUT_U64	send.c	630;"	d	file:
TLV_PUT_U8	send.c	627;"	d	file:
TLV_PUT_UUID	send.c	644;"	d	file:
TRANS_ATTACH	transaction.h	101;"	d
TRANS_EXTWRITERS	transaction.h	105;"	d
TRANS_JOIN	transaction.h	102;"	d
TRANS_JOIN_NOLOCK	transaction.h	103;"	d
TRANS_START	transaction.h	100;"	d
TRANS_STATE_BLOCKED	transaction.h	/^	TRANS_STATE_BLOCKED		= 1,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_COMMIT_DOING	transaction.h	/^	TRANS_STATE_COMMIT_DOING	= 3,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_COMMIT_START	transaction.h	/^	TRANS_STATE_COMMIT_START	= 2,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_COMPLETED	transaction.h	/^	TRANS_STATE_COMPLETED		= 5,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_MAX	transaction.h	/^	TRANS_STATE_MAX			= 6,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_RUNNING	transaction.h	/^	TRANS_STATE_RUNNING		= 0,$/;"	e	enum:btrfs_trans_state
TRANS_STATE_UNBLOCKED	transaction.h	/^	TRANS_STATE_UNBLOCKED		= 4,$/;"	e	enum:btrfs_trans_state
TRANS_USERSPACE	transaction.h	99;"	d
ULIST_ITER_INIT	ulist.h	73;"	d
UPDATE_BACKREF	extent-tree.c	8577;"	d	file:
UPDATE_DATA_PTRS	relocation.c	196;"	d	file:
UPDATE_NEW	qgroup.c	1706;"	d	file:
UPDATE_OLD	qgroup.c	1707;"	d	file:
UPPER	relocation.c	98;"	d	file:
WAIT_COMPLETE	extent_io.h	435;"	d
WAIT_NONE	extent_io.h	434;"	d
WAIT_PAGE_LOCK	extent_io.h	436;"	d
WORK_DONE_BIT	async-thread.c	28;"	d	file:
WORK_HIGH_PRIO_BIT	async-thread.c	30;"	d	file:
WORK_ORDER_DONE_BIT	async-thread.c	29;"	d	file:
ZSTD_BTRFS_DEFAULT_LEVEL	zstd.c	28;"	d	file:
ZSTD_BTRFS_MAX_INPUT	zstd.c	27;"	d	file:
ZSTD_BTRFS_MAX_WINDOWLOG	zstd.c	26;"	d	file:
_BTRFS_SYSFS_H_	sysfs.h	3;"	d
__BTRFS_ASYNC_THREAD_	async-thread.h	21;"	d
__BTRFS_BACKREF__	backref.h	20;"	d
__BTRFS_CHECK_INTEGRITY__	check-integrity.h	20;"	d
__BTRFS_COMPRESSION_	compression.h	20;"	d
__BTRFS_CTREE__	ctree.h	20;"	d
__BTRFS_DEDUPE__	dedupe.h	20;"	d
__BTRFS_DEV_REPLACE__	dev-replace.h	20;"	d
__BTRFS_FREE_SPACE_CACHE	free-space-cache.h	20;"	d
__BTRFS_FREE_SPACE_TREE	free-space-tree.h	20;"	d
__BTRFS_INODE_MAP	inode-map.h	3;"	d
__BTRFS_I__	btrfs_inode.h	20;"	d
__BTRFS_LOCKING_	locking.h	20;"	d
__BTRFS_MATH_H	math.h	22;"	d
__BTRFS_NEED_DEVICE_DATA_ORDERED	volumes.h	43;"	d
__BTRFS_ORDERED_DATA__	ordered-data.h	20;"	d
__BTRFS_PROPS_H	props.h	20;"	d
__BTRFS_QGROUP__	qgroup.h	20;"	d
__BTRFS_RAID56__	raid56.h	21;"	d
__BTRFS_SEND_A_MAX	send.h	/^	__BTRFS_SEND_A_MAX,$/;"	e	enum:__anon7
__BTRFS_SEND_C_MAX	send.h	/^	__BTRFS_SEND_C_MAX,$/;"	e	enum:btrfs_send_cmd
__BTRFS_TESTS	tests/btrfs-tests.h	20;"	d
__BTRFS_TRANSACTION__	transaction.h	20;"	d
__BTRFS_VOLUMES_	volumes.h	20;"	d
__DELAYED_REF__	delayed-ref.h	19;"	d
__DELAYED_TREE_OPERATION_H	delayed-inode.h	21;"	d
__DISKIO__	disk-io.h	20;"	d
__EXTENTIO__	extent_io.h	3;"	d
__EXTENTMAP__	extent_map.h	3;"	d
__HASH__	hash.h	20;"	d
__INIT_KOBJ_ATTR	sysfs.h	17;"	d
__MAX_CSUM_ITEMS	file-item.c	30;"	d	file:
__PRINT_TREE_	print-tree.h	20;"	d
__TRANS_ATTACH	transaction.h	94;"	d
__TRANS_DUMMY	transaction.h	97;"	d
__TRANS_FREEZABLE	transaction.h	90;"	d
__TRANS_JOIN	transaction.h	95;"	d
__TRANS_JOIN_NOLOCK	transaction.h	96;"	d
__TRANS_START	transaction.h	93;"	d
__TRANS_USERSPACE	transaction.h	92;"	d
__TREE_LOG_	tree-log.h	20;"	d
__ULIST__	ulist.h	9;"	d
__XATTR__	xattr.h	20;"	d
____cacheline_aligned	volumes.h	/^	spinlock_t io_lock ____cacheline_aligned;$/;"	m	struct:btrfs_device
__add_block_group_free_space	free-space-tree.c	/^static int __add_block_group_free_space(struct btrfs_trans_handle *trans,$/;"	f	file:
__add_inode_ref	tree-log.c	/^static inline int __add_inode_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
__add_reloc_root	relocation.c	/^static int __must_check __add_reloc_root(struct btrfs_root *root)$/;"	f	file:
__add_to_free_space_tree	free-space-tree.c	/^int __add_to_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f
__add_tree_block	relocation.c	/^static int __add_tree_block(struct reloc_control *rc,$/;"	f	file:
__alloc_device	volumes.c	/^static struct btrfs_device *__alloc_device(void)$/;"	f	file:
__alloc_dummy_extent_buffer	extent_io.c	/^struct extent_buffer *__alloc_dummy_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f
__alloc_extent_buffer	extent_io.c	/^__alloc_extent_buffer(struct btrfs_fs_info *fs_info, u64 start,$/;"	f	file:
__bitmap_clear_bits	free-space-cache.c	/^static inline void __bitmap_clear_bits(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
__btree_submit_bio_done	disk-io.c	/^static blk_status_t __btree_submit_bio_done(void *private_data, struct bio *bio,$/;"	f	file:
__btree_submit_bio_start	disk-io.c	/^static blk_status_t __btree_submit_bio_start(void *private_data, struct bio *bio,$/;"	f	file:
__btrfs_abort_transaction	super.c	/^void __btrfs_abort_transaction(struct btrfs_trans_handle *trans,$/;"	f
__btrfs_add_delayed_deletion_item	delayed-inode.c	/^static int __btrfs_add_delayed_deletion_item(struct btrfs_delayed_node *node,$/;"	f	file:
__btrfs_add_delayed_insertion_item	delayed-inode.c	/^static int __btrfs_add_delayed_insertion_item(struct btrfs_delayed_node *node,$/;"	f	file:
__btrfs_add_delayed_item	delayed-inode.c	/^static int __btrfs_add_delayed_item(struct btrfs_delayed_node *delayed_node,$/;"	f	file:
__btrfs_add_free_space	free-space-cache.c	/^int __btrfs_add_free_space(struct btrfs_fs_info *fs_info,$/;"	f
__btrfs_add_inode_defrag	file.c	/^static int __btrfs_add_inode_defrag(struct btrfs_inode *inode,$/;"	f	file:
__btrfs_add_ordered_extent	ordered-data.c	/^static int __btrfs_add_ordered_extent(struct inode *inode, u64 file_offset,$/;"	f	file:
__btrfs_alloc_chunk	volumes.c	/^static int __btrfs_alloc_chunk(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_alloc_workqueue	async-thread.c	/^__btrfs_alloc_workqueue(struct btrfs_fs_info *fs_info, const char *name,$/;"	f	file:
__btrfs_balance	volumes.c	/^static int __btrfs_balance(struct btrfs_fs_info *fs_info)$/;"	f	file:
__btrfs_btree_balance_dirty	disk-io.c	/^static void __btrfs_btree_balance_dirty(struct btrfs_fs_info *fs_info,$/;"	f	file:
__btrfs_buffered_write	file.c	/^static noinline ssize_t __btrfs_buffered_write(struct file *file,$/;"	f	file:
__btrfs_clear_fs_compat_ro	ctree.h	/^static inline void __btrfs_clear_fs_compat_ro(struct btrfs_fs_info *fs_info,$/;"	f
__btrfs_clear_fs_incompat	ctree.h	/^static inline void __btrfs_clear_fs_incompat(struct btrfs_fs_info *fs_info,$/;"	f
__btrfs_close_devices	volumes.c	/^static int __btrfs_close_devices(struct btrfs_fs_devices *fs_devices)$/;"	f	file:
__btrfs_commit_inode_delayed_items	delayed-inode.c	/^__btrfs_commit_inode_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_correct_data_nocsum	inode.c	/^static blk_status_t __btrfs_correct_data_nocsum(struct inode *inode,$/;"	f	file:
__btrfs_cow_block	ctree.c	/^static noinline int __btrfs_cow_block(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_debug_check_extent_io_range	extent_io.c	/^static inline void __btrfs_debug_check_extent_io_range(const char *caller,$/;"	f	file:
__btrfs_destroy_workqueue	async-thread.c	/^__btrfs_destroy_workqueue(struct __btrfs_workqueue *wq)$/;"	f	file:
__btrfs_dev_replace_cancel	dev-replace.c	/^static u64 __btrfs_dev_replace_cancel(struct btrfs_fs_info *fs_info)$/;"	f	file:
__btrfs_direct_write	file.c	/^static ssize_t __btrfs_direct_write(struct kiocb *iocb, struct iov_iter *from)$/;"	f	file:
__btrfs_drop_extents	file.c	/^int __btrfs_drop_extents(struct btrfs_trans_handle *trans,$/;"	f
__btrfs_end_transaction	transaction.c	/^static int __btrfs_end_transaction(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_first_delayed_deletion_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_first_delayed_deletion_item($/;"	f	file:
__btrfs_first_delayed_insertion_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_first_delayed_insertion_item($/;"	f	file:
__btrfs_free_block_rsv	extent-tree.c	/^void __btrfs_free_block_rsv(struct btrfs_block_rsv *rsv)$/;"	f
__btrfs_free_extent	extent-tree.c	/^static int __btrfs_free_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_free_reserved_extent	extent-tree.c	/^static int __btrfs_free_reserved_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
__btrfs_fs_compat_ro	ctree.h	/^static inline int __btrfs_fs_compat_ro(struct btrfs_fs_info *fs_info, u64 flag)$/;"	f
__btrfs_fs_incompat	ctree.h	/^static inline bool __btrfs_fs_incompat(struct btrfs_fs_info *fs_info, u64 flag)$/;"	f
__btrfs_getxattr	xattr.c	/^ssize_t __btrfs_getxattr(struct inode *inode, const char *name,$/;"	f
__btrfs_handle_fs_error	super.c	/^void __btrfs_handle_fs_error(struct btrfs_fs_info *fs_info, const char *function,$/;"	f
__btrfs_inc_extent_ref	extent-tree.c	/^static int __btrfs_inc_extent_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_kill_delayed_node	delayed-inode.c	/^static void __btrfs_kill_delayed_node(struct btrfs_delayed_node *delayed_node)$/;"	f	file:
__btrfs_lookup_bio_sums	file-item.c	/^static blk_status_t __btrfs_lookup_bio_sums(struct inode *inode, struct bio *bio,$/;"	f	file:
__btrfs_lookup_delayed_insertion_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_lookup_delayed_insertion_item($/;"	f	file:
__btrfs_lookup_delayed_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_lookup_delayed_item($/;"	f	file:
__btrfs_map_block	volumes.c	/^static int __btrfs_map_block(struct btrfs_fs_info *fs_info,$/;"	f	file:
__btrfs_map_block_for_discard	volumes.c	/^static int __btrfs_map_block_for_discard(struct btrfs_fs_info *fs_info,$/;"	f	file:
__btrfs_mod_ref	extent-tree.c	/^static int __btrfs_mod_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_next_delayed_item	delayed-inode.c	/^static struct btrfs_delayed_item *__btrfs_next_delayed_item($/;"	f	file:
__btrfs_open_devices	volumes.c	/^static int __btrfs_open_devices(struct btrfs_fs_devices *fs_devices,$/;"	f	file:
__btrfs_panic	super.c	/^void __btrfs_panic(struct btrfs_fs_info *fs_info, const char *function,$/;"	f
__btrfs_prealloc_file_range	inode.c	/^static int __btrfs_prealloc_file_range(struct inode *inode, int mode,$/;"	f	file:
__btrfs_qgroup_release_data	qgroup.c	/^static int __btrfs_qgroup_release_data(struct inode *inode,$/;"	f	file:
__btrfs_queue_work	async-thread.c	/^static inline void __btrfs_queue_work(struct __btrfs_workqueue *wq,$/;"	f	file:
__btrfs_release_delayed_node	delayed-inode.c	/^static void __btrfs_release_delayed_node($/;"	f	file:
__btrfs_releasepage	inode.c	/^static int __btrfs_releasepage(struct page *page, gfp_t gfp_flags)$/;"	f	file:
__btrfs_remove_delayed_item	delayed-inode.c	/^static void __btrfs_remove_delayed_item(struct btrfs_delayed_item *delayed_item)$/;"	f	file:
__btrfs_remove_free_space_cache	free-space-cache.c	/^void __btrfs_remove_free_space_cache(struct btrfs_free_space_ctl *ctl)$/;"	f
__btrfs_remove_free_space_cache_locked	free-space-cache.c	/^static void __btrfs_remove_free_space_cache_locked($/;"	f	file:
__btrfs_reset_dev_stats	volumes.c	/^static void __btrfs_reset_dev_stats(struct btrfs_device *dev)$/;"	f	file:
__btrfs_return_cluster_to_free_space	free-space-cache.c	/^__btrfs_return_cluster_to_free_space($/;"	f	file:
__btrfs_run_defrag_inode	file.c	/^static int __btrfs_run_defrag_inode(struct btrfs_fs_info *fs_info,$/;"	f	file:
__btrfs_run_delayed_items	delayed-inode.c	/^static int __btrfs_run_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_run_delayed_refs	extent-tree.c	/^static noinline int __btrfs_run_delayed_refs(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_set_acl	acl.c	/^static int __btrfs_set_acl(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_set_fs_compat_ro	ctree.h	/^static inline void __btrfs_set_fs_compat_ro(struct btrfs_fs_info *fs_info,$/;"	f
__btrfs_set_fs_incompat	ctree.h	/^static inline void __btrfs_set_fs_incompat(struct btrfs_fs_info *fs_info,$/;"	f
__btrfs_set_prop	props.c	/^static int __btrfs_set_prop(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_setxattr	xattr.c	/^int __btrfs_setxattr(struct btrfs_trans_handle *trans,$/;"	f
__btrfs_subio_endio_read	inode.c	/^static blk_status_t __btrfs_subio_endio_read(struct inode *inode,$/;"	f	file:
__btrfs_submit_bio_done	inode.c	/^static blk_status_t __btrfs_submit_bio_done(void *private_data, struct bio *bio,$/;"	f	file:
__btrfs_submit_bio_start	inode.c	/^static blk_status_t __btrfs_submit_bio_start(void *private_data, struct bio *bio,$/;"	f	file:
__btrfs_submit_bio_start_direct_io	inode.c	/^static blk_status_t __btrfs_submit_bio_start_direct_io(void *private_data,$/;"	f	file:
__btrfs_submit_dio_bio	inode.c	/^__btrfs_submit_dio_bio(struct bio *bio, struct inode *inode, u64 file_offset,$/;"	f	file:
__btrfs_sysfs_remove_fsid	sysfs.c	/^static void __btrfs_sysfs_remove_fsid(struct btrfs_fs_devices *fs_devs)$/;"	f	file:
__btrfs_unlink_inode	inode.c	/^static int __btrfs_unlink_inode(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_update_delayed_inode	delayed-inode.c	/^static int __btrfs_update_delayed_inode(struct btrfs_trans_handle *trans,$/;"	f	file:
__btrfs_wait_cache_io	free-space-cache.c	/^static int __btrfs_wait_cache_io(struct btrfs_root *root,$/;"	f	file:
__btrfs_wait_marked_extents	transaction.c	/^static int __btrfs_wait_marked_extents(struct btrfs_fs_info *fs_info,$/;"	f	file:
__btrfs_workqueue	async-thread.c	/^struct __btrfs_workqueue {$/;"	s	file:
__btrfs_write_out_cache	free-space-cache.c	/^static int __btrfs_write_out_cache(struct btrfs_root *root, struct inode *inode,$/;"	f	file:
__btrfsic_submit_bio	check-integrity.c	/^static void __btrfsic_submit_bio(struct bio *bio)$/;"	f	file:
__cancel_balance	volumes.c	/^static void __cancel_balance(struct btrfs_fs_info *fs_info)$/;"	f	file:
__check_free_space_extents	tests/free-space-tree-tests.c	/^static int __check_free_space_extents(struct btrfs_trans_handle *trans,$/;"	f	file:
__clear_extent_bit	extent_io.c	/^static int __clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	file:
__clone_root_cmp_bsearch	send.c	/^static int __clone_root_cmp_bsearch(const void *key, const void *elt)$/;"	f	file:
__clone_root_cmp_sort	send.c	/^static int __clone_root_cmp_sort(const void *e1, const void *e2)$/;"	f	file:
__compare_inode_defrag	file.c	/^static int __compare_inode_defrag(struct inode_defrag *defrag1,$/;"	f	file:
__copy_first_ref	send.c	/^static int __copy_first_ref(int num, u64 dir, int index,$/;"	f	file:
__create_free_space_inode	free-space-cache.c	/^static int __create_free_space_inode(struct btrfs_root *root,$/;"	f	file:
__del_qgroup_rb	qgroup.c	/^static void __del_qgroup_rb(struct btrfs_qgroup *qgroup)$/;"	f	file:
__del_qgroup_relation	qgroup.c	/^static int __del_qgroup_relation(struct btrfs_trans_handle *trans,$/;"	f	file:
__del_reloc_root	relocation.c	/^static void __del_reloc_root(struct btrfs_root *root)$/;"	f	file:
__do_contiguous_readpages	extent_io.c	/^static inline void __do_contiguous_readpages(struct extent_io_tree *tree,$/;"	f	file:
__do_readpage	extent_io.c	/^static int __do_readpage(struct extent_io_tree *tree,$/;"	f	file:
__endio_write_update_ordered	inode.c	/^static void __endio_write_update_ordered(struct inode *inode,$/;"	f	file:
__etree_search	extent_io.c	/^static struct rb_node *__etree_search(struct extent_io_tree *tree, u64 offset,$/;"	f	file:
__exclude_logged_extent	extent-tree.c	/^static int __exclude_logged_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
__extent_read_full_page	extent_io.c	/^static int __extent_read_full_page(struct extent_io_tree *tree,$/;"	f	file:
__extent_readpages	extent_io.c	/^static void __extent_readpages(struct extent_io_tree *tree,$/;"	f	file:
__extent_writepage	extent_io.c	/^static int __extent_writepage(struct page *page, struct writeback_control *wbc,$/;"	f	file:
__extent_writepage_io	extent_io.c	/^static noinline_for_stack int __extent_writepage_io(struct inode *inode,$/;"	f	file:
__find_iref	send.c	/^static int __find_iref(int num, u64 dir, int index,$/;"	f	file:
__find_space_info	extent-tree.c	/^static struct btrfs_space_info *__find_space_info(struct btrfs_fs_info *info,$/;"	f	file:
__find_xattr	send.c	/^static int __find_xattr(int num, struct btrfs_key *di_key,$/;"	f	file:
__free_device	volumes.c	/^static void __free_device(struct work_struct *work)$/;"	f	file:
__free_extent_buffer	extent_io.c	/^static void __free_extent_buffer(struct extent_buffer *eb)$/;"	f	file:
__free_raid_bio	raid56.c	/^static void __free_raid_bio(struct btrfs_raid_bio *rbio)$/;"	f	file:
__free_recorded_refs	send.c	/^static void __free_recorded_refs(struct list_head *head)$/;"	f	file:
__get_cur_name_and_parent	send.c	/^static int __get_cur_name_and_parent(struct send_ctx *sctx,$/;"	f	file:
__get_extent_map	extent_io.c	/^__get_extent_map(struct inode *inode, struct page *page, size_t pg_offset,$/;"	f	file:
__get_inode_info	send.c	/^static int __get_inode_info(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	file:
__get_raid_index	extent-tree.c	/^int __get_raid_index(u64 flags)$/;"	f
__insert_orphan_inode	relocation.c	/^static int __insert_orphan_inode(struct btrfs_trans_handle *trans,$/;"	f	file:
__iterate_backrefs	send.c	/^static int __iterate_backrefs(u64 ino, u64 offset, u64 root, void *ctx_)$/;"	f	file:
__le8	ctree.h	1459;"	d
__link_block_group	extent-tree.c	/^static void __link_block_group(struct btrfs_space_info *space_info,$/;"	f	file:
__load_free_space_cache	free-space-cache.c	/^static int __load_free_space_cache(struct btrfs_root *root, struct inode *inode,$/;"	f	file:
__lookup_extent_mapping	extent_map.c	/^__lookup_extent_mapping(struct extent_map_tree *tree,$/;"	f	file:
__lookup_free_space_inode	free-space-cache.c	/^static struct inode *__lookup_free_space_inode(struct btrfs_root *root,$/;"	f	file:
__mark_block_processed	relocation.c	/^static void __mark_block_processed(struct reloc_control *rc,$/;"	f	file:
__need_auto_defrag	file.c	/^static inline int __need_auto_defrag(struct btrfs_fs_info *fs_info)$/;"	f	file:
__process_changed_deleted_xattr	send.c	/^static int __process_changed_deleted_xattr(int num, struct btrfs_key *di_key,$/;"	f	file:
__process_changed_new_xattr	send.c	/^static int __process_changed_new_xattr(int num, struct btrfs_key *di_key,$/;"	f	file:
__process_deleted_xattr	send.c	/^static int __process_deleted_xattr(int num, struct btrfs_key *di_key,$/;"	f	file:
__process_new_xattr	send.c	/^static int __process_new_xattr(int num, struct btrfs_key *di_key,$/;"	f	file:
__process_pages_contig	extent_io.c	/^static int __process_pages_contig(struct address_space *mapping,$/;"	f	file:
__push_leaf_left	ctree.c	/^static noinline int __push_leaf_left(struct btrfs_fs_info *fs_info,$/;"	f	file:
__push_leaf_right	ctree.c	/^static noinline int __push_leaf_right(struct btrfs_fs_info *fs_info,$/;"	f	file:
__qgroup_excl_accounting	qgroup.c	/^static int __qgroup_excl_accounting(struct btrfs_fs_info *fs_info,$/;"	f	file:
__raid56_parity_recover	raid56.c	/^static int __raid56_parity_recover(struct btrfs_raid_bio *rbio)$/;"	f	file:
__raid56_parity_write	raid56.c	/^static int __raid56_parity_write(struct btrfs_raid_bio *rbio)$/;"	f	file:
__raid_recover_end_io	raid56.c	/^static void __raid_recover_end_io(struct btrfs_raid_bio *rbio)$/;"	f	file:
__rbio_is_full	raid56.c	/^static int __rbio_is_full(struct btrfs_raid_bio *rbio)$/;"	f	file:
__reada_start_machine	reada.c	/^static void __reada_start_machine(struct btrfs_fs_info *fs_info)$/;"	f	file:
__readahead_hook	reada.c	/^static void __readahead_hook(struct btrfs_fs_info *fs_info,$/;"	f	file:
__readpage_endio_check	inode.c	/^static int __readpage_endio_check(struct inode *inode,$/;"	f	file:
__record_changed_deleted_ref	send.c	/^static int __record_changed_deleted_ref(int num, u64 dir, int index,$/;"	f	file:
__record_changed_new_ref	send.c	/^static int __record_changed_new_ref(int num, u64 dir, int index,$/;"	f	file:
__record_deleted_ref	send.c	/^static int __record_deleted_ref(int num, u64 dir, int index,$/;"	f	file:
__record_new_ref	send.c	/^static int __record_new_ref(int num, u64 dir, int index,$/;"	f	file:
__record_ref	send.c	/^static int __record_ref(struct list_head *head, u64 dir,$/;"	f	file:
__remove_from_free_space_tree	free-space-tree.c	/^int __remove_from_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f
__remove_rbio_from_cache	raid56.c	/^static void __remove_rbio_from_cache(struct btrfs_raid_bio *rbio)$/;"	f	file:
__reserve_metadata_bytes	extent-tree.c	/^static int __reserve_metadata_bytes(struct btrfs_fs_info *fs_info,$/;"	f	file:
__run_delayed_extent_op	extent-tree.c	/^static void __run_delayed_extent_op(struct btrfs_delayed_extent_op *extent_op,$/;"	f	file:
__scrub_blocked_if_needed	scrub.c	/^static void __scrub_blocked_if_needed(struct btrfs_fs_info *fs_info)$/;"	f	file:
__scrub_mark_bitmap	scrub.c	/^static inline void __scrub_mark_bitmap(struct scrub_parity *sparity,$/;"	f	file:
__set_extent_bit	extent_io.c	/^__set_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	file:
__setup_root	disk-io.c	/^static void __setup_root(struct btrfs_root *root, struct btrfs_fs_info *fs_info,$/;"	f	file:
__start_delalloc_inodes	inode.c	/^static int __start_delalloc_inodes(struct btrfs_root *root, int delay_iput,$/;"	f	file:
__test_eb_bitmaps	tests/extent-io-tests.c	/^static int __test_eb_bitmaps(unsigned long *bitmap, struct extent_buffer *eb,$/;"	f	file:
__this_module	btrfs.mod.c	/^__visible struct module __this_module$/;"	v	typeref:struct:module
__tree_mod_log_free_eb	ctree.c	/^__tree_mod_log_free_eb(struct btrfs_fs_info *fs_info,$/;"	f	file:
__tree_mod_log_insert	ctree.c	/^__tree_mod_log_insert(struct btrfs_fs_info *fs_info, struct tree_mod_elem *tm)$/;"	f	file:
__tree_mod_log_oldest_root	ctree.c	/^__tree_mod_log_oldest_root(struct btrfs_fs_info *fs_info,$/;"	f	file:
__tree_mod_log_rewind	ctree.c	/^__tree_mod_log_rewind(struct btrfs_fs_info *fs_info, struct extent_buffer *eb,$/;"	f	file:
__tree_mod_log_search	ctree.c	/^__tree_mod_log_search(struct btrfs_fs_info *fs_info, u64 start, u64 min_seq,$/;"	f	file:
__tree_search	extent_map.c	/^static struct rb_node *__tree_search(struct rb_root *root, u64 offset,$/;"	f	file:
__tree_search	ordered-data.c	/^static struct rb_node *__tree_search(struct rb_root *root, u64 file_offset,$/;"	f	file:
__unlink_free_space	free-space-cache.c	/^__unlink_free_space(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
__unlink_start_trans	inode.c	/^static struct btrfs_trans_handle *__unlink_start_trans(struct inode *dir)$/;"	f	file:
__unlock_for_delalloc	extent_io.c	/^static noinline void __unlock_for_delalloc(struct inode *inode,$/;"	f	file:
__unused_leafsize	ctree.h	/^	__le32 __unused_leafsize;$/;"	m	struct:btrfs_super_block
__update_reloc_root	relocation.c	/^static int __update_reloc_root(struct btrfs_root *root, u64 new_bytenr)$/;"	f	file:
__used	btrfs.mod.c	/^__used$/;"	v	file:
__used	btrfs.mod.c	/^__used$/;"	v	typeref:struct:____versions	file:
_btrfs_ioctl_set_received_subvol	ioctl.c	/^static long _btrfs_ioctl_set_received_subvol(struct file *file,$/;"	f	file:
aborted	transaction.h	/^	int aborted;$/;"	m	struct:btrfs_transaction
aborted	transaction.h	/^	short aborted;$/;"	m	struct:btrfs_trans_handle
accounting_lock	ctree.h	/^	spinlock_t accounting_lock;$/;"	m	struct:btrfs_root
acls_after_inode_item	inode.c	/^static noinline int acls_after_inode_item(struct extent_buffer *leaf,$/;"	f	file:
action	delayed-ref.h	/^	unsigned int action:8;$/;"	m	struct:btrfs_delayed_ref_node
add_all_parents	backref.c	/^static int add_all_parents(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	file:
add_async_extent	inode.c	/^static noinline int add_async_extent(struct async_cow *cow,$/;"	f	file:
add_block_group_free_space	free-space-tree.c	/^int add_block_group_free_space(struct btrfs_trans_handle *trans,$/;"	f
add_bytes_to_bitmap	free-space-cache.c	/^static u64 add_bytes_to_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
add_data_references	relocation.c	/^int add_data_references(struct reloc_control *rc,$/;"	f	file:
add_delayed_data_ref	delayed-ref.c	/^add_delayed_data_ref(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_delayed_ref_head	delayed-ref.c	/^add_delayed_ref_head(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_delayed_ref_tail_merge	delayed-ref.c	/^add_delayed_ref_tail_merge(struct btrfs_trans_handle *trans,$/;"	f	file:
add_delayed_refs	backref.c	/^static int add_delayed_refs(const struct btrfs_fs_info *fs_info,$/;"	f	file:
add_delayed_tree_ref	delayed-ref.c	/^add_delayed_tree_ref(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_direct_ref	backref.c	/^static int add_direct_ref(const struct btrfs_fs_info *fs_info,$/;"	f	file:
add_excluded_extent	extent-tree.c	/^static int add_excluded_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_extent_changeset	extent_io.c	/^static void add_extent_changeset(struct extent_state *state, unsigned bits,$/;"	f	file:
add_extent_mapping	extent_map.c	/^int add_extent_mapping(struct extent_map_tree *tree,$/;"	f
add_falloc_range	file.c	/^static int add_falloc_range(struct list_head *head, u64 start, u64 len)$/;"	f	file:
add_free_space_extent	free-space-tree.c	/^static int add_free_space_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
add_indirect_ref	backref.c	/^static int add_indirect_ref(const struct btrfs_fs_info *fs_info,$/;"	f	file:
add_inline_refs	backref.c	/^static int add_inline_refs(const struct btrfs_fs_info *fs_info,$/;"	f	file:
add_inode_ref	tree-log.c	/^static noinline int add_inode_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
add_keyed_refs	backref.c	/^static int add_keyed_refs(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_list	delayed-ref.h	/^	struct list_head add_list;$/;"	m	struct:btrfs_delayed_ref_node	typeref:struct:btrfs_delayed_ref_node::list_head
add_missing_dev	volumes.c	/^static struct btrfs_device *add_missing_dev(struct btrfs_fs_devices *fs_devices,$/;"	f	file:
add_missing_keys	backref.c	/^static int add_missing_keys(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_new_bitmap	free-space-cache.c	/^static void add_new_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
add_new_free_space	extent-tree.c	/^u64 add_new_free_space(struct btrfs_block_group_cache *block_group,$/;"	f
add_new_free_space_info	free-space-tree.c	/^static int add_new_free_space_info(struct btrfs_trans_handle *trans,$/;"	f	file:
add_orphan_dir_info	send.c	/^add_orphan_dir_info(struct send_ctx *sctx, u64 dir_ino)$/;"	f	file:
add_pending_csums	inode.c	/^static noinline int add_pending_csums(struct btrfs_trans_handle *trans,$/;"	f	file:
add_pending_dir_move	send.c	/^static int add_pending_dir_move(struct send_ctx *sctx,$/;"	f	file:
add_pinned_bytes	extent-tree.c	/^static void add_pinned_bytes(struct btrfs_fs_info *fs_info, s64 num_bytes,$/;"	f	file:
add_prelim_ref	backref.c	/^static int add_prelim_ref(const struct btrfs_fs_info *fs_info,$/;"	f	file:
add_qgroup_item	qgroup.c	/^static int add_qgroup_item(struct btrfs_trans_handle *trans,$/;"	f	file:
add_qgroup_rb	qgroup.c	/^static struct btrfs_qgroup *add_qgroup_rb(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_qgroup_relation_item	qgroup.c	/^static int add_qgroup_relation_item(struct btrfs_trans_handle *trans,$/;"	f	file:
add_ra_bio_pages	compression.c	/^static noinline int add_ra_bio_pages(struct inode *inode,$/;"	f	file:
add_relation_rb	qgroup.c	/^static int add_relation_rb(struct btrfs_fs_info *fs_info,$/;"	f	file:
add_root_to_dirty_list	ctree.c	/^static void add_root_to_dirty_list(struct btrfs_root *root)$/;"	f	file:
add_to_free_space_tree	free-space-tree.c	/^int add_to_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f
add_tree_block	relocation.c	/^static int add_tree_block(struct reloc_control *rc,$/;"	f	file:
add_tree_ref	tests/qgroup-tests.c	/^static int add_tree_ref(struct btrfs_root *root, u64 bytenr, u64 num_bytes,$/;"	f	file:
add_waiting_dir_move	send.c	/^static int add_waiting_dir_move(struct send_ctx *sctx, u64 ino, bool orphanized)$/;"	f	file:
adding_csums	transaction.h	/^	short adding_csums;$/;"	m	struct:btrfs_trans_handle
addrm_unknown_feature_attrs	sysfs.c	/^static int addrm_unknown_feature_attrs(struct btrfs_fs_info *fs_info, bool add)$/;"	f	file:
adjust_dio_outstanding_extents	inode.c	/^static void adjust_dio_outstanding_extents(struct inode *inode,$/;"	f	file:
adjust_slots_upwards	qgroup.c	/^static int adjust_slots_upwards(struct btrfs_path *path, int root_level)$/;"	f	file:
all_blocks_list	check-integrity.c	/^	struct list_head all_blocks_list;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_state::list_head	file:
all_blocks_node	check-integrity.c	/^	struct list_head all_blocks_node;	\/* list node *\/$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block::list_head	file:
alloc_backref_edge	relocation.c	/^static struct backref_edge *alloc_backref_edge(struct backref_cache *cache)$/;"	f	file:
alloc_backref_node	relocation.c	/^static struct backref_node *alloc_backref_node(struct backref_cache *cache)$/;"	f	file:
alloc_bitmap	free-space-tree.c	/^static u8 *alloc_bitmap(u32 bitmap_size)$/;"	f	file:
alloc_btrfs_bio	volumes.c	/^static struct btrfs_bio *alloc_btrfs_bio(int total_stripes, int real_stripes)$/;"	f	file:
alloc_bytenr	ctree.h	/^	u64 alloc_bytenr;$/;"	m	struct:btrfs_root
alloc_dummy_extent_buffer	extent_io.c	/^struct extent_buffer *alloc_dummy_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f
alloc_extent_buffer	extent_io.c	/^struct extent_buffer *alloc_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f
alloc_extent_map	extent_map.c	/^struct extent_map *alloc_extent_map(void)$/;"	f
alloc_extent_state	extent_io.c	/^static struct extent_state *alloc_extent_state(gfp_t mask)$/;"	f	file:
alloc_extent_state_atomic	extent_io.c	/^alloc_extent_state_atomic(struct extent_state *prealloc)$/;"	f	file:
alloc_fs_devices	volumes.c	/^static struct btrfs_fs_devices *alloc_fs_devices(const u8 *fsid)$/;"	f	file:
alloc_list	volumes.h	/^	struct list_head alloc_list;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::list_head
alloc_log_tree	disk-io.c	/^static struct btrfs_root *alloc_log_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
alloc_name	extent-tree.c	/^static const char *alloc_name(u64 flags)$/;"	f	file:
alloc_path_for_send	send.c	/^static struct btrfs_path *alloc_path_for_send(void)$/;"	f	file:
alloc_profile_is_valid	volumes.c	/^static int alloc_profile_is_valid(u64 flags, int extended)$/;"	f	file:
alloc_rbio	raid56.c	/^static struct btrfs_raid_bio *alloc_rbio(struct btrfs_fs_info *fs_info,$/;"	f	file:
alloc_rbio_essential_pages	raid56.c	/^static int alloc_rbio_essential_pages(struct btrfs_raid_bio *rbio)$/;"	f	file:
alloc_rbio_pages	raid56.c	/^static int alloc_rbio_pages(struct btrfs_raid_bio *rbio)$/;"	f	file:
alloc_rbio_parity_pages	raid56.c	/^static int alloc_rbio_parity_pages(struct btrfs_raid_bio *rbio)$/;"	f	file:
alloc_reloc_control	relocation.c	/^static struct reloc_control *alloc_reloc_control(struct btrfs_fs_info *fs_info)$/;"	f	file:
alloc_reserved_file_extent	extent-tree.c	/^static int alloc_reserved_file_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
alloc_reserved_tree_block	extent-tree.c	/^static int alloc_reserved_tree_block(struct btrfs_trans_handle *trans,$/;"	f	file:
alloc_test_extent_buffer	extent_io.c	/^struct extent_buffer *alloc_test_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f
alloc_tree_mod_elem	ctree.c	/^alloc_tree_mod_elem(struct extent_buffer *eb, int slot,$/;"	f	file:
alloc_workspace	compression.h	/^	struct list_head *(*alloc_workspace)(void);$/;"	m	struct:btrfs_compress_op	typeref:struct:btrfs_compress_op::alloc_workspace
allocating_chunk	transaction.h	/^	bool allocating_chunk;$/;"	m	struct:btrfs_trans_handle
allocation_attrs	sysfs.c	/^static const struct attribute *allocation_attrs[] = {$/;"	v	typeref:struct:attribute	file:
anon_dev	ctree.h	/^	dev_t anon_dev;$/;"	m	struct:btrfs_root
apply	props.c	/^	int (*apply)(struct inode *inode, const char *value, size_t len);$/;"	m	struct:prop_handler	file:
apply_children_dir_moves	send.c	/^static int apply_children_dir_moves(struct send_ctx *sctx)$/;"	f	file:
apply_dir_move	send.c	/^static int apply_dir_move(struct send_ctx *sctx, struct pending_dir_move *pm)$/;"	f	file:
areas_overlap	extent_io.c	/^static inline bool areas_overlap(unsigned long src, unsigned long dst, unsigned long len)$/;"	f	file:
assfail	ctree.h	/^static inline void assfail(char *expr, char *file, int line)$/;"	f
async_cow	inode.c	/^struct async_cow {$/;"	s	file:
async_cow_free	inode.c	/^static noinline void async_cow_free(struct btrfs_work *work)$/;"	f	file:
async_cow_start	inode.c	/^static noinline void async_cow_start(struct btrfs_work *work)$/;"	f	file:
async_cow_submit	inode.c	/^static noinline void async_cow_submit(struct btrfs_work *work)$/;"	f	file:
async_delalloc_pages	ctree.h	/^	atomic_t async_delalloc_pages;$/;"	m	struct:btrfs_fs_info
async_delayed_refs	extent-tree.c	/^struct async_delayed_refs {$/;"	s	file:
async_extent	inode.c	/^struct async_extent {$/;"	s	file:
async_missing_raid56	raid56.c	/^static void async_missing_raid56(struct btrfs_raid_bio *rbio)$/;"	f	file:
async_read_rebuild	raid56.c	/^static void async_read_rebuild(struct btrfs_raid_bio *rbio)$/;"	f	file:
async_reclaim_work	ctree.h	/^	struct work_struct async_reclaim_work;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::work_struct
async_rmw_stripe	raid56.c	/^static void async_rmw_stripe(struct btrfs_raid_bio *rbio)$/;"	f	file:
async_scrub_parity	raid56.c	/^static void async_scrub_parity(struct btrfs_raid_bio *rbio)$/;"	f	file:
async_submit_bio	disk-io.c	/^struct async_submit_bio {$/;"	s	file:
async_submit_draining	ctree.h	/^	atomic_t async_submit_draining;$/;"	m	struct:btrfs_fs_info
async_submit_wait	ctree.h	/^	wait_queue_head_t async_submit_wait;$/;"	m	struct:btrfs_fs_info
attach_extent_buffer_page	extent_io.c	/^static void attach_extent_buffer_page(struct extent_buffer *eb,$/;"	f	file:
attr_to_btrfs_attr	sysfs.h	/^static inline struct kobj_attribute *attr_to_btrfs_attr(struct attribute *attr)$/;"	f
attr_to_btrfs_feature_attr	sysfs.h	/^attr_to_btrfs_feature_attr(struct attribute *attr)$/;"	f
aux	ulist.h	/^	u64 aux;		\/* auxiliary value saved along with the val *\/$/;"	m	struct:ulist_node
avail_data_alloc_bits	ctree.h	/^	u64 avail_data_alloc_bits;$/;"	m	struct:btrfs_fs_info
avail_metadata_alloc_bits	ctree.h	/^	u64 avail_metadata_alloc_bits;$/;"	m	struct:btrfs_fs_info
avail_system_alloc_bits	ctree.h	/^	u64 avail_system_alloc_bits;$/;"	m	struct:btrfs_fs_info
avg_delayed_ref_runtime	ctree.h	/^	u64 avg_delayed_ref_runtime;$/;"	m	struct:btrfs_fs_info
backref_cache	relocation.c	/^	struct backref_cache backref_cache;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::backref_cache	file:
backref_cache	relocation.c	/^struct backref_cache {$/;"	s	file:
backref_cache_cleanup	relocation.c	/^static void backref_cache_cleanup(struct backref_cache *cache)$/;"	f	file:
backref_cache_init	relocation.c	/^static void backref_cache_init(struct backref_cache *cache)$/;"	f	file:
backref_comp	inode.c	/^static int backref_comp(struct sa_defrag_extent_backref *b1,$/;"	f	file:
backref_ctx	send.c	/^struct backref_ctx {$/;"	s	file:
backref_edge	relocation.c	/^struct backref_edge {$/;"	s	file:
backref_in_log	tree-log.c	/^static noinline int backref_in_log(struct btrfs_root *log,$/;"	f	file:
backref_insert	inode.c	/^static void backref_insert(struct rb_root *root,$/;"	f	file:
backref_node	relocation.c	/^struct backref_node {$/;"	s	file:
backref_tree_panic	relocation.c	/^static void backref_tree_panic(struct rb_node *rb_node, int errno, u64 bytenr)$/;"	f	file:
backup_root_index	ctree.h	/^	int backup_root_index;$/;"	m	struct:btrfs_fs_info
backup_super_roots	disk-io.c	/^static void backup_super_roots(struct btrfs_fs_info *info)$/;"	f	file:
balance_cancel_req	ctree.h	/^	atomic_t balance_cancel_req;$/;"	m	struct:btrfs_fs_info
balance_ctl	ctree.h	/^	struct btrfs_balance_control *balance_ctl;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_balance_control
balance_kthread	volumes.c	/^static int balance_kthread(void *data)$/;"	f	file:
balance_level	ctree.c	/^static noinline int balance_level(struct btrfs_trans_handle *trans,$/;"	f	file:
balance_lock	ctree.h	/^	spinlock_t balance_lock;$/;"	m	struct:btrfs_fs_info
balance_mutex	ctree.h	/^	struct mutex balance_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
balance_need_close	volumes.c	/^static inline int balance_need_close(struct btrfs_fs_info *fs_info)$/;"	f	file:
balance_node_right	ctree.c	/^static int balance_node_right(struct btrfs_trans_handle *trans,$/;"	f	file:
balance_pause_req	ctree.h	/^	atomic_t balance_pause_req;$/;"	m	struct:btrfs_fs_info
balance_running	ctree.h	/^	atomic_t balance_running;$/;"	m	struct:btrfs_fs_info
balance_wait_q	ctree.h	/^	wait_queue_head_t balance_wait_q;$/;"	m	struct:btrfs_fs_info
barrier_all_devices	disk-io.c	/^static int barrier_all_devices(struct btrfs_fs_info *info)$/;"	f	file:
bbio	raid56.c	/^	struct btrfs_bio *bbio;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::btrfs_bio	file:
bbio	scrub.c	/^	struct btrfs_bio	*bbio;$/;"	m	struct:scrub_recover	typeref:struct:scrub_recover::btrfs_bio	file:
bbio_error	volumes.c	/^static void bbio_error(struct btrfs_bio *bbio, struct bio *bio, u64 logical)$/;"	f	file:
bdev	check-integrity.c	/^	struct block_device *bdev;$/;"	m	struct:btrfsic_dev_state	typeref:struct:btrfsic_dev_state::block_device	file:
bdev	extent_map.h	/^		struct block_device *bdev;$/;"	m	union:extent_map::__anon10	typeref:struct:extent_map::__anon10::block_device
bdev	volumes.h	/^	struct block_device *bdev;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::block_device
bdev_holder	ctree.h	/^	void *bdev_holder;$/;"	m	struct:btrfs_fs_info
begin_cmd	send.c	/^static int begin_cmd(struct send_ctx *sctx, int cmd)$/;"	f	file:
bflags	extent_io.h	/^	unsigned long bflags;$/;"	m	struct:extent_buffer
bg_list	ctree.h	/^	struct list_head bg_list;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::list_head
bh	check-integrity.c	/^		bh_end_io_t *bh;$/;"	m	union:btrfsic_block::__anon5	file:
bin_search	ctree.c	/^static int bin_search(struct extent_buffer *eb, const struct btrfs_key *key,$/;"	f	file:
bio	check-integrity.c	/^		bio_end_io_t *bio;$/;"	m	union:btrfsic_block::__anon5	file:
bio	disk-io.c	/^	struct bio *bio;$/;"	m	struct:async_submit_bio	typeref:struct:async_submit_bio::bio	file:
bio	disk-io.c	/^	struct bio *bio;$/;"	m	struct:btrfs_end_io_wq	typeref:struct:btrfs_end_io_wq::bio	file:
bio	extent_io.c	/^	struct bio *bio;$/;"	m	struct:extent_page_data	typeref:struct:extent_page_data::bio	file:
bio	scrub.c	/^	struct bio		*bio;$/;"	m	struct:scrub_bio	typeref:struct:scrub_bio::bio	file:
bio	volumes.h	/^	struct bio bio;$/;"	m	struct:btrfs_io_bio	typeref:struct:btrfs_io_bio::bio
bio_counter	ctree.h	/^	struct percpu_counter bio_counter;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::percpu_counter
bio_end_offset	compression.c	/^static u64 bio_end_offset(struct bio *bio)$/;"	f	file:
bio_flags	disk-io.c	/^	unsigned long bio_flags;$/;"	m	struct:async_submit_bio	file:
bio_flags	extent_io.c	/^	unsigned long bio_flags;$/;"	m	struct:extent_page_data	file:
bio_flags	extent_io.h	/^	unsigned long bio_flags;$/;"	m	struct:io_failure_record
bio_list	raid56.c	/^	struct bio_list bio_list;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::bio_list	file:
bio_list_bytes	raid56.c	/^	int bio_list_bytes;$/;"	m	struct:btrfs_raid_bio	file:
bio_list_lock	raid56.c	/^	spinlock_t bio_list_lock;$/;"	m	struct:btrfs_raid_bio	file:
bio_offset	disk-io.c	/^	u64 bio_offset;$/;"	m	struct:async_submit_bio	file:
bio_pages	raid56.c	/^	struct page **bio_pages;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::page	file:
bio_readpage_error	extent_io.c	/^static int bio_readpage_error(struct bio *failed_bio, u64 phy_offset,$/;"	f	file:
bios	scrub.c	/^	struct scrub_bio	*bios[SCRUB_BIOS_PER_SCTX];$/;"	m	struct:scrub_ctx	typeref:struct:scrub_ctx::scrub_bio	file:
bios_in_flight	scrub.c	/^	atomic_t		bios_in_flight;$/;"	m	struct:scrub_ctx	file:
bitmap	free-space-cache.h	/^	unsigned long *bitmap;$/;"	m	struct:btrfs_free_space
bitmap	scrub.c	/^	unsigned long		bitmap[0];$/;"	m	struct:scrub_parity	file:
bitmap_clear_bits	free-space-cache.c	/^static void bitmap_clear_bits(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
bitmap_high_thresh	ctree.h	/^	u32 bitmap_high_thresh;$/;"	m	struct:btrfs_block_group_cache
bitmap_low_thresh	ctree.h	/^	u32 bitmap_low_thresh;$/;"	m	struct:btrfs_block_group_cache
bitmap_set_bits	free-space-cache.c	/^static void bitmap_set_bits(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
bitmaps	ctree.h	/^	int bitmaps;$/;"	m	struct:btrfs_io_ctl
block	check-integrity.c	/^	struct btrfsic_block *block;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_stack_frame::btrfsic_block	file:
block_ctx	check-integrity.c	/^	struct btrfsic_block_data_ctx *block_ctx;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_stack_frame::btrfsic_block_data_ctx	file:
block_group	ctree.h	/^	struct btrfs_block_group_cache *block_group;$/;"	m	struct:btrfs_caching_control	typeref:struct:btrfs_caching_control::btrfs_block_group_cache
block_group	ctree.h	/^	struct btrfs_block_group_cache *block_group;$/;"	m	struct:btrfs_free_cluster	typeref:struct:btrfs_free_cluster::btrfs_block_group_cache
block_group	relocation.c	/^	struct btrfs_block_group_cache *block_group;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::btrfs_block_group_cache	file:
block_group_bits	extent-tree.c	/^static int block_group_bits(struct btrfs_block_group_cache *cache, u64 bits)$/;"	f	file:
block_group_cache_done	extent-tree.c	/^block_group_cache_done(struct btrfs_block_group_cache *cache)$/;"	f	file:
block_group_cache_lock	ctree.h	/^	spinlock_t block_group_cache_lock;$/;"	m	struct:btrfs_fs_info
block_group_cache_tree	ctree.h	/^	struct rb_root block_group_cache_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rb_root
block_group_cache_tree_search	extent-tree.c	/^block_group_cache_tree_search(struct btrfs_fs_info *info, u64 bytenr,$/;"	f	file:
block_group_kobjs	ctree.h	/^	struct kobject *block_group_kobjs[BTRFS_NR_RAID_TYPES];$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::kobject
block_group_list	ctree.h	/^	struct list_head block_group_list;$/;"	m	struct:btrfs_free_cluster	typeref:struct:btrfs_free_cluster::list_head
block_groups	ctree.h	/^	struct list_head block_groups[BTRFS_NR_RAID_TYPES];$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::list_head
block_hashtable	check-integrity.c	/^	struct btrfsic_block_hashtable block_hashtable;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_state::btrfsic_block_hashtable	file:
block_len	extent_map.h	/^	u64 block_len;$/;"	m	struct:extent_map
block_link_hashtable	check-integrity.c	/^	struct btrfsic_block_link_hashtable block_link_hashtable;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_state::btrfsic_block_link_hashtable	file:
block_ref_from	check-integrity.c	/^	struct btrfsic_block *block_ref_from;$/;"	m	struct:btrfsic_block_link	typeref:struct:btrfsic_block_link::btrfsic_block	file:
block_ref_to	check-integrity.c	/^	struct btrfsic_block *block_ref_to;$/;"	m	struct:btrfsic_block_link	typeref:struct:btrfsic_block_link::btrfsic_block	file:
block_rsv	ctree.h	/^	struct btrfs_block_rsv *block_rsv;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_block_rsv
block_rsv	relocation.c	/^	struct btrfs_block_rsv *block_rsv;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::btrfs_block_rsv	file:
block_rsv	transaction.h	/^	struct btrfs_block_rsv *block_rsv;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_trans_handle::btrfs_block_rsv
block_rsv	transaction.h	/^	struct btrfs_block_rsv block_rsv;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::btrfs_block_rsv
block_rsv_add_bytes	extent-tree.c	/^static void block_rsv_add_bytes(struct btrfs_block_rsv *block_rsv,$/;"	f	file:
block_rsv_release_bytes	extent-tree.c	/^static void block_rsv_release_bytes(struct btrfs_fs_info *fs_info,$/;"	f	file:
block_rsv_use_bytes	extent-tree.c	/^static int block_rsv_use_bytes(struct btrfs_block_rsv *block_rsv,$/;"	f	file:
block_start	extent_map.h	/^	u64 block_start;$/;"	m	struct:extent_map
block_use_full_backref	relocation.c	/^static int block_use_full_backref(struct reloc_control *rc,$/;"	f	file:
blocking_readers	ctree.h	/^	atomic_t blocking_readers;$/;"	m	struct:btrfs_dev_replace
blocking_readers	extent_io.h	/^	atomic_t blocking_readers;$/;"	m	struct:extent_buffer
blocking_writers	extent_io.h	/^	atomic_t blocking_writers;$/;"	m	struct:extent_buffer
blockptr	ctree.c	/^	u64 blockptr;$/;"	m	struct:tree_mod_elem	file:
blockptr	ctree.h	/^	__le64 blockptr;$/;"	m	struct:btrfs_key_ptr
blocks_reserved	transaction.h	/^	unsigned long blocks_reserved;$/;"	m	struct:btrfs_trans_handle
boundary	relocation.c	/^	u64 boundary[MAX_EXTENTS];$/;"	m	struct:file_extent_cluster	file:
btree_aops	disk-io.c	/^static const struct address_space_operations btree_aops = {$/;"	v	typeref:struct:address_space_operations	file:
btree_csum_one_bio	disk-io.c	/^static blk_status_t btree_csum_one_bio(struct bio *bio)$/;"	f	file:
btree_extent_io_ops	disk-io.c	/^static const struct extent_io_ops btree_extent_io_ops = {$/;"	v	typeref:struct:extent_io_ops	file:
btree_extent_io_ops	disk-io.c	/^static const struct extent_io_ops btree_extent_io_ops;$/;"	v	typeref:struct:extent_io_ops	file:
btree_fs_info	disk-io.c	/^static struct btrfs_fs_info *btree_fs_info(void *private_data)$/;"	f	file:
btree_get_extent	disk-io.c	/^static struct extent_map *btree_get_extent(struct btrfs_inode *inode,$/;"	f	file:
btree_inode	ctree.h	/^	struct inode *btree_inode;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::inode
btree_invalidatepage	disk-io.c	/^static void btree_invalidatepage(struct page *page, unsigned int offset,$/;"	f	file:
btree_io_failed_hook	disk-io.c	/^static int btree_io_failed_hook(struct page *page, int failed_mirror)$/;"	f	file:
btree_migratepage	disk-io.c	/^static int btree_migratepage(struct address_space *mapping,$/;"	f	file:
btree_read_extent_buffer_pages	disk-io.c	/^static int btree_read_extent_buffer_pages(struct btrfs_fs_info *fs_info,$/;"	f	file:
btree_readahead_hook	reada.c	/^int btree_readahead_hook(struct extent_buffer *eb, int err)$/;"	f
btree_readpage	disk-io.c	/^static int btree_readpage(struct file *file, struct page *page)$/;"	f	file:
btree_readpage_end_io_hook	disk-io.c	/^static int btree_readpage_end_io_hook(struct btrfs_io_bio *io_bio,$/;"	f	file:
btree_releasepage	disk-io.c	/^static int btree_releasepage(struct page *page, gfp_t gfp_flags)$/;"	f	file:
btree_set_page_dirty	disk-io.c	/^static int btree_set_page_dirty(struct page *page)$/;"	f	file:
btree_submit_bio_hook	disk-io.c	/^static blk_status_t btree_submit_bio_hook(void *private_data, struct bio *bio,$/;"	f	file:
btree_write_cache_pages	extent_io.c	/^int btree_write_cache_pages(struct address_space *mapping,$/;"	f
btree_writepages	disk-io.c	/^static int btree_writepages(struct address_space *mapping,$/;"	f	file:
btrfs_abort_transaction	ctree.h	3476;"	d
btrfs_account_dev_extents_size	volumes.c	/^int btrfs_account_dev_extents_size(struct btrfs_device *device, u64 start,$/;"	f
btrfs_account_ro_block_groups_free_space	extent-tree.c	/^u64 btrfs_account_ro_block_groups_free_space(struct btrfs_space_info *sinfo)$/;"	f
btrfs_add_block_group_cache	extent-tree.c	/^static int btrfs_add_block_group_cache(struct btrfs_fs_info *info,$/;"	f	file:
btrfs_add_dead_root	transaction.c	/^void btrfs_add_dead_root(struct btrfs_root *root)$/;"	f
btrfs_add_delalloc_inodes	inode.c	/^static void btrfs_add_delalloc_inodes(struct btrfs_root *root,$/;"	f	file:
btrfs_add_delayed_data_ref	delayed-ref.c	/^int btrfs_add_delayed_data_ref(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_add_delayed_extent_op	delayed-ref.c	/^int btrfs_add_delayed_extent_op(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_add_delayed_iput	inode.c	/^void btrfs_add_delayed_iput(struct inode *inode)$/;"	f
btrfs_add_delayed_tree_ref	delayed-ref.c	/^int btrfs_add_delayed_tree_ref(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_add_device	volumes.c	/^static int btrfs_add_device(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_add_dropped_root	transaction.c	/^void btrfs_add_dropped_root(struct btrfs_trans_handle *trans,$/;"	f
btrfs_add_free_space	free-space-cache.h	/^btrfs_add_free_space(struct btrfs_block_group_cache *block_group,$/;"	f
btrfs_add_inode_defrag	file.c	/^int btrfs_add_inode_defrag(struct btrfs_trans_handle *trans,$/;"	f
btrfs_add_link	inode.c	/^int btrfs_add_link(struct btrfs_trans_handle *trans,$/;"	f
btrfs_add_log_tree	disk-io.c	/^int btrfs_add_log_tree(struct btrfs_trans_handle *trans,$/;"	f
btrfs_add_nondir	inode.c	/^static int btrfs_add_nondir(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_add_ordered_extent	ordered-data.c	/^int btrfs_add_ordered_extent(struct inode *inode, u64 file_offset,$/;"	f
btrfs_add_ordered_extent_compress	ordered-data.c	/^int btrfs_add_ordered_extent_compress(struct inode *inode, u64 file_offset,$/;"	f
btrfs_add_ordered_extent_dio	ordered-data.c	/^int btrfs_add_ordered_extent_dio(struct inode *inode, u64 file_offset,$/;"	f
btrfs_add_ordered_sum	ordered-data.c	/^void btrfs_add_ordered_sum(struct inode *inode,$/;"	f
btrfs_add_qgroup_relation	qgroup.c	/^int btrfs_add_qgroup_relation(struct btrfs_trans_handle *trans,$/;"	f
btrfs_add_reserved_bytes	extent-tree.c	/^static int btrfs_add_reserved_bytes(struct btrfs_block_group_cache *cache,$/;"	f	file:
btrfs_add_root_ref	root-tree.c	/^int btrfs_add_root_ref(struct btrfs_trans_handle *trans,$/;"	f
btrfs_add_system_chunk	volumes.c	/^static int btrfs_add_system_chunk(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_after_dev_replace_commit	dev-replace.c	/^void btrfs_after_dev_replace_commit(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_alert	ctree.h	3307;"	d
btrfs_alert_in_rcu	ctree.h	3325;"	d
btrfs_alert_rl	ctree.h	3361;"	d
btrfs_alert_rl_in_rcu	ctree.h	3343;"	d
btrfs_alloc_block_rsv	extent-tree.c	/^struct btrfs_block_rsv *btrfs_alloc_block_rsv(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_alloc_chunk	volumes.c	/^int btrfs_alloc_chunk(struct btrfs_trans_handle *trans,$/;"	f
btrfs_alloc_data_chunk_ondemand	extent-tree.c	/^int btrfs_alloc_data_chunk_ondemand(struct btrfs_inode *inode, u64 bytes)$/;"	f
btrfs_alloc_delalloc_work	inode.c	/^struct btrfs_delalloc_work *btrfs_alloc_delalloc_work(struct inode *inode,$/;"	f
btrfs_alloc_delayed_extent_op	delayed-ref.h	/^btrfs_alloc_delayed_extent_op(void)$/;"	f
btrfs_alloc_delayed_item	delayed-inode.c	/^static struct btrfs_delayed_item *btrfs_alloc_delayed_item(u32 data_len)$/;"	f	file:
btrfs_alloc_dev_extent	volumes.c	/^static int btrfs_alloc_dev_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_alloc_device	volumes.c	/^struct btrfs_device *btrfs_alloc_device(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_alloc_dummy_block_group	tests/btrfs-tests.c	/^btrfs_alloc_dummy_block_group(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_alloc_dummy_fs_info	tests/btrfs-tests.c	/^struct btrfs_fs_info *btrfs_alloc_dummy_fs_info(u32 nodesize, u32 sectorsize)$/;"	f
btrfs_alloc_dummy_root	disk-io.c	/^struct btrfs_root *btrfs_alloc_dummy_root(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_alloc_from_bitmap	free-space-cache.c	/^static u64 btrfs_alloc_from_bitmap(struct btrfs_block_group_cache *block_group,$/;"	f	file:
btrfs_alloc_from_cluster	free-space-cache.c	/^u64 btrfs_alloc_from_cluster(struct btrfs_block_group_cache *block_group,$/;"	f
btrfs_alloc_inode	inode.c	/^struct inode *btrfs_alloc_inode(struct super_block *sb)$/;"	f
btrfs_alloc_logged_file_extent	extent-tree.c	/^int btrfs_alloc_logged_file_extent(struct btrfs_trans_handle *trans,$/;"	f
btrfs_alloc_path	ctree.c	/^struct btrfs_path *btrfs_alloc_path(void)$/;"	f
btrfs_alloc_reserved_file_extent	extent-tree.c	/^int btrfs_alloc_reserved_file_extent(struct btrfs_trans_handle *trans,$/;"	f
btrfs_alloc_root	disk-io.c	/^static struct btrfs_root *btrfs_alloc_root(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_alloc_stripe_hash_table	raid56.c	/^int btrfs_alloc_stripe_hash_table(struct btrfs_fs_info *info)$/;"	f
btrfs_alloc_subvolume_writers	disk-io.c	/^static struct btrfs_subvolume_writers *btrfs_alloc_subvolume_writers(void)$/;"	f	file:
btrfs_alloc_tree_block	extent-tree.c	/^struct extent_buffer *btrfs_alloc_tree_block(struct btrfs_trans_handle *trans,$/;"	f
btrfs_alloc_workqueue	async-thread.c	/^struct btrfs_workqueue *btrfs_alloc_workqueue(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_alloc_write_mask	ctree.h	/^static inline gfp_t btrfs_alloc_write_mask(struct address_space *mapping)$/;"	f
btrfs_aops	inode.c	/^static const struct address_space_operations btrfs_aops = {$/;"	v	typeref:struct:address_space_operations	file:
btrfs_aops	inode.c	/^static const struct address_space_operations btrfs_aops;$/;"	v	typeref:struct:address_space_operations	file:
btrfs_apply_pending_changes	transaction.c	/^void btrfs_apply_pending_changes(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_assert_delayed_root_empty	delayed-inode.c	/^void btrfs_assert_delayed_root_empty(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_assert_tree_locked	locking.c	/^void btrfs_assert_tree_locked(struct extent_buffer *eb)$/;"	f
btrfs_assert_tree_read_locked	locking.c	/^static void btrfs_assert_tree_read_locked(struct extent_buffer *eb)$/;"	f	file:
btrfs_assign_next_active_device	volumes.c	/^void btrfs_assign_next_active_device(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_async_commit	transaction.c	/^struct btrfs_async_commit {$/;"	s	file:
btrfs_async_delayed_work	delayed-inode.c	/^struct btrfs_async_delayed_work {$/;"	s	file:
btrfs_async_reclaim_metadata_space	extent-tree.c	/^static void btrfs_async_reclaim_metadata_space(struct work_struct *work)$/;"	f	file:
btrfs_async_run_delayed_refs	extent-tree.c	/^int btrfs_async_run_delayed_refs(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_async_run_delayed_root	delayed-inode.c	/^static void btrfs_async_run_delayed_root(struct btrfs_work *work)$/;"	f	file:
btrfs_async_submit_limit	disk-io.c	/^unsigned long btrfs_async_submit_limit(struct btrfs_fs_info *info)$/;"	f
btrfs_attach_transaction	transaction.c	/^struct btrfs_trans_handle *btrfs_attach_transaction(struct btrfs_root *root)$/;"	f
btrfs_attach_transaction_barrier	transaction.c	/^btrfs_attach_transaction_barrier(struct btrfs_root *root)$/;"	f
btrfs_attrs	sysfs.c	/^static const struct attribute *btrfs_attrs[] = {$/;"	v	typeref:struct:attribute	file:
btrfs_auto_defrag_exit	file.c	/^void btrfs_auto_defrag_exit(void)$/;"	f
btrfs_auto_defrag_init	file.c	/^int btrfs_auto_defrag_init(void)$/;"	f
btrfs_balance	volumes.c	/^int btrfs_balance(struct btrfs_balance_control *bctl,$/;"	f
btrfs_balance_control	volumes.h	/^struct btrfs_balance_control {$/;"	s
btrfs_balance_data	ctree.h	/^static inline void btrfs_balance_data(const struct extent_buffer *eb,$/;"	f
btrfs_balance_delayed_items	delayed-inode.c	/^void btrfs_balance_delayed_items(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_balance_meta	ctree.h	/^static inline void btrfs_balance_meta(const struct extent_buffer *eb,$/;"	f
btrfs_balance_sys	ctree.h	/^static inline void btrfs_balance_sys(const struct extent_buffer *eb,$/;"	f
btrfs_batch_delete_items	delayed-inode.c	/^static int btrfs_batch_delete_items(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_batch_insert_items	delayed-inode.c	/^static int btrfs_batch_insert_items(struct btrfs_root *root,$/;"	f	file:
btrfs_bin_search	ctree.c	/^int btrfs_bin_search(struct extent_buffer *eb, const struct btrfs_key *key,$/;"	f
btrfs_bio	volumes.h	/^struct btrfs_bio {$/;"	s
btrfs_bio_alloc	extent_io.c	/^struct bio *btrfs_bio_alloc(struct block_device *bdev, u64 first_byte)$/;"	f
btrfs_bio_clone	extent_io.c	/^struct bio *btrfs_bio_clone(struct bio *bio)$/;"	f
btrfs_bio_clone_partial	extent_io.c	/^struct bio *btrfs_bio_clone_partial(struct bio *orig, int offset, int size)$/;"	f
btrfs_bio_counter_dec	ctree.h	/^static inline void btrfs_bio_counter_dec(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_bio_counter_inc_blocked	dev-replace.c	/^void btrfs_bio_counter_inc_blocked(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_bio_counter_inc_noblocked	dev-replace.c	/^void btrfs_bio_counter_inc_noblocked(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_bio_counter_sub	dev-replace.c	/^void btrfs_bio_counter_sub(struct btrfs_fs_info *fs_info, s64 amount)$/;"	f
btrfs_bio_end_io_t	volumes.h	/^typedef void (btrfs_bio_end_io_t) (struct btrfs_bio *bio, int err);$/;"	t
btrfs_bio_stripe	volumes.h	/^struct btrfs_bio_stripe {$/;"	s
btrfs_bio_wq_end_io	disk-io.c	/^blk_status_t btrfs_bio_wq_end_io(struct btrfs_fs_info *info, struct bio *bio,$/;"	f
btrfs_bioset	extent_io.c	/^static struct bio_set *btrfs_bioset;$/;"	v	typeref:struct:bio_set	file:
btrfs_bitmap_cluster	free-space-cache.c	/^static int btrfs_bitmap_cluster(struct btrfs_block_group_cache *block_group,$/;"	f	file:
btrfs_block_can_be_shared	ctree.c	/^int btrfs_block_can_be_shared(struct btrfs_root *root,$/;"	f
btrfs_block_group_cache	ctree.h	/^struct btrfs_block_group_cache {$/;"	s
btrfs_block_rsv	ctree.h	/^struct btrfs_block_rsv {$/;"	s
btrfs_block_rsv_add	extent-tree.c	/^int btrfs_block_rsv_add(struct btrfs_root *root,$/;"	f
btrfs_block_rsv_check	extent-tree.c	/^int btrfs_block_rsv_check(struct btrfs_block_rsv *block_rsv, int min_factor)$/;"	f
btrfs_block_rsv_migrate	extent-tree.c	/^int btrfs_block_rsv_migrate(struct btrfs_block_rsv *src,$/;"	f
btrfs_block_rsv_refill	extent-tree.c	/^int btrfs_block_rsv_refill(struct btrfs_root *root,$/;"	f
btrfs_block_rsv_release	extent-tree.c	/^void btrfs_block_rsv_release(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_blocked_trans_types	transaction.c	/^static const unsigned int btrfs_blocked_trans_types[TRANS_STATE_MAX] = {$/;"	v	file:
btrfs_btree_balance_dirty	disk-io.c	/^void btrfs_btree_balance_dirty(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_btree_balance_dirty_nodelay	disk-io.c	/^void btrfs_btree_balance_dirty_nodelay(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_btrfs_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_btrfs_xattr_handler = {$/;"	v	typeref:struct:xattr_handler	file:
btrfs_buffer_uptodate	disk-io.c	/^int btrfs_buffer_uptodate(struct extent_buffer *buf, u64 parent_transid,$/;"	f
btrfs_caching_control	ctree.h	/^struct btrfs_caching_control {$/;"	s
btrfs_caching_type	ctree.h	/^enum btrfs_caching_type {$/;"	g
btrfs_calc_avail_data_space	super.c	/^static int btrfs_calc_avail_data_space(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_calc_reclaim_metadata_size	extent-tree.c	/^btrfs_calc_reclaim_metadata_size(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_calc_trans_metadata_size	ctree.h	/^static inline u64 btrfs_calc_trans_metadata_size(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_calc_trunc_metadata_size	ctree.h	/^static inline u64 btrfs_calc_trunc_metadata_size(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_can_relocate	extent-tree.c	/^int btrfs_can_relocate(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f
btrfs_cancel_balance	volumes.c	/^int btrfs_cancel_balance(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_changed_cb_t	ctree.h	/^typedef int (*btrfs_changed_cb_t)(struct btrfs_root *left_root,$/;"	t
btrfs_check_and_init_root_item	root-tree.c	/^void btrfs_check_and_init_root_item(struct btrfs_root_item *root_item)$/;"	f
btrfs_check_chunk_valid	volumes.c	/^static int btrfs_check_chunk_valid(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_check_data_free_space	extent-tree.c	/^int btrfs_check_data_free_space(struct inode *inode,$/;"	f
btrfs_check_delayed_seq	delayed-ref.c	/^int btrfs_check_delayed_seq(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_check_dio_repairable	inode.c	/^static int btrfs_check_dio_repairable(struct inode *inode,$/;"	f	file:
btrfs_check_dir_item_collision	dir-item.c	/^int btrfs_check_dir_item_collision(struct btrfs_root *root, u64 dir,$/;"	f
btrfs_check_extent_io_range	inode.c	/^static void btrfs_check_extent_io_range(void *private_data, const char *caller,$/;"	f	file:
btrfs_check_raid_min_devices	volumes.c	/^static int btrfs_check_raid_min_devices(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_check_ref_name_override	tree-log.c	/^static int btrfs_check_ref_name_override(struct extent_buffer *eb,$/;"	f	file:
btrfs_check_repairable	extent_io.c	/^bool btrfs_check_repairable(struct inode *inode, struct bio *failed_bio,$/;"	f
btrfs_check_rw_degradable	volumes.c	/^bool btrfs_check_rw_degradable(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_check_shared	backref.c	/^int btrfs_check_shared(struct btrfs_root *root, u64 inum, u64 bytenr)$/;"	f
btrfs_check_space_for_delayed_refs	extent-tree.c	/^int btrfs_check_space_for_delayed_refs(struct btrfs_trans_handle *trans,$/;"	f
btrfs_check_super_csum	disk-io.c	/^static int btrfs_check_super_csum(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_check_super_valid	disk-io.c	/^static int btrfs_check_super_valid(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_check_trunc_cache_free_space	free-space-cache.c	/^int btrfs_check_trunc_cache_free_space(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_check_uuid_tree	volumes.c	/^int btrfs_check_uuid_tree(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_check_uuid_tree_entry	volumes.c	/^static int btrfs_check_uuid_tree_entry(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_chunk_item_size	ctree.h	/^static inline unsigned long btrfs_chunk_item_size(int num_stripes)$/;"	f
btrfs_chunk_max_errors	volumes.c	/^static inline int btrfs_chunk_max_errors(struct map_lookup *map)$/;"	f	file:
btrfs_chunk_readonly	volumes.c	/^int btrfs_chunk_readonly(struct btrfs_fs_info *fs_info, u64 chunk_offset)$/;"	f
btrfs_clean_one_deleted_snapshot	transaction.c	/^int btrfs_clean_one_deleted_snapshot(struct btrfs_root *root)$/;"	f
btrfs_clean_quota_tree	qgroup.c	/^static int btrfs_clean_quota_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_cleanup_bg_io	disk-io.c	/^static void btrfs_cleanup_bg_io(struct btrfs_block_group_cache *cache)$/;"	f	file:
btrfs_cleanup_defrag_inodes	file.c	/^void btrfs_cleanup_defrag_inodes(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_cleanup_dirty_bgs	disk-io.c	/^void btrfs_cleanup_dirty_bgs(struct btrfs_transaction *cur_trans,$/;"	f
btrfs_cleanup_fs_roots	disk-io.c	/^int btrfs_cleanup_fs_roots(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_cleanup_fs_uuids	volumes.c	/^void btrfs_cleanup_fs_uuids(void)$/;"	f
btrfs_cleanup_one_transaction	disk-io.c	/^void btrfs_cleanup_one_transaction(struct btrfs_transaction *cur_trans,$/;"	f
btrfs_cleanup_ordered_extents	inode.c	/^static inline void btrfs_cleanup_ordered_extents(struct inode *inode,$/;"	f	file:
btrfs_cleanup_transaction	disk-io.c	/^static int btrfs_cleanup_transaction(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_clear_and_info	ctree.h	1358;"	d
btrfs_clear_bit_hook	inode.c	/^static void btrfs_clear_bit_hook(void *private_data,$/;"	f	file:
btrfs_clear_free_space_tree	free-space-tree.c	/^int btrfs_clear_free_space_tree(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_clear_fs_compat_ro	ctree.h	3600;"	d
btrfs_clear_fs_incompat	ctree.h	3542;"	d
btrfs_clear_header_flag	ctree.h	/^static inline int btrfs_clear_header_flag(struct extent_buffer *eb, u64 flag)$/;"	f
btrfs_clear_lock_blocking	locking.h	/^static inline void btrfs_clear_lock_blocking(struct extent_buffer *eb)$/;"	f
btrfs_clear_lock_blocking_rw	locking.c	/^void btrfs_clear_lock_blocking_rw(struct extent_buffer *eb, int rw)$/;"	f
btrfs_clear_opt	ctree.h	1345;"	d
btrfs_clear_path_blocking	ctree.c	/^noinline void btrfs_clear_path_blocking(struct btrfs_path *p,$/;"	f
btrfs_clear_pending	ctree.h	1394;"	d
btrfs_clear_pending_and_info	ctree.h	1412;"	d
btrfs_clear_rbio_cache	raid56.c	/^static void btrfs_clear_rbio_cache(struct btrfs_fs_info *info)$/;"	f	file:
btrfs_clear_skip_qgroup	transaction.h	/^static inline void btrfs_clear_skip_qgroup(struct btrfs_trans_handle *trans)$/;"	f
btrfs_clear_space_info_full	extent-tree.c	/^void btrfs_clear_space_info_full(struct btrfs_fs_info *info)$/;"	f
btrfs_clone	ioctl.c	/^static int btrfs_clone(struct inode *src, struct inode *inode,$/;"	f	file:
btrfs_clone_alignment_show	sysfs.c	/^static ssize_t btrfs_clone_alignment_show(struct kobject *kobj,$/;"	f	file:
btrfs_clone_extent_buffer	extent_io.c	/^struct extent_buffer *btrfs_clone_extent_buffer(struct extent_buffer *src)$/;"	f
btrfs_clone_file_range	ioctl.c	/^int btrfs_clone_file_range(struct file *src_file, loff_t off,$/;"	f
btrfs_clone_files	ioctl.c	/^static noinline int btrfs_clone_files(struct file *file, struct file *file_src,$/;"	f	file:
btrfs_close_bdev	volumes.c	/^static void btrfs_close_bdev(struct btrfs_device *device)$/;"	f	file:
btrfs_close_devices	volumes.c	/^int btrfs_close_devices(struct btrfs_fs_devices *fs_devices)$/;"	f
btrfs_close_extra_devices	volumes.c	/^void btrfs_close_extra_devices(struct btrfs_fs_devices *fs_devices, int step)$/;"	f
btrfs_cmd_header	send.h	/^struct btrfs_cmd_header {$/;"	s
btrfs_cmp_data	ioctl.c	/^static int btrfs_cmp_data(u64 len, struct cmp_pages *cmp)$/;"	f	file:
btrfs_cmp_data_free	ioctl.c	/^static void btrfs_cmp_data_free(struct cmp_pages *cmp)$/;"	f	file:
btrfs_cmp_data_prepare	ioctl.c	/^static int btrfs_cmp_data_prepare(struct inode *src, u64 loff,$/;"	f	file:
btrfs_cmp_device_free_bytes	super.c	/^static int btrfs_cmp_device_free_bytes(const void *dev_info1,$/;"	f	file:
btrfs_cmp_device_info	volumes.c	/^static int btrfs_cmp_device_info(const void *a, const void *b)$/;"	f	file:
btrfs_commit_inode_delayed_inode	delayed-inode.c	/^int btrfs_commit_inode_delayed_inode(struct btrfs_inode *inode)$/;"	f
btrfs_commit_inode_delayed_items	delayed-inode.c	/^int btrfs_commit_inode_delayed_items(struct btrfs_trans_handle *trans,$/;"	f
btrfs_commit_super	disk-io.c	/^int btrfs_commit_super(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_commit_transaction	transaction.c	/^int btrfs_commit_transaction(struct btrfs_trans_handle *trans)$/;"	f
btrfs_commit_transaction_async	transaction.c	/^int btrfs_commit_transaction_async(struct btrfs_trans_handle *trans,$/;"	f
btrfs_comp_cpu_keys	ctree.c	/^int btrfs_comp_cpu_keys(const struct btrfs_key *k1, const struct btrfs_key *k2)$/;"	f
btrfs_comp_ws	compression.c	/^} btrfs_comp_ws[BTRFS_COMPRESS_TYPES];$/;"	v	typeref:struct:__anon6	file:
btrfs_compare_tree_result	ctree.h	/^enum btrfs_compare_tree_result {$/;"	g
btrfs_compare_trees	ctree.c	/^int btrfs_compare_trees(struct btrfs_root *left_root,$/;"	f
btrfs_compat_ioctl	ioctl.c	/^long btrfs_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f
btrfs_compress_heuristic	compression.c	/^int btrfs_compress_heuristic(struct inode *inode, u64 start, u64 end)$/;"	f
btrfs_compress_op	compression.c	/^static const struct btrfs_compress_op * const btrfs_compress_op[] = {$/;"	v	file:
btrfs_compress_op	compression.h	/^struct btrfs_compress_op {$/;"	s
btrfs_compress_pages	compression.c	/^int btrfs_compress_pages(int type, struct address_space *mapping,$/;"	f
btrfs_compression_type	compression.h	/^enum btrfs_compression_type {$/;"	g
btrfs_cond_migrate_bytes	extent-tree.c	/^int btrfs_cond_migrate_bytes(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_congested_fn	disk-io.c	/^static int btrfs_congested_fn(void *congested_data, int bdi_bits)$/;"	f	file:
btrfs_cont_expand	inode.c	/^int btrfs_cont_expand(struct inode *inode, loff_t oldsize, loff_t size)$/;"	f
btrfs_control_ioctl	super.c	/^static long btrfs_control_ioctl(struct file *file, unsigned int cmd,$/;"	f	file:
btrfs_control_open	super.c	/^static int btrfs_control_open(struct inode *inode, struct file *file)$/;"	f	file:
btrfs_copy_from_user	file.c	/^static noinline int btrfs_copy_from_user(loff_t pos, size_t write_bytes,$/;"	f	file:
btrfs_copy_root	ctree.c	/^int btrfs_copy_root(struct btrfs_trans_handle *trans,$/;"	f
btrfs_cow_block	ctree.c	/^noinline int btrfs_cow_block(struct btrfs_trans_handle *trans,$/;"	f
btrfs_cpu_balance_args_to_disk	ctree.h	/^btrfs_cpu_balance_args_to_disk(struct btrfs_disk_balance_args *disk,$/;"	f
btrfs_cpu_key_to_disk	ctree.h	/^static inline void btrfs_cpu_key_to_disk(struct btrfs_disk_key *disk,$/;"	f
btrfs_crc32c	hash.c	/^u32 btrfs_crc32c(u32 crc, const void *address, unsigned int length)$/;"	f
btrfs_crc32c_impl	hash.c	/^const char* btrfs_crc32c_impl(void)$/;"	f
btrfs_create	inode.c	/^static int btrfs_create(struct inode *dir, struct dentry *dentry,$/;"	f	file:
btrfs_create_block_group_cache	extent-tree.c	/^btrfs_create_block_group_cache(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_create_dio_extent	inode.c	/^static struct extent_map *btrfs_create_dio_extent(struct inode *inode,$/;"	f	file:
btrfs_create_free_space_tree	free-space-tree.c	/^int btrfs_create_free_space_tree(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_create_pending_block_groups	extent-tree.c	/^void btrfs_create_pending_block_groups(struct btrfs_trans_handle *trans,$/;"	f
btrfs_create_qgroup	qgroup.c	/^int btrfs_create_qgroup(struct btrfs_trans_handle *trans,$/;"	f
btrfs_create_repair_bio	extent_io.c	/^struct bio *btrfs_create_repair_bio(struct inode *inode, struct bio *failed_bio,$/;"	f
btrfs_create_subvol_root	inode.c	/^int btrfs_create_subvol_root(struct btrfs_trans_handle *trans,$/;"	f
btrfs_create_tree	disk-io.c	/^struct btrfs_root *btrfs_create_tree(struct btrfs_trans_handle *trans,$/;"	f
btrfs_create_uuid_tree	volumes.c	/^int btrfs_create_uuid_tree(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_crit	ctree.h	3309;"	d
btrfs_crit_in_rcu	ctree.h	3327;"	d
btrfs_crit_rl	ctree.h	3363;"	d
btrfs_crit_rl_in_rcu	ctree.h	3345;"	d
btrfs_cross_ref_exist	extent-tree.c	/^int btrfs_cross_ref_exist(struct btrfs_root *root, u64 objectid, u64 offset,$/;"	f
btrfs_csum_bytes_to_leaves	extent-tree.c	/^u64 btrfs_csum_bytes_to_leaves(struct btrfs_fs_info *fs_info, u64 csum_bytes)$/;"	f
btrfs_csum_data	disk-io.c	/^u32 btrfs_csum_data(const char *data, u32 seed, size_t len)$/;"	f
btrfs_csum_file_blocks	file-item.c	/^int btrfs_csum_file_blocks(struct btrfs_trans_handle *trans,$/;"	f
btrfs_csum_final	disk-io.c	/^void btrfs_csum_final(u32 crc, u8 *result)$/;"	f
btrfs_csum_one_bio	file-item.c	/^blk_status_t btrfs_csum_one_bio(struct inode *inode, struct bio *bio,$/;"	f
btrfs_csum_sizes	ctree.h	/^static const int btrfs_csum_sizes[] = { 4 };$/;"	v
btrfs_ctl_fops	super.c	/^static const struct file_operations btrfs_ctl_fops = {$/;"	v	typeref:struct:file_operations	file:
btrfs_data_alloc_profile	extent-tree.c	/^u64 btrfs_data_alloc_profile(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_debug	ctree.h	3375;"	d
btrfs_debug	ctree.h	3402;"	d
btrfs_debug	ctree.h	3411;"	d
btrfs_debug_check_extent_io_range	extent_io.c	85;"	d	file:
btrfs_debug_check_extent_io_range	extent_io.c	98;"	d	file:
btrfs_debug_in_rcu	ctree.h	3381;"	d
btrfs_debug_in_rcu	ctree.h	3404;"	d
btrfs_debug_in_rcu	ctree.h	3413;"	d
btrfs_debug_rl	ctree.h	3394;"	d
btrfs_debug_rl	ctree.h	3408;"	d
btrfs_debug_rl	ctree.h	3417;"	d
btrfs_debug_rl_in_rcu	ctree.h	3387;"	d
btrfs_debug_rl_in_rcu	ctree.h	3406;"	d
btrfs_debug_rl_in_rcu	ctree.h	3415;"	d
btrfs_debugfs_root_dentry	sysfs.c	/^static struct dentry *btrfs_debugfs_root_dentry;$/;"	v	typeref:struct:dentry	file:
btrfs_debugfs_test	sysfs.c	/^u64 btrfs_debugfs_test;$/;"	v
btrfs_dec_block_group_reservations	extent-tree.c	/^void btrfs_dec_block_group_reservations(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_dec_block_group_ro	extent-tree.c	/^void btrfs_dec_block_group_ro(struct btrfs_block_group_cache *cache)$/;"	f
btrfs_dec_nocow_writers	extent-tree.c	/^void btrfs_dec_nocow_writers(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f
btrfs_dec_ref	extent-tree.c	/^int btrfs_dec_ref(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f
btrfs_dec_test_first_ordered_pending	ordered-data.c	/^int btrfs_dec_test_first_ordered_pending(struct inode *inode,$/;"	f
btrfs_dec_test_ordered_pending	ordered-data.c	/^int btrfs_dec_test_ordered_pending(struct inode *inode,$/;"	f
btrfs_decode_error	super.c	/^const char *btrfs_decode_error(int errno)$/;"	f
btrfs_decompress	compression.c	/^int btrfs_decompress(int type, unsigned char *data_in, struct page *dest_page,$/;"	f
btrfs_decompress_bio	compression.c	/^static int btrfs_decompress_bio(struct compressed_bio *cb)$/;"	f	file:
btrfs_decompress_buf2page	compression.c	/^int btrfs_decompress_buf2page(const char *buf, unsigned long buf_start,$/;"	f
btrfs_dedupe_file_range	ioctl.c	/^ssize_t btrfs_dedupe_file_range(struct file *src_file, u64 loff, u64 olen,$/;"	f
btrfs_defrag_cancelled	ctree.h	/^static inline int btrfs_defrag_cancelled(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_defrag_file	ioctl.c	/^int btrfs_defrag_file(struct inode *inode, struct file *file,$/;"	f
btrfs_defrag_leaves	tree-defrag.c	/^int btrfs_defrag_leaves(struct btrfs_trans_handle *trans,$/;"	f
btrfs_defrag_root	transaction.c	/^int btrfs_defrag_root(struct btrfs_root *root)$/;"	f
btrfs_del_csums	file-item.c	/^int btrfs_del_csums(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_delalloc_inode	inode.c	/^static void btrfs_del_delalloc_inode(struct btrfs_root *root,$/;"	f	file:
btrfs_del_dir_entries_in_log	tree-log.c	/^int btrfs_del_dir_entries_in_log(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_inode_extref	inode-item.c	/^static int btrfs_del_inode_extref(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_del_inode_ref	inode-item.c	/^int btrfs_del_inode_ref(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_inode_ref_in_log	tree-log.c	/^int btrfs_del_inode_ref_in_log(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_item	ctree.h	/^static inline int btrfs_del_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_items	ctree.c	/^int btrfs_del_items(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f
btrfs_del_leaf	ctree.c	/^static noinline void btrfs_del_leaf(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_del_orphan_item	orphan.c	/^int btrfs_del_orphan_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_qgroup_relation	qgroup.c	/^int btrfs_del_qgroup_relation(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_root	root-tree.c	/^int btrfs_del_root(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_root_ref	root-tree.c	/^int btrfs_del_root_ref(struct btrfs_trans_handle *trans,$/;"	f
btrfs_del_sys_chunk	volumes.c	/^static int btrfs_del_sys_chunk(struct btrfs_fs_info *fs_info, u64 chunk_offset)$/;"	f	file:
btrfs_delalloc_release_metadata	extent-tree.c	/^void btrfs_delalloc_release_metadata(struct btrfs_inode *inode, u64 num_bytes)$/;"	f
btrfs_delalloc_release_space	extent-tree.c	/^void btrfs_delalloc_release_space(struct inode *inode,$/;"	f
btrfs_delalloc_reserve_metadata	extent-tree.c	/^int btrfs_delalloc_reserve_metadata(struct btrfs_inode *inode, u64 num_bytes)$/;"	f
btrfs_delalloc_reserve_space	extent-tree.c	/^int btrfs_delalloc_reserve_space(struct inode *inode,$/;"	f
btrfs_delalloc_work	ctree.h	/^struct btrfs_delalloc_work {$/;"	s
btrfs_delayed_data_ref	delayed-ref.h	/^struct btrfs_delayed_data_ref {$/;"	s
btrfs_delayed_data_ref_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_data_ref_cachep;$/;"	v	typeref:struct:kmem_cache
btrfs_delayed_delete_inode_ref	delayed-inode.c	/^int btrfs_delayed_delete_inode_ref(struct btrfs_inode *inode)$/;"	f
btrfs_delayed_extent_op	delayed-ref.h	/^struct btrfs_delayed_extent_op {$/;"	s
btrfs_delayed_extent_op_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_extent_op_cachep;$/;"	v	typeref:struct:kmem_cache
btrfs_delayed_inode_exit	delayed-inode.c	/^void btrfs_delayed_inode_exit(void)$/;"	f
btrfs_delayed_inode_init	delayed-inode.c	/^int __init btrfs_delayed_inode_init(void)$/;"	f
btrfs_delayed_inode_release_metadata	delayed-inode.c	/^static void btrfs_delayed_inode_release_metadata(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_delayed_inode_reserve_metadata	delayed-inode.c	/^static int btrfs_delayed_inode_reserve_metadata($/;"	f	file:
btrfs_delayed_item	delayed-inode.h	/^struct btrfs_delayed_item {$/;"	s
btrfs_delayed_item_release_metadata	delayed-inode.c	/^static void btrfs_delayed_item_release_metadata(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_delayed_item_reserve_metadata	delayed-inode.c	/^static int btrfs_delayed_item_reserve_metadata(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_delayed_node	delayed-inode.h	/^struct btrfs_delayed_node {$/;"	s
btrfs_delayed_node_to_data_ref	delayed-ref.h	/^btrfs_delayed_node_to_data_ref(struct btrfs_delayed_ref_node *node)$/;"	f
btrfs_delayed_node_to_head	delayed-ref.h	/^btrfs_delayed_node_to_head(struct btrfs_delayed_ref_node *node)$/;"	f
btrfs_delayed_node_to_tree_ref	delayed-ref.h	/^btrfs_delayed_node_to_tree_ref(struct btrfs_delayed_ref_node *node)$/;"	f
btrfs_delayed_ref_exit	delayed-ref.c	/^void btrfs_delayed_ref_exit(void)$/;"	f
btrfs_delayed_ref_head	delayed-ref.h	/^struct btrfs_delayed_ref_head {$/;"	s
btrfs_delayed_ref_head_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_ref_head_cachep;$/;"	v	typeref:struct:kmem_cache
btrfs_delayed_ref_init	delayed-ref.c	/^int btrfs_delayed_ref_init(void)$/;"	f
btrfs_delayed_ref_is_head	delayed-ref.h	/^static int btrfs_delayed_ref_is_head(struct btrfs_delayed_ref_node *node)$/;"	f
btrfs_delayed_ref_lock	delayed-ref.c	/^int btrfs_delayed_ref_lock(struct btrfs_trans_handle *trans,$/;"	f
btrfs_delayed_ref_node	delayed-ref.h	/^struct btrfs_delayed_ref_node {$/;"	s
btrfs_delayed_ref_root	delayed-ref.h	/^struct btrfs_delayed_ref_root {$/;"	s
btrfs_delayed_ref_unlock	delayed-ref.h	/^static inline void btrfs_delayed_ref_unlock(struct btrfs_delayed_ref_head *head)$/;"	f
btrfs_delayed_root	delayed-inode.h	/^struct btrfs_delayed_root {$/;"	s
btrfs_delayed_tree_ref	delayed-ref.h	/^struct btrfs_delayed_tree_ref {$/;"	s
btrfs_delayed_tree_ref_cachep	delayed-ref.c	/^struct kmem_cache *btrfs_delayed_tree_ref_cachep;$/;"	v	typeref:struct:kmem_cache
btrfs_delayed_update_inode	delayed-inode.c	/^int btrfs_delayed_update_inode(struct btrfs_trans_handle *trans,$/;"	f
btrfs_delete_delayed_dir_index	delayed-inode.c	/^int btrfs_delete_delayed_dir_index(struct btrfs_trans_handle *trans,$/;"	f
btrfs_delete_delayed_insertion_item	delayed-inode.c	/^static int btrfs_delete_delayed_insertion_item(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_delete_delayed_items	delayed-inode.c	/^static int btrfs_delete_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_delete_one_dir_name	dir-item.c	/^int btrfs_delete_one_dir_name(struct btrfs_trans_handle *trans,$/;"	f
btrfs_delete_unused_bgs	extent-tree.c	/^void btrfs_delete_unused_bgs(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_dentry_delete	inode.c	/^static int btrfs_dentry_delete(const struct dentry *dentry)$/;"	f	file:
btrfs_dentry_operations	inode.c	/^const struct dentry_operations btrfs_dentry_operations = {$/;"	v	typeref:struct:dentry_operations
btrfs_dentry_release	inode.c	/^static void btrfs_dentry_release(struct dentry *dentry)$/;"	f	file:
btrfs_dequeue_delayed_node	delayed-inode.c	/^static void btrfs_dequeue_delayed_node(struct btrfs_delayed_root *root,$/;"	f	file:
btrfs_descending_sort_devices	super.c	/^static inline void btrfs_descending_sort_devices($/;"	f	file:
btrfs_destroy_all_delalloc_inodes	disk-io.c	/^static void btrfs_destroy_all_delalloc_inodes(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_destroy_all_ordered_extents	disk-io.c	/^static void btrfs_destroy_all_ordered_extents(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_destroy_cachep	inode.c	/^void btrfs_destroy_cachep(void)$/;"	f
btrfs_destroy_delalloc_inodes	disk-io.c	/^static void btrfs_destroy_delalloc_inodes(struct btrfs_root *root)$/;"	f	file:
btrfs_destroy_delayed_inodes	delayed-inode.c	/^void btrfs_destroy_delayed_inodes(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_destroy_delayed_refs	disk-io.c	/^static int btrfs_destroy_delayed_refs(struct btrfs_transaction *trans,$/;"	f	file:
btrfs_destroy_dev_replace_tgtdev	volumes.c	/^void btrfs_destroy_dev_replace_tgtdev(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_destroy_inode	inode.c	/^void btrfs_destroy_inode(struct inode *inode)$/;"	f
btrfs_destroy_marked_extents	disk-io.c	/^static int btrfs_destroy_marked_extents(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_destroy_ordered_extents	disk-io.c	/^static void btrfs_destroy_ordered_extents(struct btrfs_root *root)$/;"	f	file:
btrfs_destroy_pinned_extent	disk-io.c	/^static int btrfs_destroy_pinned_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_destroy_test_fs	tests/btrfs-tests.c	/^static void btrfs_destroy_test_fs(void)$/;"	f	file:
btrfs_destroy_workqueue	async-thread.c	/^void btrfs_destroy_workqueue(struct btrfs_workqueue *wq)$/;"	f
btrfs_dev_extent_chunk_tree_uuid	ctree.h	/^static inline unsigned long btrfs_dev_extent_chunk_tree_uuid(struct btrfs_dev_extent *dev)$/;"	f
btrfs_dev_replace	ctree.h	/^struct btrfs_dev_replace {$/;"	s
btrfs_dev_replace_by_ioctl	dev-replace.c	/^int btrfs_dev_replace_by_ioctl(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_dev_replace_cancel	dev-replace.c	/^int btrfs_dev_replace_cancel(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_dev_replace_clear_lock_blocking	dev-replace.c	/^void btrfs_dev_replace_clear_lock_blocking($/;"	f
btrfs_dev_replace_continue_on_mount	dev-replace.c	/^static int btrfs_dev_replace_continue_on_mount(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_dev_replace_finishing	dev-replace.c	/^static int btrfs_dev_replace_finishing(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_dev_replace_is_ongoing	dev-replace.c	/^int btrfs_dev_replace_is_ongoing(struct btrfs_dev_replace *dev_replace)$/;"	f
btrfs_dev_replace_kthread	dev-replace.c	/^static int btrfs_dev_replace_kthread(void *data)$/;"	f	file:
btrfs_dev_replace_lock	dev-replace.c	/^void btrfs_dev_replace_lock(struct btrfs_dev_replace *dev_replace, int rw)$/;"	f
btrfs_dev_replace_progress	dev-replace.c	/^static u64 btrfs_dev_replace_progress(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_dev_replace_set_lock_blocking	dev-replace.c	/^void btrfs_dev_replace_set_lock_blocking($/;"	f
btrfs_dev_replace_start	dev-replace.c	/^int btrfs_dev_replace_start(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_dev_replace_stats_inc	dev-replace.h	/^static inline void btrfs_dev_replace_stats_inc(atomic64_t *stat_value)$/;"	f
btrfs_dev_replace_status	dev-replace.c	/^void btrfs_dev_replace_status(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_dev_replace_suspend_for_unmount	dev-replace.c	/^void btrfs_dev_replace_suspend_for_unmount(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_dev_replace_unlock	dev-replace.c	/^void btrfs_dev_replace_unlock(struct btrfs_dev_replace *dev_replace, int rw)$/;"	f
btrfs_dev_replace_update_device_in_mapping_tree	dev-replace.c	/^static void btrfs_dev_replace_update_device_in_mapping_tree($/;"	f	file:
btrfs_dev_stat_inc	volumes.h	/^static inline void btrfs_dev_stat_inc(struct btrfs_device *dev,$/;"	f
btrfs_dev_stat_inc_and_print	volumes.c	/^void btrfs_dev_stat_inc_and_print(struct btrfs_device *dev, int index)$/;"	f
btrfs_dev_stat_print_on_error	volumes.c	/^static void btrfs_dev_stat_print_on_error(struct btrfs_device *dev)$/;"	f	file:
btrfs_dev_stat_print_on_load	volumes.c	/^static void btrfs_dev_stat_print_on_load(struct btrfs_device *dev)$/;"	f	file:
btrfs_dev_stat_read	volumes.h	/^static inline int btrfs_dev_stat_read(struct btrfs_device *dev,$/;"	f
btrfs_dev_stat_read_and_reset	volumes.h	/^static inline int btrfs_dev_stat_read_and_reset(struct btrfs_device *dev,$/;"	f
btrfs_dev_stat_reset	volumes.h	/^static inline void btrfs_dev_stat_reset(struct btrfs_device *dev,$/;"	f
btrfs_dev_stat_set	volumes.h	/^static inline void btrfs_dev_stat_set(struct btrfs_device *dev,$/;"	f
btrfs_dev_stats_dirty	volumes.h	/^static inline int btrfs_dev_stats_dirty(struct btrfs_device *dev)$/;"	f
btrfs_dev_stats_value	ctree.h	/^static inline u64 btrfs_dev_stats_value(const struct extent_buffer *eb,$/;"	f
btrfs_device	volumes.h	/^struct btrfs_device {$/;"	s
btrfs_device_data_ordered_init	volumes.h	44;"	d
btrfs_device_data_ordered_init	volumes.h	47;"	d
btrfs_device_fsid	ctree.h	/^static inline unsigned long btrfs_device_fsid(struct btrfs_dev_item *d)$/;"	f
btrfs_device_info	volumes.h	/^struct btrfs_device_info {$/;"	s
btrfs_device_total_bytes	ctree.h	/^static inline u64 btrfs_device_total_bytes(struct extent_buffer *eb,$/;"	f
btrfs_device_uuid	ctree.h	/^static inline unsigned long btrfs_device_uuid(struct btrfs_dev_item *d)$/;"	f
btrfs_dio_data	inode.c	/^struct btrfs_dio_data {$/;"	s	file:
btrfs_dio_private	btrfs_inode.h	/^struct btrfs_dio_private {$/;"	s
btrfs_dir_file_operations	inode.c	/^static const struct file_operations btrfs_dir_file_operations = {$/;"	v	typeref:struct:file_operations	file:
btrfs_dir_file_operations	inode.c	/^static const struct file_operations btrfs_dir_file_operations;$/;"	v	typeref:struct:file_operations	file:
btrfs_dir_inode_operations	inode.c	/^static const struct inode_operations btrfs_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
btrfs_dir_inode_operations	inode.c	/^static const struct inode_operations btrfs_dir_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
btrfs_dir_item_key	ctree.h	/^static inline void btrfs_dir_item_key(const struct extent_buffer *eb,$/;"	f
btrfs_dir_item_key_to_cpu	ctree.h	/^static inline void btrfs_dir_item_key_to_cpu(const struct extent_buffer *eb,$/;"	f
btrfs_dir_list	tree-log.c	/^struct btrfs_dir_list {$/;"	s	file:
btrfs_dir_ro_inode_operations	inode.c	/^static const struct inode_operations btrfs_dir_ro_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
btrfs_dir_ro_inode_operations	inode.c	/^static const struct inode_operations btrfs_dir_ro_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
btrfs_direct_IO	inode.c	/^static ssize_t btrfs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)$/;"	f	file:
btrfs_dirty_inode	inode.c	/^static int btrfs_dirty_inode(struct inode *inode)$/;"	f	file:
btrfs_dirty_pages	file.c	/^int btrfs_dirty_pages(struct inode *inode, struct page **pages,$/;"	f
btrfs_discard_extent	extent-tree.c	/^int btrfs_discard_extent(struct btrfs_fs_info *fs_info, u64 bytenr,$/;"	f
btrfs_disk_balance_args_to_cpu	ctree.h	/^btrfs_disk_balance_args_to_cpu(struct btrfs_balance_args *cpu,$/;"	f
btrfs_disk_cache_state	ctree.h	/^enum btrfs_disk_cache_state {$/;"	g
btrfs_disk_key_to_cpu	ctree.h	/^static inline void btrfs_disk_key_to_cpu(struct btrfs_key *cpu,$/;"	f
btrfs_double_extent_lock	ioctl.c	/^static int btrfs_double_extent_lock(struct inode *inode1, u64 loff1,$/;"	f	file:
btrfs_double_extent_unlock	ioctl.c	/^static void btrfs_double_extent_unlock(struct inode *inode1, u64 loff1,$/;"	f	file:
btrfs_double_inode_lock	ioctl.c	/^static void btrfs_double_inode_lock(struct inode *inode1, struct inode *inode2)$/;"	f	file:
btrfs_double_inode_unlock	ioctl.c	/^static void btrfs_double_inode_unlock(struct inode *inode1, struct inode *inode2)$/;"	f	file:
btrfs_drop_and_free_fs_root	disk-io.c	/^void btrfs_drop_and_free_fs_root(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_drop_extent_cache	file.c	/^void btrfs_drop_extent_cache(struct btrfs_inode *inode, u64 start, u64 end,$/;"	f
btrfs_drop_extents	file.c	/^int btrfs_drop_extents(struct btrfs_trans_handle *trans,$/;"	f
btrfs_drop_inode	inode.c	/^int btrfs_drop_inode(struct inode *inode)$/;"	f
btrfs_drop_pages	file.c	/^static void btrfs_drop_pages(struct page **pages, size_t num_pages)$/;"	f	file:
btrfs_drop_snapshot	extent-tree.c	/^int btrfs_drop_snapshot(struct btrfs_root *root,$/;"	f
btrfs_drop_subtree	extent-tree.c	/^int btrfs_drop_subtree(struct btrfs_trans_handle *trans,$/;"	f
btrfs_dump_free_space	free-space-cache.c	/^void btrfs_dump_free_space(struct btrfs_block_group_cache *block_group,$/;"	f
btrfs_duplicate_item	ctree.c	/^int btrfs_duplicate_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_emerg	ctree.h	3305;"	d
btrfs_emerg_in_rcu	ctree.h	3323;"	d
btrfs_emerg_rl	ctree.h	3359;"	d
btrfs_emerg_rl_in_rcu	ctree.h	3341;"	d
btrfs_encode_fh	export.c	/^static int btrfs_encode_fh(struct inode *inode, u32 *fh, int *max_len,$/;"	f	file:
btrfs_end_bbio	volumes.c	/^static inline void btrfs_end_bbio(struct btrfs_bio *bbio, struct bio *bio)$/;"	f	file:
btrfs_end_bio	volumes.c	/^static void btrfs_end_bio(struct bio *bio)$/;"	f	file:
btrfs_end_buffer_write_sync	disk-io.c	/^static void btrfs_end_buffer_write_sync(struct buffer_head *bh, int uptodate)$/;"	f	file:
btrfs_end_dio_bio	inode.c	/^static void btrfs_end_dio_bio(struct bio *bio)$/;"	f	file:
btrfs_end_empty_barrier	disk-io.c	/^static void btrfs_end_empty_barrier(struct bio *bio)$/;"	f	file:
btrfs_end_io_wq	disk-io.c	/^struct btrfs_end_io_wq {$/;"	s	file:
btrfs_end_io_wq_cache	disk-io.c	/^static struct kmem_cache *btrfs_end_io_wq_cache;$/;"	v	typeref:struct:kmem_cache	file:
btrfs_end_io_wq_exit	disk-io.c	/^void btrfs_end_io_wq_exit(void)$/;"	f
btrfs_end_io_wq_init	disk-io.c	/^int __init btrfs_end_io_wq_init(void)$/;"	f
btrfs_end_log_trans	tree-log.c	/^void btrfs_end_log_trans(struct btrfs_root *root)$/;"	f
btrfs_end_transaction	transaction.c	/^int btrfs_end_transaction(struct btrfs_trans_handle *trans)$/;"	f
btrfs_end_transaction_throttle	transaction.c	/^int btrfs_end_transaction_throttle(struct btrfs_trans_handle *trans)$/;"	f
btrfs_end_write_no_snapshotting	extent-tree.c	/^void btrfs_end_write_no_snapshotting(struct btrfs_root *root)$/;"	f
btrfs_endio_direct_read	inode.c	/^static void btrfs_endio_direct_read(struct bio *bio)$/;"	f	file:
btrfs_endio_direct_write	inode.c	/^static void btrfs_endio_direct_write(struct bio *bio)$/;"	f	file:
btrfs_err	ctree.h	3311;"	d
btrfs_err_in_rcu	ctree.h	3329;"	d
btrfs_err_rl	ctree.h	3365;"	d
btrfs_err_rl_in_rcu	ctree.h	3347;"	d
btrfs_error_commit_super	disk-io.c	/^static void btrfs_error_commit_super(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_error_unpin_extent_range	extent-tree.c	/^int btrfs_error_unpin_extent_range(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_evict_inode	inode.c	/^void btrfs_evict_inode(struct inode *inode)$/;"	f
btrfs_exclude_logged_extents	extent-tree.c	/^int btrfs_exclude_logged_extents(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_exit_compress	compression.c	/^void btrfs_exit_compress(void)$/;"	f
btrfs_exit_sysfs	sysfs.c	/^void btrfs_exit_sysfs(void)$/;"	f
btrfs_export_ops	export.c	/^const struct export_operations btrfs_export_ops = {$/;"	v	typeref:struct:export_operations
btrfs_extend_item	ctree.c	/^void btrfs_extend_item(struct btrfs_fs_info *fs_info, struct btrfs_path *path,$/;"	f
btrfs_extent_inline_ref_size	ctree.h	/^static inline u32 btrfs_extent_inline_ref_size(int type)$/;"	f
btrfs_extent_io_ops	inode.c	/^static const struct extent_io_ops btrfs_extent_io_ops = {$/;"	v	typeref:struct:extent_io_ops	file:
btrfs_extent_io_ops	inode.c	/^static const struct extent_io_ops btrfs_extent_io_ops;$/;"	v	typeref:struct:extent_io_ops	file:
btrfs_extent_item_to_extent_map	file-item.c	/^void btrfs_extent_item_to_extent_map(struct btrfs_inode *inode,$/;"	f
btrfs_extent_readonly	extent-tree.c	/^int btrfs_extent_readonly(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f
btrfs_extent_same	ioctl.c	/^static int btrfs_extent_same(struct inode *src, u64 loff, u64 olen,$/;"	f	file:
btrfs_extref_hash	hash.h	/^static inline u64 btrfs_extref_hash(u64 parent_objectid, const char *name,$/;"	f
btrfs_fallocate	file.c	/^static long btrfs_fallocate(struct file *file, int mode,$/;"	f	file:
btrfs_fdatawrite_range	file.c	/^int btrfs_fdatawrite_range(struct inode *inode, loff_t start, loff_t end)$/;"	f
btrfs_feature_attr	sysfs.h	/^struct btrfs_feature_attr {$/;"	s
btrfs_feature_attr_group	sysfs.c	/^static const struct attribute_group btrfs_feature_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
btrfs_feature_attr_show	sysfs.c	/^static ssize_t btrfs_feature_attr_show(struct kobject *kobj,$/;"	f	file:
btrfs_feature_attr_store	sysfs.c	/^static ssize_t btrfs_feature_attr_store(struct kobject *kobj,$/;"	f	file:
btrfs_feature_attrs	sysfs.c	/^static struct btrfs_feature_attr btrfs_feature_attrs[3][NUM_FEATURE_BITS];$/;"	v	typeref:struct:btrfs_feature_attr	file:
btrfs_feature_set	sysfs.h	/^enum btrfs_feature_set {$/;"	g
btrfs_feature_set_names	sysfs.c	/^const char * const btrfs_feature_set_names[3] = {$/;"	v
btrfs_feature_visible	sysfs.c	/^static umode_t btrfs_feature_visible(struct kobject *kobj,$/;"	f	file:
btrfs_fh_to_dentry	export.c	/^static struct dentry *btrfs_fh_to_dentry(struct super_block *sb, struct fid *fh,$/;"	f	file:
btrfs_fh_to_parent	export.c	/^static struct dentry *btrfs_fh_to_parent(struct super_block *sb, struct fid *fh,$/;"	f	file:
btrfs_fid	export.h	/^struct btrfs_fid {$/;"	s
btrfs_fiemap	inode.c	/^static int btrfs_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,$/;"	f	file:
btrfs_file_extent_calc_inline_size	ctree.h	/^static inline u32 btrfs_file_extent_calc_inline_size(u32 datasize)$/;"	f
btrfs_file_extent_inline_item_len	ctree.h	/^static inline u32 btrfs_file_extent_inline_item_len($/;"	f
btrfs_file_extent_inline_len	ctree.h	/^static inline u32 btrfs_file_extent_inline_len(const struct extent_buffer *eb,$/;"	f
btrfs_file_extent_inline_start	ctree.h	/^btrfs_file_extent_inline_start(const struct btrfs_file_extent_item *e)$/;"	f
btrfs_file_inode_operations	inode.c	/^static const struct inode_operations btrfs_file_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
btrfs_file_inode_operations	inode.c	/^static const struct inode_operations btrfs_file_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
btrfs_file_llseek	file.c	/^static loff_t btrfs_file_llseek(struct file *file, loff_t offset, int whence)$/;"	f	file:
btrfs_file_mmap	file.c	/^static int btrfs_file_mmap(struct file	*filp, struct vm_area_struct *vma)$/;"	f	file:
btrfs_file_open	file.c	/^static int btrfs_file_open(struct inode *inode, struct file *filp)$/;"	f	file:
btrfs_file_operations	file.c	/^const struct file_operations btrfs_file_operations = {$/;"	v	typeref:struct:file_operations
btrfs_file_private	ctree.h	/^struct btrfs_file_private {$/;"	s
btrfs_file_vm_ops	file.c	/^static const struct vm_operations_struct btrfs_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
btrfs_file_write_iter	file.c	/^static ssize_t btrfs_file_write_iter(struct kiocb *iocb,$/;"	f	file:
btrfs_filetype_table	inode.c	/^unsigned char btrfs_filetype_table[] = {$/;"	v
btrfs_fill_inode	delayed-inode.c	/^int btrfs_fill_inode(struct inode *inode, u32 *rdev)$/;"	f
btrfs_fill_super	super.c	/^static int btrfs_fill_super(struct super_block *sb,$/;"	f	file:
btrfs_filldir	inode.c	/^static int btrfs_filldir(void *addr, int entries, struct dir_context *ctx)$/;"	f	file:
btrfs_find_actor	inode.c	/^static int btrfs_find_actor(struct inode *inode, void *opaque)$/;"	f	file:
btrfs_find_all_leafs	backref.c	/^static int btrfs_find_all_leafs(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_find_all_roots	backref.c	/^int btrfs_find_all_roots(struct btrfs_trans_handle *trans,$/;"	f
btrfs_find_all_roots_safe	backref.c	/^static int btrfs_find_all_roots_safe(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_find_create_tree_block	disk-io.c	/^struct extent_buffer *btrfs_find_create_tree_block($/;"	f
btrfs_find_delayed_ref_head	delayed-ref.c	/^btrfs_find_delayed_ref_head(struct btrfs_delayed_ref_root *delayed_refs, u64 bytenr)$/;"	f
btrfs_find_device	volumes.c	/^struct btrfs_device *btrfs_find_device(struct btrfs_fs_info *fs_info, u64 devid,$/;"	f
btrfs_find_device_by_devspec	volumes.c	/^int btrfs_find_device_by_devspec(struct btrfs_fs_info *fs_info, u64 devid,$/;"	f
btrfs_find_device_by_path	volumes.c	/^static int btrfs_find_device_by_path(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_find_device_missing_or_by_path	volumes.c	/^int btrfs_find_device_missing_or_by_path(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_find_free_ino	inode-map.c	/^int btrfs_find_free_ino(struct btrfs_root *root, u64 *objectid)$/;"	f
btrfs_find_free_objectid	inode-map.c	/^int btrfs_find_free_objectid(struct btrfs_root *root, u64 *objectid)$/;"	f
btrfs_find_highest_objectid	inode-map.c	/^int btrfs_find_highest_objectid(struct btrfs_root *root, u64 *objectid)$/;"	f
btrfs_find_ino_for_alloc	free-space-cache.c	/^u64 btrfs_find_ino_for_alloc(struct btrfs_root *fs_root)$/;"	f
btrfs_find_item	ctree.c	/^int btrfs_find_item(struct btrfs_root *fs_root, struct btrfs_path *path,$/;"	f
btrfs_find_name_in_ext_backref	inode-item.c	/^int btrfs_find_name_in_ext_backref(struct btrfs_path *path, u64 ref_objectid,$/;"	f
btrfs_find_new_delalloc_bytes	file.c	/^static int btrfs_find_new_delalloc_bytes(struct btrfs_inode *inode,$/;"	f	file:
btrfs_find_next_active_device	volumes.c	/^struct btrfs_device *btrfs_find_next_active_device(struct btrfs_fs_devices *fs_devs,$/;"	f
btrfs_find_next_key	ctree.c	/^int btrfs_find_next_key(struct btrfs_root *root, struct btrfs_path *path,$/;"	f
btrfs_find_one_extref	backref.c	/^int btrfs_find_one_extref(struct btrfs_root *root, u64 inode_objectid,$/;"	f
btrfs_find_ordered_sum	ordered-data.c	/^int btrfs_find_ordered_sum(struct inode *inode, u64 offset, u64 disk_bytenr,$/;"	f
btrfs_find_orphan_roots	root-tree.c	/^int btrfs_find_orphan_roots(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_find_root	root-tree.c	/^int btrfs_find_root(struct btrfs_root *root, const struct btrfs_key *search_key,$/;"	f
btrfs_find_space_cluster	free-space-cache.c	/^int btrfs_find_space_cluster(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_find_space_for_alloc	free-space-cache.c	/^u64 btrfs_find_space_for_alloc(struct btrfs_block_group_cache *block_group,$/;"	f
btrfs_finish_chunk_alloc	volumes.c	/^int btrfs_finish_chunk_alloc(struct btrfs_trans_handle *trans,$/;"	f
btrfs_finish_extent_commit	extent-tree.c	/^int btrfs_finish_extent_commit(struct btrfs_trans_handle *trans,$/;"	f
btrfs_finish_ordered_io	inode.c	/^static int btrfs_finish_ordered_io(struct btrfs_ordered_extent *ordered_extent)$/;"	f	file:
btrfs_finish_sprout	volumes.c	/^static int btrfs_finish_sprout(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_first_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_first_delayed_node($/;"	f	file:
btrfs_first_prepared_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_first_prepared_delayed_node($/;"	f	file:
btrfs_flags_to_ioctl	ioctl.c	/^static unsigned int btrfs_flags_to_ioctl(unsigned int flags)$/;"	f	file:
btrfs_flush_state	ctree.h	/^enum btrfs_flush_state {$/;"	g
btrfs_force_chunk_alloc	extent-tree.c	/^int btrfs_force_chunk_alloc(struct btrfs_trans_handle *trans,$/;"	f
btrfs_free_and_pin_reserved_extent	extent-tree.c	/^int btrfs_free_and_pin_reserved_extent(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_free_block_groups	extent-tree.c	/^int btrfs_free_block_groups(struct btrfs_fs_info *info)$/;"	f
btrfs_free_block_rsv	extent-tree.c	/^void btrfs_free_block_rsv(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_free_chunk	volumes.c	/^static int btrfs_free_chunk(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_free_cluster	ctree.h	/^struct btrfs_free_cluster {$/;"	s
btrfs_free_delayed_extent_op	delayed-ref.h	/^btrfs_free_delayed_extent_op(struct btrfs_delayed_extent_op *op)$/;"	f
btrfs_free_dev_extent	volumes.c	/^static int btrfs_free_dev_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_free_dummy_block_group	tests/btrfs-tests.c	/^void btrfs_free_dummy_block_group(struct btrfs_block_group_cache *cache)$/;"	f
btrfs_free_dummy_fs_info	tests/btrfs-tests.c	/^void btrfs_free_dummy_fs_info(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_free_dummy_root	tests/btrfs-tests.c	/^void btrfs_free_dummy_root(struct btrfs_root *root)$/;"	f
btrfs_free_extent	extent-tree.c	/^int btrfs_free_extent(struct btrfs_trans_handle *trans,$/;"	f
btrfs_free_fs_root	disk-io.c	/^void btrfs_free_fs_root(struct btrfs_root *root)$/;"	f
btrfs_free_fs_roots	disk-io.c	/^void btrfs_free_fs_roots(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_free_io_failure_record	extent_io.c	/^void btrfs_free_io_failure_record(struct btrfs_inode *inode, u64 start, u64 end)$/;"	f
btrfs_free_log	tree-log.c	/^int btrfs_free_log(struct btrfs_trans_handle *trans, struct btrfs_root *root)$/;"	f
btrfs_free_log_root_tree	tree-log.c	/^int btrfs_free_log_root_tree(struct btrfs_trans_handle *trans,$/;"	f
btrfs_free_logged_extents	ordered-data.c	/^void btrfs_free_logged_extents(struct btrfs_root *log, u64 transid)$/;"	f
btrfs_free_path	ctree.c	/^void btrfs_free_path(struct btrfs_path *p)$/;"	f
btrfs_free_qgroup_config	qgroup.c	/^void btrfs_free_qgroup_config(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_free_reserved_bytes	extent-tree.c	/^static int btrfs_free_reserved_bytes(struct btrfs_block_group_cache *cache,$/;"	f	file:
btrfs_free_reserved_data_space	extent-tree.c	/^void btrfs_free_reserved_data_space(struct inode *inode,$/;"	f
btrfs_free_reserved_data_space_noquota	extent-tree.c	/^void btrfs_free_reserved_data_space_noquota(struct inode *inode, u64 start,$/;"	f
btrfs_free_reserved_extent	extent-tree.c	/^int btrfs_free_reserved_extent(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_free_space	free-space-cache.h	/^struct btrfs_free_space {$/;"	s
btrfs_free_space_cachep	inode.c	/^struct kmem_cache *btrfs_free_space_cachep;$/;"	v	typeref:struct:kmem_cache
btrfs_free_space_ctl	free-space-cache.h	/^struct btrfs_free_space_ctl {$/;"	s
btrfs_free_space_key	ctree.h	/^static inline void btrfs_free_space_key(const struct extent_buffer *eb,$/;"	f
btrfs_free_space_op	free-space-cache.h	/^struct btrfs_free_space_op {$/;"	s
btrfs_free_stale_device	volumes.c	/^void btrfs_free_stale_device(struct btrfs_device *cur_dev)$/;"	f
btrfs_free_stripe_hash_table	raid56.c	/^void btrfs_free_stripe_hash_table(struct btrfs_fs_info *info)$/;"	f
btrfs_free_subvolume_writers	disk-io.c	/^btrfs_free_subvolume_writers(struct btrfs_subvolume_writers *writers)$/;"	f	file:
btrfs_free_tree_block	extent-tree.c	/^void btrfs_free_tree_block(struct btrfs_trans_handle *trans,$/;"	f
btrfs_freeze	super.c	/^static int btrfs_freeze(struct super_block *sb)$/;"	f	file:
btrfs_fs_closing	ctree.h	/^static inline int btrfs_fs_closing(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_fs_compat_ro	ctree.h	3624;"	d
btrfs_fs_devices	volumes.h	/^struct btrfs_fs_devices {$/;"	s
btrfs_fs_incompat	ctree.h	3566;"	d
btrfs_fs_info	ctree.h	/^struct btrfs_fs_info {$/;"	s
btrfs_fs_type	super.c	/^static struct file_system_type btrfs_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
btrfs_fs_type	super.c	/^static struct file_system_type btrfs_fs_type;$/;"	v	typeref:struct:file_system_type	file:
btrfs_full_stripe_len	volumes.c	/^unsigned long btrfs_full_stripe_len(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_full_stripe_locks_tree	ctree.h	/^struct btrfs_full_stripe_locks_tree {$/;"	s
btrfs_func_t	async-thread.h	/^typedef void (*btrfs_func_t)(struct btrfs_work *arg);$/;"	t
btrfs_get_acl	acl.c	/^struct posix_acl *btrfs_get_acl(struct inode *inode, int type)$/;"	f
btrfs_get_acl	ctree.h	3641;"	d
btrfs_get_bbio	volumes.c	/^void btrfs_get_bbio(struct btrfs_bio *bbio)$/;"	f
btrfs_get_bdev_and_sb	volumes.c	/^btrfs_get_bdev_and_sb(const char *device_path, fmode_t flags, void *holder,$/;"	f	file:
btrfs_get_block_group	extent-tree.c	/^void btrfs_get_block_group(struct btrfs_block_group_cache *cache)$/;"	f
btrfs_get_block_group_info	ioctl.c	/^void btrfs_get_block_group_info(struct list_head *groups_list,$/;"	f
btrfs_get_block_group_trimming	free-space-cache.c	/^void btrfs_get_block_group_trimming(struct btrfs_block_group_cache *cache)$/;"	f
btrfs_get_blocks_direct	inode.c	/^static int btrfs_get_blocks_direct(struct inode *inode, sector_t iblock,$/;"	f	file:
btrfs_get_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_get_delayed_node($/;"	f	file:
btrfs_get_dentry	export.c	/^static struct dentry *btrfs_get_dentry(struct super_block *sb, u64 objectid,$/;"	f	file:
btrfs_get_dev_stats	volumes.c	/^int btrfs_get_dev_stats(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_get_extent	inode.c	/^struct extent_map *btrfs_get_extent(struct btrfs_inode *inode,$/;"	f
btrfs_get_extent_fiemap	inode.c	/^struct extent_map *btrfs_get_extent_fiemap(struct btrfs_inode *inode,$/;"	f
btrfs_get_extent_inline_ref_type	extent-tree.c	/^int btrfs_get_extent_inline_ref_type(const struct extent_buffer *eb,$/;"	f
btrfs_get_fs_root	disk-io.c	/^struct btrfs_root *btrfs_get_fs_root(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_get_fs_uuids	volumes.c	/^struct list_head *btrfs_get_fs_uuids(void)$/;"	f
btrfs_get_io_failure_record	extent_io.c	/^int btrfs_get_io_failure_record(struct inode *inode, u64 start, u64 end,$/;"	f
btrfs_get_logged_extents	ordered-data.c	/^void btrfs_get_logged_extents(struct btrfs_inode *inode,$/;"	f
btrfs_get_name	export.c	/^static int btrfs_get_name(struct dentry *parent, char *name,$/;"	f	file:
btrfs_get_num_tolerated_disk_barrier_failures	disk-io.c	/^int btrfs_get_num_tolerated_disk_barrier_failures(u64 flags)$/;"	f
btrfs_get_or_create_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_get_or_create_delayed_node($/;"	f	file:
btrfs_get_parent	export.c	/^static struct dentry *btrfs_get_parent(struct dentry *child)$/;"	f	file:
btrfs_get_tree_mod_seq	ctree.c	/^u64 btrfs_get_tree_mod_seq(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_getattr	inode.c	/^static int btrfs_getattr(const struct path *path, struct kstat *stat,$/;"	f	file:
btrfs_grab_block_group	extent-tree.c	/^btrfs_grab_block_group(struct btrfs_block_group_cache *cache,$/;"	f	file:
btrfs_grab_fs_root	disk-io.h	/^static inline struct btrfs_root *btrfs_grab_fs_root(struct btrfs_root *root)$/;"	f
btrfs_grow_device	volumes.c	/^int btrfs_grow_device(struct btrfs_trans_handle *trans,$/;"	f
btrfs_handle_error	super.c	/^static void btrfs_handle_error(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_handle_fs_error	ctree.h	3495;"	d
btrfs_hash_exit	hash.c	/^void btrfs_hash_exit(void)$/;"	f
btrfs_hash_init	hash.c	/^int __init btrfs_hash_init(void)$/;"	f
btrfs_have_ordered_extents_in_range	ordered-data.c	/^bool btrfs_have_ordered_extents_in_range(struct inode *inode,$/;"	f
btrfs_header	ctree.h	/^struct btrfs_header {$/;"	s
btrfs_header_backref_rev	ctree.h	/^static inline int btrfs_header_backref_rev(const struct extent_buffer *eb)$/;"	f
btrfs_header_chunk_tree_uuid	ctree.h	/^static inline unsigned long btrfs_header_chunk_tree_uuid(const struct extent_buffer *eb)$/;"	f
btrfs_header_flag	ctree.h	/^static inline int btrfs_header_flag(const struct extent_buffer *eb, u64 flag)$/;"	f
btrfs_header_fsid	ctree.h	/^static inline unsigned long btrfs_header_fsid(void)$/;"	f
btrfs_i_callback	inode.c	/^static void btrfs_i_callback(struct rcu_head *head)$/;"	f	file:
btrfs_i_size_write	btrfs_inode.h	/^static inline void btrfs_i_size_write(struct btrfs_inode *inode, u64 size)$/;"	f
btrfs_iget	inode.c	/^struct inode *btrfs_iget(struct super_block *s, struct btrfs_key *location,$/;"	f
btrfs_iget_args	inode.c	/^struct btrfs_iget_args {$/;"	s	file:
btrfs_iget_locked	inode.c	/^static struct inode *btrfs_iget_locked(struct super_block *s,$/;"	f	file:
btrfs_inc_block_group_reservations	extent-tree.c	/^btrfs_inc_block_group_reservations(struct btrfs_block_group_cache *bg)$/;"	f	file:
btrfs_inc_block_group_ro	extent-tree.c	/^int btrfs_inc_block_group_ro(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_inc_extent_ref	extent-tree.c	/^int btrfs_inc_extent_ref(struct btrfs_trans_handle *trans,$/;"	f
btrfs_inc_nocow_writers	extent-tree.c	/^bool btrfs_inc_nocow_writers(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f
btrfs_inc_ref	extent-tree.c	/^int btrfs_inc_ref(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f
btrfs_inc_tree_mod_seq	ctree.c	/^static inline u64 btrfs_inc_tree_mod_seq(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_info	ctree.h	3317;"	d
btrfs_info_in_rcu	ctree.h	3335;"	d
btrfs_info_rl	ctree.h	3371;"	d
btrfs_info_rl_in_rcu	ctree.h	3353;"	d
btrfs_inherit_iflags	inode.c	/^static void btrfs_inherit_iflags(struct inode *inode, struct inode *dir)$/;"	f	file:
btrfs_init_acl	acl.c	/^int btrfs_init_acl(struct btrfs_trans_handle *trans,$/;"	f
btrfs_init_acl	ctree.h	/^static inline int btrfs_init_acl(struct btrfs_trans_handle *trans,$/;"	f
btrfs_init_async_reclaim_work	extent-tree.c	/^void btrfs_init_async_reclaim_work(struct work_struct *work)$/;"	f
btrfs_init_balance	disk-io.c	/^static void btrfs_init_balance(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_init_block_rsv	extent-tree.c	/^void btrfs_init_block_rsv(struct btrfs_block_rsv *rsv, unsigned short type)$/;"	f
btrfs_init_btree_inode	disk-io.c	/^static void btrfs_init_btree_inode(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_init_cachep	inode.c	/^int btrfs_init_cachep(void)$/;"	f
btrfs_init_compress	compression.c	/^void __init btrfs_init_compress(void)$/;"	f
btrfs_init_debugfs	sysfs.c	/^static int btrfs_init_debugfs(void)$/;"	f	file:
btrfs_init_delayed_node	delayed-inode.c	/^static inline void btrfs_init_delayed_node($/;"	f	file:
btrfs_init_delayed_root	delayed-inode.h	/^static inline void btrfs_init_delayed_root($/;"	f
btrfs_init_dev_replace	dev-replace.c	/^int btrfs_init_dev_replace(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_init_dev_replace_locks	disk-io.c	/^static void btrfs_init_dev_replace_locks(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_init_dev_replace_tgtdev	volumes.c	/^int btrfs_init_dev_replace_tgtdev(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_init_dev_replace_tgtdev_for_resume	volumes.c	/^void btrfs_init_dev_replace_tgtdev_for_resume(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_init_dev_stats	volumes.c	/^int btrfs_init_dev_stats(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_init_devices_late	volumes.c	/^void btrfs_init_devices_late(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_init_dummy_trans	tests/btrfs-tests.c	/^void btrfs_init_dummy_trans(struct btrfs_trans_handle *trans)$/;"	f
btrfs_init_free_cluster	free-space-cache.c	/^void btrfs_init_free_cluster(struct btrfs_free_cluster *cluster)$/;"	f
btrfs_init_free_ino_ctl	inode-map.c	/^void btrfs_init_free_ino_ctl(struct btrfs_root *root)$/;"	f
btrfs_init_free_space_ctl	free-space-cache.c	/^void btrfs_init_free_space_ctl(struct btrfs_block_group_cache *block_group)$/;"	f
btrfs_init_fs_root	disk-io.c	/^int btrfs_init_fs_root(struct btrfs_root *root)$/;"	f
btrfs_init_full_stripe_locks_tree	ctree.h	/^static inline void btrfs_init_full_stripe_locks_tree($/;"	f
btrfs_init_inode_security	inode.c	/^static int btrfs_init_inode_security(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_init_lockdep	disk-io.c	/^void __init btrfs_init_lockdep(void)$/;"	f
btrfs_init_lockdep	disk-io.h	/^static inline void btrfs_init_lockdep(void)$/;"	f
btrfs_init_locked_inode	inode.c	/^static int btrfs_init_locked_inode(struct inode *inode, void *p)$/;"	f	file:
btrfs_init_log_ctx	tree-log.h	/^static inline void btrfs_init_log_ctx(struct btrfs_log_ctx *ctx,$/;"	f
btrfs_init_log_root_tree	disk-io.c	/^int btrfs_init_log_root_tree(struct btrfs_trans_handle *trans,$/;"	f
btrfs_init_map_token	ctree.h	/^static inline void btrfs_init_map_token (struct btrfs_map_token *token)$/;"	f
btrfs_init_new_buffer	extent-tree.c	/^btrfs_init_new_buffer(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f	file:
btrfs_init_new_device	volumes.c	/^int btrfs_init_new_device(struct btrfs_fs_info *fs_info, const char *device_path)$/;"	f
btrfs_init_qgroup	disk-io.c	/^static void btrfs_init_qgroup(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_init_reloc_root	relocation.c	/^int btrfs_init_reloc_root(struct btrfs_trans_handle *trans,$/;"	f
btrfs_init_scrub	disk-io.c	/^static void btrfs_init_scrub(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_init_space_info	extent-tree.c	/^int btrfs_init_space_info(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_init_sysfs	sysfs.c	/^int btrfs_init_sysfs(void)$/;"	f
btrfs_init_test_fs	tests/btrfs-tests.c	/^static int btrfs_init_test_fs(void)$/;"	f	file:
btrfs_init_work	async-thread.c	/^void btrfs_init_work(struct btrfs_work *work, btrfs_work_func_t uniq_func,$/;"	f
btrfs_init_workqueues	disk-io.c	/^static int btrfs_init_workqueues(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_initxattrs	xattr.c	/^static int btrfs_initxattrs(struct inode *inode,$/;"	f	file:
btrfs_inline_ref_type	ctree.h	/^enum btrfs_inline_ref_type {$/;"	g
btrfs_ino	btrfs_inode.h	/^static inline u64 btrfs_ino(const struct btrfs_inode *inode)$/;"	f
btrfs_inode	btrfs_inode.h	/^struct btrfs_inode {$/;"	s
btrfs_inode_block_unlocked_dio	btrfs_inode.h	/^static inline void btrfs_inode_block_unlocked_dio(struct btrfs_inode *inode)$/;"	f
btrfs_inode_by_name	inode.c	/^static int btrfs_inode_by_name(struct inode *dir, struct dentry *dentry,$/;"	f	file:
btrfs_inode_cachep	inode.c	/^static struct kmem_cache *btrfs_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
btrfs_inode_defrag_cachep	file.c	/^static struct kmem_cache *btrfs_inode_defrag_cachep;$/;"	v	typeref:struct:kmem_cache	file:
btrfs_inode_delayed_dir_index_count	delayed-inode.c	/^int btrfs_inode_delayed_dir_index_count(struct btrfs_inode *inode)$/;"	f
btrfs_inode_hash	btrfs_inode.h	/^static inline unsigned long btrfs_inode_hash(u64 objectid,$/;"	f
btrfs_inode_in_log	btrfs_inode.h	/^static inline int btrfs_inode_in_log(struct btrfs_inode *inode, u64 generation)$/;"	f
btrfs_inode_inherit_props	props.c	/^int btrfs_inode_inherit_props(struct btrfs_trans_handle *trans,$/;"	f
btrfs_inode_resume_unlocked_dio	btrfs_inode.h	/^static inline void btrfs_inode_resume_unlocked_dio(struct btrfs_inode *inode)$/;"	f
btrfs_inode_sectorsize	ctree.h	/^static inline u32 btrfs_inode_sectorsize(const struct inode *inode)$/;"	f
btrfs_inode_type	inode.c	/^static inline u8 btrfs_inode_type(struct inode *inode)$/;"	f	file:
btrfs_insert_delayed_dir_index	delayed-inode.c	/^int btrfs_insert_delayed_dir_index(struct btrfs_trans_handle *trans,$/;"	f
btrfs_insert_delayed_item	delayed-inode.c	/^static int btrfs_insert_delayed_item(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_insert_delayed_items	delayed-inode.c	/^static int btrfs_insert_delayed_items(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_insert_dir_item	dir-item.c	/^int btrfs_insert_dir_item(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f
btrfs_insert_empty_inode	inode-item.c	/^int btrfs_insert_empty_inode(struct btrfs_trans_handle *trans,$/;"	f
btrfs_insert_empty_item	ctree.h	/^static inline int btrfs_insert_empty_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_insert_empty_items	ctree.c	/^int btrfs_insert_empty_items(struct btrfs_trans_handle *trans,$/;"	f
btrfs_insert_file_extent	file-item.c	/^int btrfs_insert_file_extent(struct btrfs_trans_handle *trans,$/;"	f
btrfs_insert_fs_root	disk-io.c	/^int btrfs_insert_fs_root(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_insert_inode_extref	inode-item.c	/^static int btrfs_insert_inode_extref(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_insert_inode_hash	btrfs_inode.h	/^static inline void btrfs_insert_inode_hash(struct inode *inode)$/;"	f
btrfs_insert_inode_locked	inode.c	/^static int btrfs_insert_inode_locked(struct inode *inode)$/;"	f	file:
btrfs_insert_inode_ref	inode-item.c	/^int btrfs_insert_inode_ref(struct btrfs_trans_handle *trans,$/;"	f
btrfs_insert_item	ctree.c	/^int btrfs_insert_item(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f
btrfs_insert_orphan_item	orphan.c	/^int btrfs_insert_orphan_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_insert_root	root-tree.c	/^int btrfs_insert_root(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f
btrfs_insert_xattr_item	dir-item.c	/^int btrfs_insert_xattr_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_interface_exit	super.c	/^static void btrfs_interface_exit(void)$/;"	f	file:
btrfs_interface_init	super.c	/^static int btrfs_interface_init(void)$/;"	f	file:
btrfs_invalidate_inodes	inode.c	/^void btrfs_invalidate_inodes(struct btrfs_root *root)$/;"	f
btrfs_invalidatepage	inode.c	/^static void btrfs_invalidatepage(struct page *page, unsigned int offset,$/;"	f	file:
btrfs_io_bio	volumes.h	/^static inline struct btrfs_io_bio *btrfs_io_bio(struct bio *bio)$/;"	f
btrfs_io_bio	volumes.h	/^struct btrfs_io_bio {$/;"	s
btrfs_io_bio_alloc	extent_io.c	/^struct bio *btrfs_io_bio_alloc(unsigned int nr_iovecs)$/;"	f
btrfs_io_bio_end_io_t	volumes.h	/^typedef void (btrfs_io_bio_end_io_t) (struct btrfs_io_bio *bio, int err);$/;"	t
btrfs_io_bio_endio_readpage	file-item.c	/^static void btrfs_io_bio_endio_readpage(struct btrfs_io_bio *bio, int err)$/;"	f	file:
btrfs_io_bio_init	extent_io.c	/^static inline void btrfs_io_bio_init(struct btrfs_io_bio *btrfs_bio)$/;"	f	file:
btrfs_io_ctl	ctree.h	/^struct btrfs_io_ctl {$/;"	s
btrfs_ioctl	ioctl.c	/^long btrfs_ioctl(struct file *file, unsigned int$/;"	f
btrfs_ioctl_add_dev	ioctl.c	/^static long btrfs_ioctl_add_dev(struct btrfs_fs_info *fs_info, void __user *arg)$/;"	f	file:
btrfs_ioctl_balance	ioctl.c	/^static long btrfs_ioctl_balance(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_balance_ctl	ioctl.c	/^static long btrfs_ioctl_balance_ctl(struct btrfs_fs_info *fs_info, int cmd)$/;"	f	file:
btrfs_ioctl_balance_progress	ioctl.c	/^static long btrfs_ioctl_balance_progress(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_default_subvol	ioctl.c	/^static long btrfs_ioctl_default_subvol(struct file *file, void __user *argp)$/;"	f	file:
btrfs_ioctl_defrag	ioctl.c	/^static int btrfs_ioctl_defrag(struct file *file, void __user *argp)$/;"	f	file:
btrfs_ioctl_dev_info	ioctl.c	/^static long btrfs_ioctl_dev_info(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_dev_replace	ioctl.c	/^static long btrfs_ioctl_dev_replace(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_fitrim	ioctl.c	/^static noinline int btrfs_ioctl_fitrim(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_fs_info	ioctl.c	/^static long btrfs_ioctl_fs_info(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_get_dev_stats	ioctl.c	/^static long btrfs_ioctl_get_dev_stats(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_get_features	ioctl.c	/^static int btrfs_ioctl_get_features(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_get_fslabel	ioctl.c	/^static int btrfs_ioctl_get_fslabel(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_get_supported_features	ioctl.c	/^int btrfs_ioctl_get_supported_features(void __user *arg)$/;"	f
btrfs_ioctl_getflags	ioctl.c	/^static int btrfs_ioctl_getflags(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_getversion	ioctl.c	/^static int btrfs_ioctl_getversion(struct file *file, int __user *arg)$/;"	f	file:
btrfs_ioctl_ino_lookup	ioctl.c	/^static noinline int btrfs_ioctl_ino_lookup(struct file *file,$/;"	f	file:
btrfs_ioctl_ino_to_path	ioctl.c	/^static long btrfs_ioctl_ino_to_path(struct btrfs_root *root, void __user *arg)$/;"	f	file:
btrfs_ioctl_logical_to_ino	ioctl.c	/^static long btrfs_ioctl_logical_to_ino(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_qgroup_assign	ioctl.c	/^static long btrfs_ioctl_qgroup_assign(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_qgroup_create	ioctl.c	/^static long btrfs_ioctl_qgroup_create(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_qgroup_limit	ioctl.c	/^static long btrfs_ioctl_qgroup_limit(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_quota_ctl	ioctl.c	/^static long btrfs_ioctl_quota_ctl(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_quota_rescan	ioctl.c	/^static long btrfs_ioctl_quota_rescan(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_quota_rescan_status	ioctl.c	/^static long btrfs_ioctl_quota_rescan_status(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_quota_rescan_wait	ioctl.c	/^static long btrfs_ioctl_quota_rescan_wait(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_received_subvol_args_32	ioctl.c	/^struct btrfs_ioctl_received_subvol_args_32 {$/;"	s	file:
btrfs_ioctl_resize	ioctl.c	/^static noinline int btrfs_ioctl_resize(struct file *file,$/;"	f	file:
btrfs_ioctl_rm_dev	ioctl.c	/^static long btrfs_ioctl_rm_dev(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_rm_dev_v2	ioctl.c	/^static long btrfs_ioctl_rm_dev_v2(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_scrub	ioctl.c	/^static long btrfs_ioctl_scrub(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_scrub_cancel	ioctl.c	/^static long btrfs_ioctl_scrub_cancel(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_ioctl_scrub_progress	ioctl.c	/^static long btrfs_ioctl_scrub_progress(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_send	send.c	/^long btrfs_ioctl_send(struct file *mnt_file, void __user *arg_)$/;"	f
btrfs_ioctl_set_features	ioctl.c	/^static int btrfs_ioctl_set_features(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_set_fslabel	ioctl.c	/^static int btrfs_ioctl_set_fslabel(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_set_received_subvol	ioctl.c	/^static long btrfs_ioctl_set_received_subvol(struct file *file,$/;"	f	file:
btrfs_ioctl_set_received_subvol_32	ioctl.c	/^static long btrfs_ioctl_set_received_subvol_32(struct file *file,$/;"	f	file:
btrfs_ioctl_setflags	ioctl.c	/^static int btrfs_ioctl_setflags(struct file *file, void __user *arg)$/;"	f	file:
btrfs_ioctl_snap_create	ioctl.c	/^static noinline int btrfs_ioctl_snap_create(struct file *file,$/;"	f	file:
btrfs_ioctl_snap_create_transid	ioctl.c	/^static noinline int btrfs_ioctl_snap_create_transid(struct file *file,$/;"	f	file:
btrfs_ioctl_snap_create_v2	ioctl.c	/^static noinline int btrfs_ioctl_snap_create_v2(struct file *file,$/;"	f	file:
btrfs_ioctl_snap_destroy	ioctl.c	/^static noinline int btrfs_ioctl_snap_destroy(struct file *file,$/;"	f	file:
btrfs_ioctl_space_info	ioctl.c	/^static long btrfs_ioctl_space_info(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_ioctl_start_sync	ioctl.c	/^static noinline long btrfs_ioctl_start_sync(struct btrfs_root *root,$/;"	f	file:
btrfs_ioctl_subvol_getflags	ioctl.c	/^static noinline int btrfs_ioctl_subvol_getflags(struct file *file,$/;"	f	file:
btrfs_ioctl_subvol_setflags	ioctl.c	/^static noinline int btrfs_ioctl_subvol_setflags(struct file *file,$/;"	f	file:
btrfs_ioctl_timespec_32	ioctl.c	/^struct btrfs_ioctl_timespec_32 {$/;"	s	file:
btrfs_ioctl_trans_end	ioctl.c	/^long btrfs_ioctl_trans_end(struct file *file)$/;"	f
btrfs_ioctl_trans_start	ioctl.c	/^static long btrfs_ioctl_trans_start(struct file *file)$/;"	f	file:
btrfs_ioctl_tree_search	ioctl.c	/^static noinline int btrfs_ioctl_tree_search(struct file *file,$/;"	f	file:
btrfs_ioctl_tree_search_v2	ioctl.c	/^static noinline int btrfs_ioctl_tree_search_v2(struct file *file,$/;"	f	file:
btrfs_ioctl_wait_sync	ioctl.c	/^static noinline long btrfs_ioctl_wait_sync(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_is_continuous_delayed_item	delayed-inode.c	/^static inline int btrfs_is_continuous_delayed_item($/;"	f	file:
btrfs_is_empty_uuid	ioctl.c	/^int btrfs_is_empty_uuid(u8 *uuid)$/;"	f
btrfs_is_free_space_inode	btrfs_inode.h	/^static inline bool btrfs_is_free_space_inode(struct btrfs_inode *inode)$/;"	f
btrfs_is_leaf	ctree.h	/^static inline int btrfs_is_leaf(const struct extent_buffer *eb)$/;"	f
btrfs_is_name_len_valid	dir-item.c	/^bool btrfs_is_name_len_valid(struct extent_buffer *leaf, int slot,$/;"	f
btrfs_is_parity_mirror	volumes.c	/^int btrfs_is_parity_mirror(struct btrfs_fs_info *fs_info, u64 logical, u64 len)$/;"	f
btrfs_is_testing	ctree.h	/^static inline int btrfs_is_testing(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_issue_discard	extent-tree.c	/^static int btrfs_issue_discard(struct block_device *bdev, u64 start, u64 len,$/;"	f	file:
btrfs_item	ctree.h	/^struct btrfs_item {$/;"	s
btrfs_item_end	ctree.h	/^static inline u32 btrfs_item_end(const struct extent_buffer *eb,$/;"	f
btrfs_item_end_nr	ctree.h	/^static inline u32 btrfs_item_end_nr(const struct extent_buffer *eb, int nr)$/;"	f
btrfs_item_key	ctree.h	/^static inline void btrfs_item_key(const struct extent_buffer *eb,$/;"	f
btrfs_item_key_to_cpu	ctree.h	/^static inline void btrfs_item_key_to_cpu(const struct extent_buffer *eb,$/;"	f
btrfs_item_nr	ctree.h	/^static inline struct btrfs_item *btrfs_item_nr(int nr)$/;"	f
btrfs_item_nr_offset	ctree.h	/^static inline unsigned long btrfs_item_nr_offset(int nr)$/;"	f
btrfs_item_offset_nr	ctree.h	/^static inline u32 btrfs_item_offset_nr(const struct extent_buffer *eb, int nr)$/;"	f
btrfs_item_ptr	ctree.h	2548;"	d
btrfs_item_ptr_offset	ctree.h	2552;"	d
btrfs_item_size_nr	ctree.h	/^static inline u32 btrfs_item_size_nr(const struct extent_buffer *eb, int nr)$/;"	f
btrfs_join_transaction	transaction.c	/^struct btrfs_trans_handle *btrfs_join_transaction(struct btrfs_root *root)$/;"	f
btrfs_join_transaction_nolock	transaction.c	/^struct btrfs_trans_handle *btrfs_join_transaction_nolock(struct btrfs_root *root)$/;"	f
btrfs_key_ptr	ctree.h	/^struct btrfs_key_ptr {$/;"	s
btrfs_key_type	ctree.h	/^static inline u8 btrfs_key_type(const struct btrfs_key *key)$/;"	f
btrfs_kill_all_delayed_nodes	delayed-inode.c	/^void btrfs_kill_all_delayed_nodes(struct btrfs_root *root)$/;"	f
btrfs_kill_delayed_inode_items	delayed-inode.c	/^void btrfs_kill_delayed_inode_items(struct btrfs_inode *inode)$/;"	f
btrfs_kill_super	super.c	/^static void btrfs_kill_super(struct super_block *sb)$/;"	f	file:
btrfs_kobject_uevent	volumes.c	/^static void btrfs_kobject_uevent(struct block_device *bdev,$/;"	f	file:
btrfs_kset	sysfs.c	/^static struct kset *btrfs_kset;$/;"	v	typeref:struct:kset	file:
btrfs_ktype	sysfs.c	/^static struct kobj_type btrfs_ktype = {$/;"	v	typeref:struct:kobj_type	file:
btrfs_label_show	sysfs.c	/^static ssize_t btrfs_label_show(struct kobject *kobj,$/;"	f	file:
btrfs_label_store	sysfs.c	/^static ssize_t btrfs_label_store(struct kobject *kobj,$/;"	f	file:
btrfs_leaf	ctree.h	/^struct btrfs_leaf {$/;"	s
btrfs_leaf_free_space	ctree.c	/^noinline int btrfs_leaf_free_space(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_leak_debug_add	extent_io.c	/^void btrfs_leak_debug_add(struct list_head *new, struct list_head *head)$/;"	f	file:
btrfs_leak_debug_add	extent_io.c	95;"	d	file:
btrfs_leak_debug_check	extent_io.c	/^void btrfs_leak_debug_check(void)$/;"	f	file:
btrfs_leak_debug_check	extent_io.c	97;"	d	file:
btrfs_leak_debug_del	extent_io.c	/^void btrfs_leak_debug_del(struct list_head *entry)$/;"	f	file:
btrfs_leak_debug_del	extent_io.c	96;"	d	file:
btrfs_limit_qgroup	qgroup.c	/^int btrfs_limit_qgroup(struct btrfs_trans_handle *trans,$/;"	f
btrfs_link	inode.c	/^static int btrfs_link(struct dentry *old_dentry, struct inode *dir,$/;"	f	file:
btrfs_listxattr	xattr.c	/^ssize_t btrfs_listxattr(struct dentry *dentry, char *buffer, size_t size)$/;"	f
btrfs_load_inode_props	props.c	/^int btrfs_load_inode_props(struct inode *inode, struct btrfs_path *path)$/;"	f
btrfs_lock_block_group	extent-tree.c	/^btrfs_lock_block_group(struct btrfs_block_group_cache *cache,$/;"	f	file:
btrfs_lock_cluster	extent-tree.c	/^btrfs_lock_cluster(struct btrfs_block_group_cache *block_group,$/;"	f	file:
btrfs_lock_root_node	ctree.c	/^struct extent_buffer *btrfs_lock_root_node(struct btrfs_root *root)$/;"	f
btrfs_lockdep_keyset	disk-io.c	/^static struct btrfs_lockdep_keyset {$/;"	s	file:
btrfs_lockdep_keysets	disk-io.c	/^} btrfs_lockdep_keysets[] = {$/;"	v	typeref:struct:btrfs_lockdep_keyset	file:
btrfs_log_all_parents	tree-log.c	/^static int btrfs_log_all_parents(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_log_all_xattrs	tree-log.c	/^static int btrfs_log_all_xattrs(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_log_changed_extents	tree-log.c	/^static int btrfs_log_changed_extents(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_log_ctx	tree-log.h	/^struct btrfs_log_ctx {$/;"	s
btrfs_log_dentry_safe	tree-log.c	/^int btrfs_log_dentry_safe(struct btrfs_trans_handle *trans,$/;"	f
btrfs_log_inode	tree-log.c	/^static int btrfs_log_inode(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_log_inode_parent	tree-log.c	/^static int btrfs_log_inode_parent(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_log_new_name	tree-log.c	/^int btrfs_log_new_name(struct btrfs_trans_handle *trans,$/;"	f
btrfs_log_trailing_hole	tree-log.c	/^static int btrfs_log_trailing_hole(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_lookup	inode.c	/^static struct dentry *btrfs_lookup(struct inode *dir, struct dentry *dentry,$/;"	f	file:
btrfs_lookup_and_bind_dio_csum	inode.c	/^static inline blk_status_t btrfs_lookup_and_bind_dio_csum(struct inode *inode,$/;"	f	file:
btrfs_lookup_bio_sums	file-item.c	/^blk_status_t btrfs_lookup_bio_sums(struct inode *inode, struct bio *bio, u32 *dst)$/;"	f
btrfs_lookup_bio_sums_dio	file-item.c	/^blk_status_t btrfs_lookup_bio_sums_dio(struct inode *inode, struct bio *bio, u64 offset)$/;"	f
btrfs_lookup_block_group	extent-tree.c	/^struct btrfs_block_group_cache *btrfs_lookup_block_group($/;"	f
btrfs_lookup_csum	file-item.c	/^btrfs_lookup_csum(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_lookup_csums_range	file-item.c	/^int btrfs_lookup_csums_range(struct btrfs_root *root, u64 start, u64 end,$/;"	f
btrfs_lookup_data_extent	extent-tree.c	/^int btrfs_lookup_data_extent(struct btrfs_fs_info *fs_info, u64 start, u64 len)$/;"	f
btrfs_lookup_dentry	inode.c	/^struct inode *btrfs_lookup_dentry(struct inode *dir, struct dentry *dentry)$/;"	f
btrfs_lookup_dir_index_item	dir-item.c	/^btrfs_lookup_dir_index_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_lookup_dir_item	dir-item.c	/^struct btrfs_dir_item *btrfs_lookup_dir_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_lookup_extent_info	extent-tree.c	/^int btrfs_lookup_extent_info(struct btrfs_trans_handle *trans,$/;"	f
btrfs_lookup_file_extent	file-item.c	/^int btrfs_lookup_file_extent(struct btrfs_trans_handle *trans,$/;"	f
btrfs_lookup_first_block_group	extent-tree.c	/^btrfs_lookup_first_block_group(struct btrfs_fs_info *info, u64 bytenr)$/;"	f	file:
btrfs_lookup_first_ordered_extent	ordered-data.c	/^btrfs_lookup_first_ordered_extent(struct inode *inode, u64 file_offset)$/;"	f
btrfs_lookup_fs_root	disk-io.c	/^struct btrfs_root *btrfs_lookup_fs_root(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_lookup_inode	inode-item.c	/^int btrfs_lookup_inode(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f
btrfs_lookup_inode_extref	inode-item.c	/^btrfs_lookup_inode_extref(struct btrfs_trans_handle *trans,$/;"	f
btrfs_lookup_ordered_extent	ordered-data.c	/^struct btrfs_ordered_extent *btrfs_lookup_ordered_extent(struct inode *inode,$/;"	f
btrfs_lookup_ordered_range	ordered-data.c	/^struct btrfs_ordered_extent *btrfs_lookup_ordered_range($/;"	f
btrfs_lookup_xattr	dir-item.c	/^struct btrfs_dir_item *btrfs_lookup_xattr(struct btrfs_trans_handle *trans,$/;"	f
btrfs_loop_type	extent-tree.c	/^enum btrfs_loop_type {$/;"	g	file:
btrfs_lzo_compress	lzo.c	/^const struct btrfs_compress_op btrfs_lzo_compress = {$/;"	v	typeref:struct:btrfs_compress_op
btrfs_make_block_group	extent-tree.c	/^int btrfs_make_block_group(struct btrfs_trans_handle *trans,$/;"	f
btrfs_map_bio	volumes.c	/^blk_status_t btrfs_map_bio(struct btrfs_fs_info *fs_info, struct bio *bio,$/;"	f
btrfs_map_block	volumes.c	/^int btrfs_map_block(struct btrfs_fs_info *fs_info, enum btrfs_map_op op,$/;"	f
btrfs_map_op	volumes.h	/^enum btrfs_map_op {$/;"	g
btrfs_map_sblock	volumes.c	/^int btrfs_map_sblock(struct btrfs_fs_info *fs_info, enum btrfs_map_op op,$/;"	f
btrfs_map_token	ctree.h	/^struct btrfs_map_token {$/;"	s
btrfs_mapping_init	volumes.c	/^void btrfs_mapping_init(struct btrfs_mapping_tree *tree)$/;"	f
btrfs_mapping_tree	ctree.h	/^struct btrfs_mapping_tree {$/;"	s
btrfs_mapping_tree_free	volumes.c	/^void btrfs_mapping_tree_free(struct btrfs_mapping_tree *tree)$/;"	f
btrfs_mark_buffer_dirty	disk-io.c	/^void btrfs_mark_buffer_dirty(struct extent_buffer *buf)$/;"	f
btrfs_mark_extent_written	file.c	/^int btrfs_mark_extent_written(struct btrfs_trans_handle *trans,$/;"	f
btrfs_mask_flags	ioctl.c	/^static inline __u32 btrfs_mask_flags(umode_t mode, __u32 flags)$/;"	f	file:
btrfs_match_dir_item_name	dir-item.c	/^struct btrfs_dir_item *btrfs_match_dir_item_name(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_may_create	ioctl.c	/^static inline int btrfs_may_create(struct inode *dir, struct dentry *child)$/;"	f	file:
btrfs_may_delete	ioctl.c	/^static int btrfs_may_delete(struct inode *dir, struct dentry *victim, int isdir)$/;"	f	file:
btrfs_merge_bio_hook	inode.c	/^int btrfs_merge_bio_hook(struct page *page, unsigned long offset,$/;"	f
btrfs_merge_delayed_refs	delayed-ref.c	/^void btrfs_merge_delayed_refs(struct btrfs_trans_handle *trans,$/;"	f
btrfs_merge_extent_hook	inode.c	/^static void btrfs_merge_extent_hook(void *private_data,$/;"	f	file:
btrfs_metadata_alloc_profile	extent-tree.c	/^u64 btrfs_metadata_alloc_profile(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_misc	super.c	/^static struct miscdevice btrfs_misc = {$/;"	v	typeref:struct:miscdevice	file:
btrfs_mixed_space_info	ctree.h	/^static inline bool btrfs_mixed_space_info(struct btrfs_space_info *space_info)$/;"	f
btrfs_mkdir	inode.c	/^static int btrfs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
btrfs_mknod	inode.c	/^static int btrfs_mknod(struct inode *dir, struct dentry *dentry,$/;"	f	file:
btrfs_mksubvol	ioctl.c	/^static noinline int btrfs_mksubvol(const struct path *parent,$/;"	f	file:
btrfs_mount	super.c	/^static struct dentry *btrfs_mount(struct file_system_type *fs_type, int flags,$/;"	f	file:
btrfs_must_commit_transaction	tree-log.c	/^static bool btrfs_must_commit_transaction(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_name_hash	hash.h	/^static inline u64 btrfs_name_hash(const char *name, int len)$/;"	f
btrfs_need_cleaner_sleep	ctree.h	/^static inline int btrfs_need_cleaner_sleep(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_need_log_full_commit	tree-log.h	/^static inline int btrfs_need_log_full_commit(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_new_extent_direct	inode.c	/^static struct extent_map *btrfs_new_extent_direct(struct inode *inode,$/;"	f	file:
btrfs_new_inode	inode.c	/^static struct inode *btrfs_new_inode(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_new_test_inode	tests/btrfs-tests.c	/^struct inode *btrfs_new_test_inode(void)$/;"	f
btrfs_next_delayed_node	delayed-inode.c	/^static struct btrfs_delayed_node *btrfs_next_delayed_node($/;"	f	file:
btrfs_next_item	ctree.h	/^static inline int btrfs_next_item(struct btrfs_root *root, struct btrfs_path *p)$/;"	f
btrfs_next_leaf	ctree.c	/^int btrfs_next_leaf(struct btrfs_root *root, struct btrfs_path *path)$/;"	f
btrfs_next_old_item	ctree.h	/^static inline int btrfs_next_old_item(struct btrfs_root *root,$/;"	f
btrfs_next_old_leaf	ctree.c	/^int btrfs_next_old_leaf(struct btrfs_root *root, struct btrfs_path *path,$/;"	f
btrfs_no_printk	ctree.h	/^void btrfs_no_printk(const struct btrfs_fs_info *fs_info, const char *fmt, ...)$/;"	f
btrfs_node	ctree.h	/^struct btrfs_node {$/;"	s
btrfs_node_blockptr	ctree.h	/^static inline u64 btrfs_node_blockptr(struct extent_buffer *eb, int nr)$/;"	f
btrfs_node_key	struct-funcs.c	/^void btrfs_node_key(const struct extent_buffer *eb,$/;"	f
btrfs_node_key_ptr_offset	ctree.h	/^static inline unsigned long btrfs_node_key_ptr_offset(int nr)$/;"	f
btrfs_node_key_to_cpu	ctree.h	/^static inline void btrfs_node_key_to_cpu(const struct extent_buffer *eb,$/;"	f
btrfs_node_ptr_generation	ctree.h	/^static inline u64 btrfs_node_ptr_generation(struct extent_buffer *eb, int nr)$/;"	f
btrfs_nodesize_show	sysfs.c	/^static ssize_t btrfs_nodesize_show(struct kobject *kobj,$/;"	f	file:
btrfs_notice	ctree.h	3315;"	d
btrfs_notice_in_rcu	ctree.h	3333;"	d
btrfs_notice_rl	ctree.h	3369;"	d
btrfs_notice_rl_in_rcu	ctree.h	3351;"	d
btrfs_num_copies	volumes.c	/^int btrfs_num_copies(struct btrfs_fs_info *fs_info, u64 logical, u64 len)$/;"	f
btrfs_old_root_level	ctree.c	/^int btrfs_old_root_level(struct btrfs_root *root, u64 time_seq)$/;"	f
btrfs_op	volumes.h	/^static inline enum btrfs_map_op btrfs_op(struct bio *bio)$/;"	f
btrfs_open_devices	volumes.c	/^int btrfs_open_devices(struct btrfs_fs_devices *fs_devices,$/;"	f
btrfs_opendir	inode.c	/^static int btrfs_opendir(struct inode *inode, struct file *file)$/;"	f	file:
btrfs_ordered_extent	ordered-data.h	/^struct btrfs_ordered_extent {$/;"	s
btrfs_ordered_extent_cache	ordered-data.c	/^static struct kmem_cache *btrfs_ordered_extent_cache;$/;"	v	typeref:struct:kmem_cache	file:
btrfs_ordered_inode_tree	ordered-data.h	/^struct btrfs_ordered_inode_tree {$/;"	s
btrfs_ordered_inode_tree_init	ordered-data.h	/^btrfs_ordered_inode_tree_init(struct btrfs_ordered_inode_tree *t)$/;"	f
btrfs_ordered_sum	ordered-data.h	/^struct btrfs_ordered_sum {$/;"	s
btrfs_ordered_sum_size	ordered-data.h	/^static inline int btrfs_ordered_sum_size(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_ordered_update_i_size	ordered-data.c	/^int btrfs_ordered_update_i_size(struct inode *inode, u64 offset,$/;"	f
btrfs_orphan_add	inode.c	/^int btrfs_orphan_add(struct btrfs_trans_handle *trans,$/;"	f
btrfs_orphan_cleanup	inode.c	/^int btrfs_orphan_cleanup(struct btrfs_root *root)$/;"	f
btrfs_orphan_cleanup_state	ctree.h	/^enum btrfs_orphan_cleanup_state {$/;"	g
btrfs_orphan_commit_root	inode.c	/^void btrfs_orphan_commit_root(struct btrfs_trans_handle *trans,$/;"	f
btrfs_orphan_del	inode.c	/^static int btrfs_orphan_del(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_orphan_release_metadata	extent-tree.c	/^void btrfs_orphan_release_metadata(struct btrfs_inode *inode)$/;"	f
btrfs_orphan_reserve_metadata	extent-tree.c	/^int btrfs_orphan_reserve_metadata(struct btrfs_trans_handle *trans,$/;"	f
btrfs_page_exists_in_range	inode.c	/^bool btrfs_page_exists_in_range(struct inode *inode, loff_t start, loff_t end)$/;"	f
btrfs_page_mkwrite	inode.c	/^int btrfs_page_mkwrite(struct vm_fault *vmf)$/;"	f
btrfs_panic	ctree.h	3509;"	d
btrfs_parse_early_options	super.c	/^static int btrfs_parse_early_options(const char *options, fmode_t flags,$/;"	f	file:
btrfs_parse_options	super.c	/^int btrfs_parse_options(struct btrfs_fs_info *info, char *options,$/;"	f
btrfs_path	backref.h	/^	struct btrfs_path		*btrfs_path;$/;"	m	struct:inode_fs_paths	typeref:struct:inode_fs_paths::btrfs_path
btrfs_path	ctree.h	/^struct btrfs_path {$/;"	s
btrfs_path_cachep	inode.c	/^struct kmem_cache *btrfs_path_cachep;$/;"	v	typeref:struct:kmem_cache
btrfs_pause_balance	volumes.c	/^int btrfs_pause_balance(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_pending_bios	volumes.h	/^struct btrfs_pending_bios {$/;"	s
btrfs_pending_snapshot	transaction.h	/^struct btrfs_pending_snapshot {$/;"	s
btrfs_permission	inode.c	/^static int btrfs_permission(struct inode *inode, int mask)$/;"	f	file:
btrfs_pick_defrag_inode	file.c	/^btrfs_pick_defrag_inode(struct btrfs_fs_info *fs_info, u64 root, u64 ino)$/;"	f	file:
btrfs_pin_extent	extent-tree.c	/^int btrfs_pin_extent(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_pin_extent_for_log_replay	extent-tree.c	/^int btrfs_pin_extent_for_log_replay(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_pin_log_trans	tree-log.c	/^int btrfs_pin_log_trans(struct btrfs_root *root)$/;"	f
btrfs_plug_cb	raid56.c	/^struct btrfs_plug_cb {$/;"	s	file:
btrfs_prealloc_file_range	inode.c	/^int btrfs_prealloc_file_range(struct inode *inode, int mode,$/;"	f
btrfs_prealloc_file_range_trans	inode.c	/^int btrfs_prealloc_file_range_trans(struct inode *inode,$/;"	f
btrfs_prelim_ref_cache	backref.c	/^static struct kmem_cache *btrfs_prelim_ref_cache;$/;"	v	typeref:struct:kmem_cache	file:
btrfs_prelim_ref_exit	backref.c	/^void btrfs_prelim_ref_exit(void)$/;"	f
btrfs_prelim_ref_init	backref.c	/^int __init btrfs_prelim_ref_init(void)$/;"	f
btrfs_prepare_close_one_device	volumes.c	/^static void btrfs_prepare_close_one_device(struct btrfs_device *device)$/;"	f	file:
btrfs_prepare_extent_commit	extent-tree.c	/^void btrfs_prepare_extent_commit(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_prepare_sprout	volumes.c	/^static int btrfs_prepare_sprout(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_prev_leaf	ctree.c	/^int btrfs_prev_leaf(struct btrfs_root *root, struct btrfs_path *path)$/;"	f
btrfs_previous_extent_item	ctree.c	/^int btrfs_previous_extent_item(struct btrfs_root *root,$/;"	f
btrfs_previous_item	ctree.c	/^int btrfs_previous_item(struct btrfs_root *root,$/;"	f
btrfs_print_data_csum_error	btrfs_inode.h	/^static inline void btrfs_print_data_csum_error(struct btrfs_inode *inode,$/;"	f
btrfs_print_leaf	print-tree.c	/^void btrfs_print_leaf(struct extent_buffer *l)$/;"	f
btrfs_print_mod_info	super.c	/^static void btrfs_print_mod_info(void)$/;"	f	file:
btrfs_print_tree	print-tree.c	/^void btrfs_print_tree(struct extent_buffer *c)$/;"	f
btrfs_printable_features	sysfs.c	/^char *btrfs_printable_features(enum btrfs_feature_set set, u64 flags)$/;"	f
btrfs_printk	ctree.h	3301;"	d
btrfs_printk	super.c	/^void btrfs_printk(const struct btrfs_fs_info *fs_info, const char *fmt, ...)$/;"	f
btrfs_printk_in_rcu	ctree.h	3421;"	d
btrfs_printk_ratelimited	ctree.h	3428;"	d
btrfs_printk_rl_in_rcu	ctree.h	3437;"	d
btrfs_props_init	props.c	/^void __init btrfs_props_init(void)$/;"	f
btrfs_punch_hole	file.c	/^static int btrfs_punch_hole(struct inode *inode, loff_t offset, loff_t len)$/;"	f	file:
btrfs_put_bbio	volumes.c	/^void btrfs_put_bbio(struct btrfs_bio *bbio)$/;"	f
btrfs_put_block_group	extent-tree.c	/^void btrfs_put_block_group(struct btrfs_block_group_cache *cache)$/;"	f
btrfs_put_block_group_cache	extent-tree.c	/^void btrfs_put_block_group_cache(struct btrfs_fs_info *info)$/;"	f
btrfs_put_block_group_trimming	free-space-cache.c	/^void btrfs_put_block_group_trimming(struct btrfs_block_group_cache *block_group)$/;"	f
btrfs_put_delayed_ref	delayed-ref.h	/^static inline void btrfs_put_delayed_ref(struct btrfs_delayed_ref_node *ref)$/;"	f
btrfs_put_fs_root	disk-io.h	/^static inline void btrfs_put_fs_root(struct btrfs_root *root)$/;"	f
btrfs_put_logged_extents	ordered-data.c	/^void btrfs_put_logged_extents(struct list_head *logged_list)$/;"	f
btrfs_put_ordered_extent	ordered-data.c	/^void btrfs_put_ordered_extent(struct btrfs_ordered_extent *entry)$/;"	f
btrfs_put_super	super.c	/^static void btrfs_put_super(struct super_block *sb)$/;"	f	file:
btrfs_put_transaction	transaction.c	/^void btrfs_put_transaction(struct btrfs_transaction *transaction)$/;"	f
btrfs_put_tree_mod_seq	ctree.c	/^void btrfs_put_tree_mod_seq(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_qgroup	qgroup.h	/^struct btrfs_qgroup {$/;"	s
btrfs_qgroup_account_extent	qgroup.c	/^btrfs_qgroup_account_extent(struct btrfs_trans_handle *trans,$/;"	f
btrfs_qgroup_account_extents	qgroup.c	/^int btrfs_qgroup_account_extents(struct btrfs_trans_handle *trans,$/;"	f
btrfs_qgroup_check_reserved_leak	qgroup.c	/^void btrfs_qgroup_check_reserved_leak(struct inode *inode)$/;"	f
btrfs_qgroup_extent_record	qgroup.h	/^struct btrfs_qgroup_extent_record {$/;"	s
btrfs_qgroup_free_data	qgroup.c	/^int btrfs_qgroup_free_data(struct inode *inode,$/;"	f
btrfs_qgroup_free_delayed_ref	qgroup.h	/^static inline void btrfs_qgroup_free_delayed_ref(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_qgroup_free_meta	qgroup.c	/^void btrfs_qgroup_free_meta(struct btrfs_root *root, int num_bytes)$/;"	f
btrfs_qgroup_free_meta_all	qgroup.c	/^void btrfs_qgroup_free_meta_all(struct btrfs_root *root)$/;"	f
btrfs_qgroup_free_refroot	qgroup.c	/^void btrfs_qgroup_free_refroot(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_qgroup_get_new_refcnt	qgroup.c	/^static inline u64 btrfs_qgroup_get_new_refcnt(struct btrfs_qgroup *qg, u64 seq)$/;"	f	file:
btrfs_qgroup_get_old_refcnt	qgroup.c	/^static inline u64 btrfs_qgroup_get_old_refcnt(struct btrfs_qgroup *qg, u64 seq)$/;"	f	file:
btrfs_qgroup_inherit	qgroup.c	/^int btrfs_qgroup_inherit(struct btrfs_trans_handle *trans,$/;"	f
btrfs_qgroup_list	qgroup.c	/^struct btrfs_qgroup_list {$/;"	s	file:
btrfs_qgroup_release_data	qgroup.c	/^int btrfs_qgroup_release_data(struct inode *inode, u64 start, u64 len)$/;"	f
btrfs_qgroup_rescan	qgroup.c	/^btrfs_qgroup_rescan(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_qgroup_rescan_resume	qgroup.c	/^btrfs_qgroup_rescan_resume(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_qgroup_rescan_worker	qgroup.c	/^static void btrfs_qgroup_rescan_worker(struct btrfs_work *work)$/;"	f	file:
btrfs_qgroup_reserve_data	qgroup.c	/^int btrfs_qgroup_reserve_data(struct inode *inode,$/;"	f
btrfs_qgroup_reserve_meta	qgroup.c	/^int btrfs_qgroup_reserve_meta(struct btrfs_root *root, int num_bytes,$/;"	f
btrfs_qgroup_trace_extent	qgroup.c	/^int btrfs_qgroup_trace_extent(struct btrfs_trans_handle *trans,$/;"	f
btrfs_qgroup_trace_extent_nolock	qgroup.c	/^int btrfs_qgroup_trace_extent_nolock(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_qgroup_trace_extent_post	qgroup.c	/^int btrfs_qgroup_trace_extent_post(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_qgroup_trace_leaf_items	qgroup.c	/^int btrfs_qgroup_trace_leaf_items(struct btrfs_trans_handle *trans,$/;"	f
btrfs_qgroup_trace_subtree	qgroup.c	/^int btrfs_qgroup_trace_subtree(struct btrfs_trans_handle *trans,$/;"	f
btrfs_qgroup_update_new_refcnt	qgroup.c	/^static void btrfs_qgroup_update_new_refcnt(struct btrfs_qgroup *qg, u64 seq,$/;"	f	file:
btrfs_qgroup_update_old_refcnt	qgroup.c	/^static void btrfs_qgroup_update_old_refcnt(struct btrfs_qgroup *qg, u64 seq,$/;"	f	file:
btrfs_qgroup_wait_for_completion	qgroup.c	/^int btrfs_qgroup_wait_for_completion(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_queue_delayed_node	delayed-inode.c	/^static void btrfs_queue_delayed_node(struct btrfs_delayed_root *root,$/;"	f	file:
btrfs_queue_work	async-thread.c	/^void btrfs_queue_work(struct btrfs_workqueue *wq,$/;"	f
btrfs_quota_disable	qgroup.c	/^int btrfs_quota_disable(struct btrfs_trans_handle *trans,$/;"	f
btrfs_quota_enable	qgroup.c	/^int btrfs_quota_enable(struct btrfs_trans_handle *trans,$/;"	f
btrfs_raid_array	volumes.c	/^const struct btrfs_raid_attr btrfs_raid_array[BTRFS_NR_RAID_TYPES] = {$/;"	v	typeref:struct:btrfs_raid_attr
btrfs_raid_attr	volumes.h	/^struct btrfs_raid_attr {$/;"	s
btrfs_raid_bio	raid56.c	/^struct btrfs_raid_bio {$/;"	s	file:
btrfs_raid_group	volumes.c	/^const u64 btrfs_raid_group[BTRFS_NR_RAID_TYPES] = {$/;"	v
btrfs_raid_ktype	sysfs.c	/^struct kobj_type btrfs_raid_ktype = {$/;"	v	typeref:struct:kobj_type
btrfs_raid_mindev_error	volumes.c	/^const int btrfs_raid_mindev_error[BTRFS_NR_RAID_TYPES] = {$/;"	v
btrfs_raid_type_names	extent-tree.c	/^static const char *btrfs_raid_type_names[BTRFS_NR_RAID_TYPES] = {$/;"	v	file:
btrfs_raid_unplug	raid56.c	/^static void btrfs_raid_unplug(struct blk_plug_cb *cb, bool from_schedule)$/;"	f	file:
btrfs_raw_test_opt	ctree.h	1347;"	d
btrfs_rbio_ops	raid56.c	/^enum btrfs_rbio_ops {$/;"	g	file:
btrfs_read_block_groups	extent-tree.c	/^int btrfs_read_block_groups(struct btrfs_fs_info *info)$/;"	f
btrfs_read_buffer	disk-io.c	/^int btrfs_read_buffer(struct extent_buffer *buf, u64 parent_transid)$/;"	f
btrfs_read_chunk_tree	volumes.c	/^int btrfs_read_chunk_tree(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_read_dev_one_super	disk-io.c	/^int btrfs_read_dev_one_super(struct block_device *bdev, int copy_num,$/;"	f
btrfs_read_dev_super	disk-io.c	/^struct buffer_head *btrfs_read_dev_super(struct block_device *bdev)$/;"	f
btrfs_read_disk_super	volumes.c	/^int btrfs_read_disk_super(struct block_device *bdev, u64 bytenr,$/;"	f
btrfs_read_fs_root	disk-io.c	/^struct btrfs_root *btrfs_read_fs_root(struct btrfs_root *tree_root,$/;"	f
btrfs_read_fs_root_no_name	disk-io.h	/^btrfs_read_fs_root_no_name(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_read_lock_root_node	ctree.c	/^static struct extent_buffer *btrfs_read_lock_root_node(struct btrfs_root *root)$/;"	f	file:
btrfs_read_locked_inode	inode.c	/^static int btrfs_read_locked_inode(struct inode *inode)$/;"	f	file:
btrfs_read_qgroup_config	qgroup.c	/^int btrfs_read_qgroup_config(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_read_root_item	root-tree.c	/^static void btrfs_read_root_item(struct extent_buffer *eb, int slot,$/;"	f	file:
btrfs_read_roots	disk-io.c	/^static int btrfs_read_roots(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_read_sys_array	volumes.c	/^int btrfs_read_sys_array(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_read_tree_root	disk-io.c	/^static struct btrfs_root *btrfs_read_tree_root(struct btrfs_root *tree_root,$/;"	f	file:
btrfs_reada_add	reada.c	/^struct reada_control *btrfs_reada_add(struct btrfs_root *root,$/;"	f
btrfs_reada_detach	reada.c	/^void btrfs_reada_detach(void *handle)$/;"	f
btrfs_reada_wait	reada.c	/^int btrfs_reada_wait(void *handle)$/;"	f
btrfs_readdir_delayed_dir_index	delayed-inode.c	/^int btrfs_readdir_delayed_dir_index(struct dir_context *ctx,$/;"	f
btrfs_readdir_get_delayed_items	delayed-inode.c	/^bool btrfs_readdir_get_delayed_items(struct inode *inode,$/;"	f
btrfs_readdir_put_delayed_items	delayed-inode.c	/^void btrfs_readdir_put_delayed_items(struct inode *inode,$/;"	f
btrfs_readpage	inode.c	/^int btrfs_readpage(struct file *file, struct page *page)$/;"	f
btrfs_readpage_end_io_hook	inode.c	/^static int btrfs_readpage_end_io_hook(struct btrfs_io_bio *io_bio,$/;"	f	file:
btrfs_readpage_io_failed_hook	inode.c	/^static int btrfs_readpage_io_failed_hook(struct page *page, int failed_mirror)$/;"	f	file:
btrfs_readpages	inode.c	/^btrfs_readpages(struct file *file, struct address_space *mapping,$/;"	f	file:
btrfs_real_readdir	inode.c	/^static int btrfs_real_readdir(struct file *file, struct dir_context *ctx)$/;"	f	file:
btrfs_realloc_node	ctree.c	/^int btrfs_realloc_node(struct btrfs_trans_handle *trans,$/;"	f
btrfs_record_root_in_trans	transaction.c	/^int btrfs_record_root_in_trans(struct btrfs_trans_handle *trans,$/;"	f
btrfs_record_snapshot_destroy	tree-log.c	/^void btrfs_record_snapshot_destroy(struct btrfs_trans_handle *trans,$/;"	f
btrfs_record_unlink_dir	tree-log.c	/^void btrfs_record_unlink_dir(struct btrfs_trans_handle *trans,$/;"	f
btrfs_recover_balance	volumes.c	/^int btrfs_recover_balance(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_recover_log_trees	tree-log.c	/^int btrfs_recover_log_trees(struct btrfs_root *log_root_tree)$/;"	f
btrfs_recover_relocation	relocation.c	/^int btrfs_recover_relocation(struct btrfs_root *root)$/;"	f
btrfs_reduce_alloc_profile	extent-tree.c	/^static u64 btrfs_reduce_alloc_profile(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	file:
btrfs_ref_to_path	backref.c	/^char *btrfs_ref_to_path(struct btrfs_root *fs_root, struct btrfs_path *path,$/;"	f
btrfs_release_block_group	extent-tree.c	/^btrfs_release_block_group(struct btrfs_block_group_cache *cache,$/;"	f	file:
btrfs_release_delalloc_bytes	inode.c	/^static void btrfs_release_delalloc_bytes(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_release_delayed_inode	delayed-inode.c	/^static void btrfs_release_delayed_inode(struct btrfs_delayed_node *delayed_node)$/;"	f	file:
btrfs_release_delayed_iref	delayed-inode.c	/^static void btrfs_release_delayed_iref(struct btrfs_delayed_node *delayed_node)$/;"	f	file:
btrfs_release_delayed_item	delayed-inode.c	/^static void btrfs_release_delayed_item(struct btrfs_delayed_item *item)$/;"	f	file:
btrfs_release_delayed_node	delayed-inode.c	/^static inline void btrfs_release_delayed_node(struct btrfs_delayed_node *node)$/;"	f	file:
btrfs_release_disk_super	volumes.c	/^void btrfs_release_disk_super(struct page *page)$/;"	f
btrfs_release_extent_buffer	extent_io.c	/^static inline void btrfs_release_extent_buffer(struct extent_buffer *eb)$/;"	f	file:
btrfs_release_extent_buffer_page	extent_io.c	/^static void btrfs_release_extent_buffer_page(struct extent_buffer *eb)$/;"	f	file:
btrfs_release_extent_buffer_rcu	extent_io.c	/^static inline void btrfs_release_extent_buffer_rcu(struct rcu_head *head)$/;"	f	file:
btrfs_release_file	file.c	/^int btrfs_release_file(struct inode *inode, struct file *filp)$/;"	f
btrfs_release_fsid_kobj	sysfs.c	/^static void btrfs_release_fsid_kobj(struct kobject *kobj)$/;"	f	file:
btrfs_release_path	ctree.c	/^noinline void btrfs_release_path(struct btrfs_path *p)$/;"	f
btrfs_release_prepared_delayed_node	delayed-inode.c	/^static inline void btrfs_release_prepared_delayed_node($/;"	f	file:
btrfs_releasepage	inode.c	/^static int btrfs_releasepage(struct page *page, gfp_t gfp_flags)$/;"	f	file:
btrfs_reloc_clone_csums	relocation.c	/^int btrfs_reloc_clone_csums(struct inode *inode, u64 file_pos, u64 len)$/;"	f
btrfs_reloc_cow_block	relocation.c	/^int btrfs_reloc_cow_block(struct btrfs_trans_handle *trans,$/;"	f
btrfs_reloc_post_snapshot	relocation.c	/^int btrfs_reloc_post_snapshot(struct btrfs_trans_handle *trans,$/;"	f
btrfs_reloc_pre_snapshot	relocation.c	/^void btrfs_reloc_pre_snapshot(struct btrfs_pending_snapshot *pending,$/;"	f
btrfs_relocate_block_group	relocation.c	/^int btrfs_relocate_block_group(struct btrfs_fs_info *fs_info, u64 group_start)$/;"	f
btrfs_relocate_chunk	volumes.c	/^static int btrfs_relocate_chunk(struct btrfs_fs_info *fs_info, u64 chunk_offset)$/;"	f	file:
btrfs_relocate_sys_chunks	volumes.c	/^static int btrfs_relocate_sys_chunks(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_remount	super.c	/^static int btrfs_remount(struct super_block *sb, int *flags, char *data)$/;"	f	file:
btrfs_remount_begin	super.c	/^static inline void btrfs_remount_begin(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_remount_cleanup	super.c	/^static inline void btrfs_remount_cleanup(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_remount_prepare	super.c	/^static inline void btrfs_remount_prepare(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_remove_all_log_ctxs	tree-log.c	/^static inline void btrfs_remove_all_log_ctxs(struct btrfs_root *root,$/;"	f	file:
btrfs_remove_block_group	extent-tree.c	/^int btrfs_remove_block_group(struct btrfs_trans_handle *trans,$/;"	f
btrfs_remove_chunk	volumes.c	/^int btrfs_remove_chunk(struct btrfs_trans_handle *trans,$/;"	f
btrfs_remove_delayed_node	delayed-inode.c	/^void btrfs_remove_delayed_node(struct btrfs_inode *inode)$/;"	f
btrfs_remove_free_space	free-space-cache.c	/^int btrfs_remove_free_space(struct btrfs_block_group_cache *block_group,$/;"	f
btrfs_remove_free_space_cache	free-space-cache.c	/^void btrfs_remove_free_space_cache(struct btrfs_block_group_cache *block_group)$/;"	f
btrfs_remove_log_ctx	tree-log.c	/^static inline void btrfs_remove_log_ctx(struct btrfs_root *root,$/;"	f	file:
btrfs_remove_ordered_extent	ordered-data.c	/^void btrfs_remove_ordered_extent(struct inode *inode,$/;"	f
btrfs_remove_qgroup	qgroup.c	/^int btrfs_remove_qgroup(struct btrfs_trans_handle *trans,$/;"	f
btrfs_rename	inode.c	/^static int btrfs_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
btrfs_rename2	inode.c	/^static int btrfs_rename2(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
btrfs_rename_exchange	inode.c	/^static int btrfs_rename_exchange(struct inode *old_dir,$/;"	f	file:
btrfs_replay_log	disk-io.c	/^static int btrfs_replay_log(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_report_missing_device	volumes.c	/^void btrfs_report_missing_device(struct btrfs_fs_info *fs_info, u64 devid,$/;"	f
btrfs_requeue_inode_defrag	file.c	/^static void btrfs_requeue_inode_defrag(struct btrfs_inode *inode,$/;"	f	file:
btrfs_reserve_extent	extent-tree.c	/^int btrfs_reserve_extent(struct btrfs_root *root, u64 ram_bytes,$/;"	f
btrfs_reserve_flush_enum	ctree.h	/^enum btrfs_reserve_flush_enum {$/;"	g
btrfs_reset_fs_info_ptr	volumes.c	/^void btrfs_reset_fs_info_ptr(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_resize_thread_pool	super.c	/^static void btrfs_resize_thread_pool(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_resume_balance_async	volumes.c	/^int btrfs_resume_balance_async(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_resume_dev_replace_async	dev-replace.c	/^int btrfs_resume_dev_replace_async(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_retry_complete	inode.c	/^struct btrfs_retry_complete {$/;"	s	file:
btrfs_retry_endio	inode.c	/^static void btrfs_retry_endio(struct bio *bio)$/;"	f	file:
btrfs_retry_endio_nocsum	inode.c	/^static void btrfs_retry_endio_nocsum(struct bio *bio)$/;"	f	file:
btrfs_return_cluster_to_free_space	free-space-cache.c	/^int btrfs_return_cluster_to_free_space($/;"	f
btrfs_return_ino	inode-map.c	/^void btrfs_return_ino(struct btrfs_root *root, u64 objectid)$/;"	f
btrfs_rm_dev_item	volumes.c	/^static int btrfs_rm_dev_item(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_rm_dev_replace_blocked	dev-replace.c	/^static void btrfs_rm_dev_replace_blocked(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_rm_dev_replace_free_srcdev	volumes.c	/^void btrfs_rm_dev_replace_free_srcdev(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_rm_dev_replace_remove_srcdev	volumes.c	/^void btrfs_rm_dev_replace_remove_srcdev(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_rm_dev_replace_unblocked	dev-replace.c	/^static void btrfs_rm_dev_replace_unblocked(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_rm_device	volumes.c	/^int btrfs_rm_device(struct btrfs_fs_info *fs_info, const char *device_path,$/;"	f
btrfs_rmap_block	volumes.c	/^int btrfs_rmap_block(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_rmdir	inode.c	/^static int btrfs_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
btrfs_root	ctree.h	/^struct btrfs_root {$/;"	s
btrfs_root_backup	ctree.h	/^struct btrfs_root_backup {$/;"	s
btrfs_root_dead	ctree.h	/^static inline bool btrfs_root_dead(const struct btrfs_root *root)$/;"	f
btrfs_root_dec_send_in_progress	send.c	/^static void btrfs_root_dec_send_in_progress(struct btrfs_root* root)$/;"	f	file:
btrfs_root_node	ctree.c	/^struct extent_buffer *btrfs_root_node(struct btrfs_root *root)$/;"	f
btrfs_root_readonly	ctree.h	/^static inline bool btrfs_root_readonly(const struct btrfs_root *root)$/;"	f
btrfs_run_defrag_inodes	file.c	/^int btrfs_run_defrag_inodes(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_run_delalloc_work	inode.c	/^static void btrfs_run_delalloc_work(struct btrfs_work *work)$/;"	f	file:
btrfs_run_delayed_iputs	inode.c	/^void btrfs_run_delayed_iputs(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_run_delayed_items	delayed-inode.c	/^int btrfs_run_delayed_items(struct btrfs_trans_handle *trans,$/;"	f
btrfs_run_delayed_items_nr	delayed-inode.c	/^int btrfs_run_delayed_items_nr(struct btrfs_trans_handle *trans,$/;"	f
btrfs_run_delayed_refs	extent-tree.c	/^int btrfs_run_delayed_refs(struct btrfs_trans_handle *trans,$/;"	f
btrfs_run_dev_replace	dev-replace.c	/^int btrfs_run_dev_replace(struct btrfs_trans_handle *trans,$/;"	f
btrfs_run_dev_stats	volumes.c	/^int btrfs_run_dev_stats(struct btrfs_trans_handle *trans,$/;"	f
btrfs_run_ordered_extent_work	ordered-data.c	/^static void btrfs_run_ordered_extent_work(struct btrfs_work *work)$/;"	f	file:
btrfs_run_qgroups	qgroup.c	/^int btrfs_run_qgroups(struct btrfs_trans_handle *trans,$/;"	f
btrfs_run_sanity_tests	tests/btrfs-tests.c	/^int btrfs_run_sanity_tests(void)$/;"	f
btrfs_run_sanity_tests	tests/btrfs-tests.h	/^static inline int btrfs_run_sanity_tests(void)$/;"	f
btrfs_save_ino_cache	inode-map.c	/^int btrfs_save_ino_cache(struct btrfs_root *root,$/;"	f
btrfs_sb	ctree.h	/^static inline struct btrfs_fs_info *btrfs_sb(struct super_block *sb)$/;"	f
btrfs_sb_offset	disk-io.h	/^static inline u64 btrfs_sb_offset(int mirror)$/;"	f
btrfs_scan_one_device	volumes.c	/^int btrfs_scan_one_device(const char *path, fmode_t flags, void *holder,$/;"	f
btrfs_schedule_bio	volumes.c	/^static noinline void btrfs_schedule_bio(struct btrfs_device *device,$/;"	f	file:
btrfs_scratch_superblocks	volumes.c	/^void btrfs_scratch_superblocks(struct block_device *bdev, const char *device_path)$/;"	f
btrfs_scrub_cancel	scrub.c	/^int btrfs_scrub_cancel(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_scrub_cancel_dev	scrub.c	/^int btrfs_scrub_cancel_dev(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_scrub_continue	scrub.c	/^void btrfs_scrub_continue(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_scrub_dev	scrub.c	/^int btrfs_scrub_dev(struct btrfs_fs_info *fs_info, u64 devid, u64 start,$/;"	f
btrfs_scrub_pause	scrub.c	/^void btrfs_scrub_pause(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_scrub_progress	scrub.c	/^int btrfs_scrub_progress(struct btrfs_fs_info *fs_info, u64 devid,$/;"	f
btrfs_search_dir_index_item	dir-item.c	/^btrfs_search_dir_index_item(struct btrfs_root *root,$/;"	f
btrfs_search_forward	ctree.c	/^int btrfs_search_forward(struct btrfs_root *root, struct btrfs_key *min_key,$/;"	f
btrfs_search_old_slot	ctree.c	/^int btrfs_search_old_slot(struct btrfs_root *root, const struct btrfs_key *key,$/;"	f
btrfs_search_path_in_tree	ioctl.c	/^static noinline int btrfs_search_path_in_tree(struct btrfs_fs_info *info,$/;"	f	file:
btrfs_search_prev_slot	free-space-tree.c	/^static int btrfs_search_prev_slot(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_search_slot	ctree.c	/^int btrfs_search_slot(struct btrfs_trans_handle *trans, struct btrfs_root *root,$/;"	f
btrfs_search_slot_for_read	ctree.c	/^int btrfs_search_slot_for_read(struct btrfs_root *root,$/;"	f
btrfs_sectorsize_show	sysfs.c	/^static ssize_t btrfs_sectorsize_show(struct kobject *kobj,$/;"	f	file:
btrfs_security_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_security_xattr_handler = {$/;"	v	typeref:struct:xattr_handler	file:
btrfs_select_ref_head	delayed-ref.c	/^btrfs_select_ref_head(struct btrfs_trans_handle *trans)$/;"	f
btrfs_send_cmd	send.h	/^enum btrfs_send_cmd {$/;"	g
btrfs_set_acl	acl.c	/^int btrfs_set_acl(struct inode *inode, struct posix_acl *acl, int type)$/;"	f
btrfs_set_acl	ctree.h	3642;"	d
btrfs_set_and_info	ctree.h	1351;"	d
btrfs_set_balance_data	ctree.h	/^static inline void btrfs_set_balance_data(struct extent_buffer *eb,$/;"	f
btrfs_set_balance_meta	ctree.h	/^static inline void btrfs_set_balance_meta(struct extent_buffer *eb,$/;"	f
btrfs_set_balance_sys	ctree.h	/^static inline void btrfs_set_balance_sys(struct extent_buffer *eb,$/;"	f
btrfs_set_bit_hook	inode.c	/^static void btrfs_set_bit_hook(void *private_data,$/;"	f	file:
btrfs_set_buffer_lockdep_class	disk-io.c	/^void btrfs_set_buffer_lockdep_class(u64 objectid, struct extent_buffer *eb,$/;"	f
btrfs_set_buffer_lockdep_class	disk-io.h	/^static inline void btrfs_set_buffer_lockdep_class(u64 objectid,$/;"	f
btrfs_set_dev_stats_value	ctree.h	/^static inline void btrfs_set_dev_stats_value(struct extent_buffer *eb,$/;"	f
btrfs_set_device_total_bytes	ctree.h	/^static inline void btrfs_set_device_total_bytes(struct extent_buffer *eb,$/;"	f
btrfs_set_dir_item_key	ctree.h	/^static inline void btrfs_set_dir_item_key(struct extent_buffer *eb,$/;"	f
btrfs_set_disk_extent_flags	extent-tree.c	/^int btrfs_set_disk_extent_flags(struct btrfs_trans_handle *trans,$/;"	f
btrfs_set_extent_delalloc	inode.c	/^int btrfs_set_extent_delalloc(struct inode *inode, u64 start, u64 end,$/;"	f
btrfs_set_free_space_key	ctree.h	/^static inline void btrfs_set_free_space_key(struct extent_buffer *eb,$/;"	f
btrfs_set_fs_compat_ro	ctree.h	3576;"	d
btrfs_set_fs_incompat	ctree.h	3518;"	d
btrfs_set_fs_info_ptr	volumes.c	/^void btrfs_set_fs_info_ptr(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_set_header_backref_rev	ctree.h	/^static inline void btrfs_set_header_backref_rev(struct extent_buffer *eb,$/;"	f
btrfs_set_header_flag	ctree.h	/^static inline int btrfs_set_header_flag(struct extent_buffer *eb, u64 flag)$/;"	f
btrfs_set_inode_index	inode.c	/^int btrfs_set_inode_index(struct btrfs_inode *dir, u64 *index)$/;"	f
btrfs_set_inode_index_count	inode.c	/^static int btrfs_set_inode_index_count(struct btrfs_inode *inode)$/;"	f	file:
btrfs_set_inode_last_trans	transaction.h	/^static inline void btrfs_set_inode_last_trans(struct btrfs_trans_handle *trans,$/;"	f
btrfs_set_item_key	ctree.h	/^static inline void btrfs_set_item_key(struct extent_buffer *eb,$/;"	f
btrfs_set_item_key_safe	ctree.c	/^void btrfs_set_item_key_safe(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_set_key_type	ctree.h	/^static inline void btrfs_set_key_type(struct btrfs_key *key, u8 val)$/;"	f
btrfs_set_lock_blocking	locking.h	/^static inline void btrfs_set_lock_blocking(struct extent_buffer *eb)$/;"	f
btrfs_set_lock_blocking_rw	locking.c	/^void btrfs_set_lock_blocking_rw(struct extent_buffer *eb, int rw)$/;"	f
btrfs_set_log_full_commit	tree-log.h	/^static inline void btrfs_set_log_full_commit(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_set_node_blockptr	ctree.h	/^static inline void btrfs_set_node_blockptr(struct extent_buffer *eb,$/;"	f
btrfs_set_node_key	ctree.h	/^static inline void btrfs_set_node_key(struct extent_buffer *eb,$/;"	f
btrfs_set_node_ptr_generation	ctree.h	/^static inline void btrfs_set_node_ptr_generation(struct extent_buffer *eb,$/;"	f
btrfs_set_opt	ctree.h	1346;"	d
btrfs_set_page_dirty	inode.c	/^static int btrfs_set_page_dirty(struct page *page)$/;"	f	file:
btrfs_set_path_blocking	ctree.c	/^noinline void btrfs_set_path_blocking(struct btrfs_path *p)$/;"	f
btrfs_set_pending	ctree.h	1392;"	d
btrfs_set_pending_and_info	ctree.h	1403;"	d
btrfs_set_prop	props.c	/^int btrfs_set_prop(struct inode *inode,$/;"	f
btrfs_set_range_writeback	inode.c	/^void btrfs_set_range_writeback(void *private_data, u64 start, u64 end)$/;"	f
btrfs_set_root_node	root-tree.c	/^void btrfs_set_root_node(struct btrfs_root_item *item,$/;"	f
btrfs_set_skip_qgroup	transaction.h	/^static inline void btrfs_set_skip_qgroup(struct btrfs_trans_handle *trans,$/;"	f
btrfs_set_super	super.c	/^static int btrfs_set_super(struct super_block *s, void *data)$/;"	f	file:
btrfs_set_tree_block_key	ctree.h	/^static inline void btrfs_set_tree_block_key(struct extent_buffer *eb,$/;"	f
btrfs_set_work_high_priority	async-thread.c	/^void btrfs_set_work_high_priority(struct btrfs_work *work)$/;"	f
btrfs_setattr	inode.c	/^static int btrfs_setattr(struct dentry *dentry, struct iattr *attr)$/;"	f	file:
btrfs_setsize	inode.c	/^static int btrfs_setsize(struct inode *inode, struct iattr *attr)$/;"	f	file:
btrfs_setup_space_cache	extent-tree.c	/^int btrfs_setup_space_cache(struct btrfs_trans_handle *trans,$/;"	f
btrfs_should_delete_dir_index	delayed-inode.c	/^int btrfs_should_delete_dir_index(struct list_head *del_list,$/;"	f
btrfs_should_end_transaction	transaction.c	/^int btrfs_should_end_transaction(struct btrfs_trans_handle *trans)$/;"	f
btrfs_should_fragment_free_space	ctree.h	/^btrfs_should_fragment_free_space(struct btrfs_block_group_cache *block_group)$/;"	f
btrfs_should_throttle_delayed_refs	extent-tree.c	/^int btrfs_should_throttle_delayed_refs(struct btrfs_trans_handle *trans,$/;"	f
btrfs_show_devname	super.c	/^static int btrfs_show_devname(struct seq_file *m, struct dentry *root)$/;"	f	file:
btrfs_show_options	super.c	/^static int btrfs_show_options(struct seq_file *seq, struct dentry *dentry)$/;"	f	file:
btrfs_show_u64	sysfs.c	/^static ssize_t btrfs_show_u64(u64 *value_ptr, spinlock_t *lock, char *buf)$/;"	f	file:
btrfs_shrink_device	volumes.c	/^int btrfs_shrink_device(struct btrfs_device *device, u64 new_size)$/;"	f
btrfs_space_info	ctree.h	/^struct btrfs_space_info {$/;"	s
btrfs_space_info_show_total_bytes_pinned	sysfs.c	/^static ssize_t btrfs_space_info_show_total_bytes_pinned(struct kobject *kobj,$/;"	f	file:
btrfs_space_info_used	extent-tree.c	/^static u64 btrfs_space_info_used(struct btrfs_space_info *s_info,$/;"	f	file:
btrfs_special_inode_operations	inode.c	/^static const struct inode_operations btrfs_special_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
btrfs_special_inode_operations	inode.c	/^static const struct inode_operations btrfs_special_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
btrfs_split_extent_hook	inode.c	/^static void btrfs_split_extent_hook(void *private_data,$/;"	f	file:
btrfs_split_item	ctree.c	/^int btrfs_split_item(struct btrfs_trans_handle *trans,$/;"	f
btrfs_start_delalloc_flush	transaction.c	/^static inline int btrfs_start_delalloc_flush(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_start_delalloc_inodes	inode.c	/^int btrfs_start_delalloc_inodes(struct btrfs_root *root, int delay_iput)$/;"	f
btrfs_start_delalloc_roots	inode.c	/^int btrfs_start_delalloc_roots(struct btrfs_fs_info *fs_info, int delay_iput,$/;"	f
btrfs_start_dirty_block_groups	extent-tree.c	/^int btrfs_start_dirty_block_groups(struct btrfs_trans_handle *trans,$/;"	f
btrfs_start_ioctl_transaction	transaction.c	/^struct btrfs_trans_handle *btrfs_start_ioctl_transaction(struct btrfs_root *root)$/;"	f
btrfs_start_ordered_extent	ordered-data.c	/^void btrfs_start_ordered_extent(struct inode *inode,$/;"	f
btrfs_start_trans_remove_block_group	extent-tree.c	/^btrfs_start_trans_remove_block_group(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_start_transaction	transaction.c	/^struct btrfs_trans_handle *btrfs_start_transaction(struct btrfs_root *root,$/;"	f
btrfs_start_transaction_fallback_global_rsv	transaction.c	/^struct btrfs_trans_handle *btrfs_start_transaction_fallback_global_rsv($/;"	f
btrfs_start_transaction_lflush	transaction.c	/^struct btrfs_trans_handle *btrfs_start_transaction_lflush($/;"	f
btrfs_start_write_no_snapshotting	extent-tree.c	/^int btrfs_start_write_no_snapshotting(struct btrfs_root *root)$/;"	f
btrfs_statfs	super.c	/^static int btrfs_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
btrfs_stop_all_workers	disk-io.c	/^static void btrfs_stop_all_workers(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_stream_header	send.h	/^struct btrfs_stream_header {$/;"	s
btrfs_stripe_dev_uuid	ctree.h	/^static inline char *btrfs_stripe_dev_uuid(struct btrfs_stripe *s)$/;"	f
btrfs_stripe_dev_uuid_nr	ctree.h	/^static inline char *btrfs_stripe_dev_uuid_nr(struct btrfs_chunk *c, int nr)$/;"	f
btrfs_stripe_devid_nr	ctree.h	/^static inline u64 btrfs_stripe_devid_nr(struct extent_buffer *eb,$/;"	f
btrfs_stripe_hash	ctree.h	/^struct btrfs_stripe_hash {$/;"	s
btrfs_stripe_hash_table	ctree.h	/^struct btrfs_stripe_hash_table {$/;"	s
btrfs_stripe_nr	ctree.h	/^static inline struct btrfs_stripe *btrfs_stripe_nr(struct btrfs_chunk *c,$/;"	f
btrfs_stripe_offset_nr	ctree.h	/^static inline u64 btrfs_stripe_offset_nr(struct extent_buffer *eb,$/;"	f
btrfs_subio_endio_read	inode.c	/^static blk_status_t btrfs_subio_endio_read(struct inode *inode,$/;"	f	file:
btrfs_submit_bio_hook	inode.c	/^static blk_status_t btrfs_submit_bio_hook(void *private_data, struct bio *bio,$/;"	f	file:
btrfs_submit_compressed_read	compression.c	/^blk_status_t btrfs_submit_compressed_read(struct inode *inode, struct bio *bio,$/;"	f
btrfs_submit_compressed_write	compression.c	/^blk_status_t btrfs_submit_compressed_write(struct inode *inode, u64 start,$/;"	f
btrfs_submit_direct	inode.c	/^static void btrfs_submit_direct(struct bio *dio_bio, struct inode *inode,$/;"	f	file:
btrfs_submit_direct_hook	inode.c	/^static int btrfs_submit_direct_hook(struct btrfs_dio_private *dip)$/;"	f	file:
btrfs_submit_logged_extents	ordered-data.c	/^void btrfs_submit_logged_extents(struct list_head *logged_list,$/;"	f
btrfs_subvol_inherit_props	props.c	/^int btrfs_subvol_inherit_props(struct btrfs_trans_handle *trans,$/;"	f
btrfs_subvolume_release_metadata	extent-tree.c	/^void btrfs_subvolume_release_metadata(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_subvolume_reserve_metadata	extent-tree.c	/^int btrfs_subvolume_reserve_metadata(struct btrfs_root *root,$/;"	f
btrfs_subvolume_writers	ctree.h	/^struct btrfs_subvolume_writers {$/;"	s
btrfs_super_block	ctree.h	/^struct btrfs_super_block {$/;"	s
btrfs_super_csum_size	ctree.h	/^static inline int btrfs_super_csum_size(const struct btrfs_super_block *s)$/;"	f
btrfs_super_ops	super.c	/^static const struct super_operations btrfs_super_ops = {$/;"	v	typeref:struct:super_operations	file:
btrfs_super_ops	super.c	/^static const struct super_operations btrfs_super_ops;$/;"	v	typeref:struct:super_operations	file:
btrfs_supported_feature_attrs	sysfs.c	/^static struct attribute *btrfs_supported_feature_attrs[] = {$/;"	v	typeref:struct:attribute	file:
btrfs_symlink	inode.c	/^static int btrfs_symlink(struct inode *dir, struct dentry *dentry,$/;"	f	file:
btrfs_symlink_aops	inode.c	/^static const struct address_space_operations btrfs_symlink_aops = {$/;"	v	typeref:struct:address_space_operations	file:
btrfs_symlink_aops	inode.c	/^static const struct address_space_operations btrfs_symlink_aops;$/;"	v	typeref:struct:address_space_operations	file:
btrfs_symlink_inode_operations	inode.c	/^static const struct inode_operations btrfs_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
btrfs_symlink_inode_operations	inode.c	/^static const struct inode_operations btrfs_symlink_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
btrfs_sync_file	file.c	/^int btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)$/;"	f
btrfs_sync_fs	super.c	/^int btrfs_sync_fs(struct super_block *sb, int wait)$/;"	f
btrfs_sync_log	tree-log.c	/^int btrfs_sync_log(struct btrfs_trans_handle *trans,$/;"	f
btrfs_sysfs_add_device	sysfs.c	/^int btrfs_sysfs_add_device(struct btrfs_fs_devices *fs_devs)$/;"	f
btrfs_sysfs_add_device_link	sysfs.c	/^int btrfs_sysfs_add_device_link(struct btrfs_fs_devices *fs_devices,$/;"	f
btrfs_sysfs_add_fsid	sysfs.c	/^int btrfs_sysfs_add_fsid(struct btrfs_fs_devices *fs_devs,$/;"	f
btrfs_sysfs_add_mounted	sysfs.c	/^int btrfs_sysfs_add_mounted(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_sysfs_feature_update	sysfs.c	/^void btrfs_sysfs_feature_update(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_sysfs_remove_fsid	sysfs.c	/^void btrfs_sysfs_remove_fsid(struct btrfs_fs_devices *fs_devs)$/;"	f
btrfs_sysfs_remove_mounted	sysfs.c	/^void btrfs_sysfs_remove_mounted(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_sysfs_rm_device_link	sysfs.c	/^int btrfs_sysfs_rm_device_link(struct btrfs_fs_devices *fs_devices,$/;"	f
btrfs_system_alloc_profile	extent-tree.c	/^u64 btrfs_system_alloc_profile(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_test_destroy_inode	inode.c	/^void btrfs_test_destroy_inode(struct inode *inode)$/;"	f
btrfs_test_extent_buffer_operations	tests/extent-buffer-tests.c	/^int btrfs_test_extent_buffer_operations(u32 sectorsize, u32 nodesize)$/;"	f
btrfs_test_extent_io	tests/extent-io-tests.c	/^int btrfs_test_extent_io(u32 sectorsize, u32 nodesize)$/;"	f
btrfs_test_free_space_cache	tests/free-space-tests.c	/^int btrfs_test_free_space_cache(u32 sectorsize, u32 nodesize)$/;"	f
btrfs_test_free_space_tree	tests/free-space-tree-tests.c	/^int btrfs_test_free_space_tree(u32 sectorsize, u32 nodesize)$/;"	f
btrfs_test_inode_set_ops	inode.c	/^void btrfs_test_inode_set_ops(struct inode *inode)$/;"	f
btrfs_test_inodes	tests/inode-tests.c	/^int btrfs_test_inodes(u32 sectorsize, u32 nodesize)$/;"	f
btrfs_test_mount	tests/btrfs-tests.c	/^static struct dentry *btrfs_test_mount(struct file_system_type *fs_type,$/;"	f	file:
btrfs_test_opt	ctree.h	1348;"	d
btrfs_test_pending	ctree.h	1390;"	d
btrfs_test_qgroups	tests/qgroup-tests.c	/^int btrfs_test_qgroups(u32 sectorsize, u32 nodesize)$/;"	f
btrfs_test_super	super.c	/^static int btrfs_test_super(struct super_block *s, void *data)$/;"	f	file:
btrfs_test_super_ops	tests/btrfs-tests.c	/^static const struct super_operations btrfs_test_super_ops = {$/;"	v	typeref:struct:super_operations	file:
btrfs_throttle	transaction.c	/^void btrfs_throttle(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_tlv_header	send.h	/^struct btrfs_tlv_header {$/;"	s
btrfs_tlv_type	send.h	/^enum btrfs_tlv_type {$/;"	g
btrfs_tmpfile	inode.c	/^static int btrfs_tmpfile(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
btrfs_trans_handle	transaction.h	/^struct btrfs_trans_handle {$/;"	s
btrfs_trans_handle_cachep	inode.c	/^struct kmem_cache *btrfs_trans_handle_cachep;$/;"	v	typeref:struct:kmem_cache
btrfs_trans_release_chunk_metadata	extent-tree.c	/^void btrfs_trans_release_chunk_metadata(struct btrfs_trans_handle *trans)$/;"	f
btrfs_trans_release_metadata	extent-tree.c	/^void btrfs_trans_release_metadata(struct btrfs_trans_handle *trans,$/;"	f
btrfs_trans_state	transaction.h	/^enum btrfs_trans_state {$/;"	g
btrfs_transaction	transaction.h	/^struct btrfs_transaction {$/;"	s
btrfs_transaction_blocked	transaction.c	/^int btrfs_transaction_blocked(struct btrfs_fs_info *info)$/;"	f
btrfs_transaction_in_commit	transaction.c	/^int btrfs_transaction_in_commit(struct btrfs_fs_info *info)$/;"	f
btrfs_tree_block_key	ctree.h	/^static inline void btrfs_tree_block_key(struct extent_buffer *eb,$/;"	f
btrfs_tree_lock	locking.c	/^void btrfs_tree_lock(struct extent_buffer *eb)$/;"	f
btrfs_tree_read_lock	locking.c	/^void btrfs_tree_read_lock(struct extent_buffer *eb)$/;"	f
btrfs_tree_read_lock_atomic	locking.c	/^int btrfs_tree_read_lock_atomic(struct extent_buffer *eb)$/;"	f
btrfs_tree_read_unlock	locking.c	/^void btrfs_tree_read_unlock(struct extent_buffer *eb)$/;"	f
btrfs_tree_read_unlock_blocking	locking.c	/^void btrfs_tree_read_unlock_blocking(struct extent_buffer *eb)$/;"	f
btrfs_tree_unlock	locking.c	/^void btrfs_tree_unlock(struct extent_buffer *eb)$/;"	f
btrfs_tree_unlock_rw	locking.h	/^static inline void btrfs_tree_unlock_rw(struct extent_buffer *eb, int rw)$/;"	f
btrfs_trim_block_group	free-space-cache.c	/^int btrfs_trim_block_group(struct btrfs_block_group_cache *block_group,$/;"	f
btrfs_trim_free_extents	extent-tree.c	/^static int btrfs_trim_free_extents(struct btrfs_device *device,$/;"	f	file:
btrfs_trim_fs	extent-tree.c	/^int btrfs_trim_fs(struct btrfs_fs_info *fs_info, struct fstrim_range *range)$/;"	f
btrfs_trim_range	free-space-cache.c	/^struct btrfs_trim_range {$/;"	s	file:
btrfs_truncate	inode.c	/^static int btrfs_truncate(struct inode *inode)$/;"	f	file:
btrfs_truncate_block	inode.c	/^int btrfs_truncate_block(struct inode *inode, loff_t from, loff_t len,$/;"	f
btrfs_truncate_free_space_cache	free-space-cache.c	/^int btrfs_truncate_free_space_cache(struct btrfs_trans_handle *trans,$/;"	f
btrfs_truncate_inode_items	inode.c	/^int btrfs_truncate_inode_items(struct btrfs_trans_handle *trans,$/;"	f
btrfs_truncate_item	ctree.c	/^void btrfs_truncate_item(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_trusted_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_trusted_xattr_handler = {$/;"	v	typeref:struct:xattr_handler	file:
btrfs_try_tree_read_lock	locking.c	/^int btrfs_try_tree_read_lock(struct extent_buffer *eb)$/;"	f
btrfs_try_tree_write_lock	locking.c	/^int btrfs_try_tree_write_lock(struct extent_buffer *eb)$/;"	f
btrfs_type_by_mode	inode.c	/^static const unsigned char btrfs_type_by_mode[S_IFMT >> S_SHIFT] = {$/;"	v	file:
btrfs_unfreeze	super.c	/^static int btrfs_unfreeze(struct super_block *sb)$/;"	f	file:
btrfs_unknown_feature_names	sysfs.c	/^static char btrfs_unknown_feature_names[3][NUM_FEATURE_BITS][13];$/;"	v	file:
btrfs_unlink	inode.c	/^static int btrfs_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
btrfs_unlink_inode	inode.c	/^int btrfs_unlink_inode(struct btrfs_trans_handle *trans,$/;"	f
btrfs_unlink_subvol	inode.c	/^int btrfs_unlink_subvol(struct btrfs_trans_handle *trans,$/;"	f
btrfs_unlock_up_safe	ctree.c	/^noinline void btrfs_unlock_up_safe(struct btrfs_path *path, int level)$/;"	f
btrfs_unpin_free_ino	inode-map.c	/^void btrfs_unpin_free_ino(struct btrfs_root *root)$/;"	f
btrfs_update_commit_device_bytes_used	volumes.c	/^void btrfs_update_commit_device_bytes_used(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_update_commit_device_size	volumes.c	/^void btrfs_update_commit_device_size(struct btrfs_fs_info *fs_info)$/;"	f
btrfs_update_delayed_inode	delayed-inode.c	/^static inline int btrfs_update_delayed_inode(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_update_device	volumes.c	/^static noinline int btrfs_update_device(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_update_iflags	ioctl.c	/^void btrfs_update_iflags(struct inode *inode)$/;"	f
btrfs_update_inode	inode.c	/^noinline int btrfs_update_inode(struct btrfs_trans_handle *trans,$/;"	f
btrfs_update_inode_fallback	inode.c	/^noinline int btrfs_update_inode_fallback(struct btrfs_trans_handle *trans,$/;"	f
btrfs_update_inode_item	inode.c	/^static noinline int btrfs_update_inode_item(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_update_reloc_root	relocation.c	/^int btrfs_update_reloc_root(struct btrfs_trans_handle *trans,$/;"	f
btrfs_update_root	root-tree.c	/^int btrfs_update_root(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f
btrfs_update_root_times	root-tree.c	/^void btrfs_update_root_times(struct btrfs_trans_handle *trans,$/;"	f
btrfs_update_time	inode.c	/^static int btrfs_update_time(struct inode *inode, struct timespec *now,$/;"	f	file:
btrfs_user_xattr_handler	xattr.c	/^static const struct xattr_handler btrfs_user_xattr_handler = {$/;"	v	typeref:struct:xattr_handler	file:
btrfs_uuid_iter_rem	uuid-tree.c	/^static int btrfs_uuid_iter_rem(struct btrfs_root *uuid_root, u8 *uuid, u8 type,$/;"	f	file:
btrfs_uuid_rescan_kthread	volumes.c	/^static int btrfs_uuid_rescan_kthread(void *data)$/;"	f	file:
btrfs_uuid_scan_kthread	volumes.c	/^static int btrfs_uuid_scan_kthread(void *data)$/;"	f	file:
btrfs_uuid_to_key	uuid-tree.c	/^static void btrfs_uuid_to_key(u8 *uuid, u8 type, struct btrfs_key *key)$/;"	f	file:
btrfs_uuid_tree_add	uuid-tree.c	/^int btrfs_uuid_tree_add(struct btrfs_trans_handle *trans,$/;"	f
btrfs_uuid_tree_iterate	uuid-tree.c	/^int btrfs_uuid_tree_iterate(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_uuid_tree_lookup	uuid-tree.c	/^static int btrfs_uuid_tree_lookup(struct btrfs_root *uuid_root, u8 *uuid,$/;"	f	file:
btrfs_uuid_tree_rem	uuid-tree.c	/^int btrfs_uuid_tree_rem(struct btrfs_trans_handle *trans,$/;"	f
btrfs_verify_qgroup_counts	qgroup.c	/^int btrfs_verify_qgroup_counts(struct btrfs_fs_info *fs_info, u64 qgroupid,$/;"	f
btrfs_wait_and_free_delalloc_work	inode.c	/^void btrfs_wait_and_free_delalloc_work(struct btrfs_delalloc_work *work)$/;"	f
btrfs_wait_bg_reservations_atomic_t	extent-tree.c	/^static int btrfs_wait_bg_reservations_atomic_t(atomic_t *a)$/;"	f	file:
btrfs_wait_block_group_reservations	extent-tree.c	/^void btrfs_wait_block_group_reservations(struct btrfs_block_group_cache *bg)$/;"	f
btrfs_wait_cache_io	free-space-cache.c	/^int btrfs_wait_cache_io(struct btrfs_trans_handle *trans,$/;"	f
btrfs_wait_cache_io_root	free-space-cache.c	/^static int btrfs_wait_cache_io_root(struct btrfs_root *root,$/;"	f	file:
btrfs_wait_delalloc_flush	transaction.c	/^static inline void btrfs_wait_delalloc_flush(struct btrfs_fs_info *fs_info)$/;"	f	file:
btrfs_wait_extents	transaction.c	/^int btrfs_wait_extents(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_wait_for_commit	transaction.c	/^int btrfs_wait_for_commit(struct btrfs_fs_info *fs_info, u64 transid)$/;"	f
btrfs_wait_for_no_snapshotting_writes	ioctl.c	/^static void btrfs_wait_for_no_snapshotting_writes(struct btrfs_root *root)$/;"	f	file:
btrfs_wait_for_snapshot_creation	extent-tree.c	/^void btrfs_wait_for_snapshot_creation(struct btrfs_root *root)$/;"	f
btrfs_wait_logged_extents	ordered-data.c	/^void btrfs_wait_logged_extents(struct btrfs_trans_handle *trans,$/;"	f
btrfs_wait_nocow_writers	extent-tree.c	/^void btrfs_wait_nocow_writers(struct btrfs_block_group_cache *bg)$/;"	f
btrfs_wait_nocow_writers_atomic_t	extent-tree.c	/^static int btrfs_wait_nocow_writers_atomic_t(atomic_t *a)$/;"	f	file:
btrfs_wait_ordered_extents	ordered-data.c	/^u64 btrfs_wait_ordered_extents(struct btrfs_root *root, u64 nr,$/;"	f
btrfs_wait_ordered_range	ordered-data.c	/^int btrfs_wait_ordered_range(struct inode *inode, u64 start, u64 len)$/;"	f
btrfs_wait_ordered_roots	ordered-data.c	/^u64 btrfs_wait_ordered_roots(struct btrfs_fs_info *fs_info, u64 nr,$/;"	f
btrfs_wait_pending_ordered	transaction.c	/^btrfs_wait_pending_ordered(struct btrfs_transaction *cur_trans)$/;"	f	file:
btrfs_wait_tree_block_writeback	disk-io.c	/^void btrfs_wait_tree_block_writeback(struct extent_buffer *buf)$/;"	f
btrfs_wait_tree_log_extents	transaction.c	/^int btrfs_wait_tree_log_extents(struct btrfs_root *log_root, int mark)$/;"	f
btrfs_warn	ctree.h	3313;"	d
btrfs_warn_in_rcu	ctree.h	3331;"	d
btrfs_warn_rl	ctree.h	3367;"	d
btrfs_warn_rl_in_rcu	ctree.h	3349;"	d
btrfs_whiteout_for_rename	inode.c	/^static int btrfs_whiteout_for_rename(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_work	async-thread.h	/^struct btrfs_work {$/;"	s
btrfs_work_func_t	async-thread.h	/^typedef void (*btrfs_work_func_t)(struct work_struct *arg);$/;"	t
btrfs_work_owner	async-thread.c	/^btrfs_work_owner(const struct btrfs_work *work)$/;"	f
btrfs_workqueue	async-thread.c	/^struct btrfs_workqueue {$/;"	s	file:
btrfs_workqueue_normal_congested	async-thread.c	/^bool btrfs_workqueue_normal_congested(const struct btrfs_workqueue *wq)$/;"	f
btrfs_workqueue_owner	async-thread.c	/^btrfs_workqueue_owner(const struct __btrfs_workqueue *wq)$/;"	f
btrfs_workqueue_set_max	async-thread.c	/^void btrfs_workqueue_set_max(struct btrfs_workqueue *wq, int limit_active)$/;"	f
btrfs_wq_endio_type	disk-io.h	/^enum btrfs_wq_endio_type {$/;"	g
btrfs_wq_run_delayed_node	delayed-inode.c	/^static int btrfs_wq_run_delayed_node(struct btrfs_delayed_root *delayed_root,$/;"	f	file:
btrfs_wq_submit_bio	disk-io.c	/^blk_status_t btrfs_wq_submit_bio(struct btrfs_fs_info *fs_info, struct bio *bio,$/;"	f
btrfs_write_and_wait_marked_extents	transaction.c	/^static int btrfs_write_and_wait_marked_extents(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_write_and_wait_transaction	transaction.c	/^static int btrfs_write_and_wait_transaction(struct btrfs_trans_handle *trans,$/;"	f	file:
btrfs_write_dirty_block_groups	extent-tree.c	/^int btrfs_write_dirty_block_groups(struct btrfs_trans_handle *trans,$/;"	f
btrfs_write_inode	inode.c	/^int btrfs_write_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f
btrfs_write_marked_extents	transaction.c	/^int btrfs_write_marked_extents(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_write_out_cache	free-space-cache.c	/^int btrfs_write_out_cache(struct btrfs_fs_info *fs_info,$/;"	f
btrfs_write_out_ino_cache	free-space-cache.c	/^int btrfs_write_out_ino_cache(struct btrfs_root *root,$/;"	f
btrfs_write_tree_block	disk-io.c	/^int btrfs_write_tree_block(struct extent_buffer *buf)$/;"	f
btrfs_writeback_inodes_sb_nr	extent-tree.c	/^static void btrfs_writeback_inodes_sb_nr(struct btrfs_fs_info *fs_info,$/;"	f	file:
btrfs_writepage	inode.c	/^static int btrfs_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
btrfs_writepage_end_io_hook	inode.c	/^static void btrfs_writepage_end_io_hook(struct page *page, u64 start, u64 end,$/;"	f	file:
btrfs_writepage_fixup	inode.c	/^struct btrfs_writepage_fixup {$/;"	s	file:
btrfs_writepage_fixup_worker	inode.c	/^static void btrfs_writepage_fixup_worker(struct btrfs_work *work)$/;"	f	file:
btrfs_writepage_start_hook	inode.c	/^static int btrfs_writepage_start_hook(struct page *page, u64 start, u64 end)$/;"	f	file:
btrfs_writepages	inode.c	/^static int btrfs_writepages(struct address_space *mapping,$/;"	f	file:
btrfs_xattr_handler_get	xattr.c	/^static int btrfs_xattr_handler_get(const struct xattr_handler *handler,$/;"	f	file:
btrfs_xattr_handler_set	xattr.c	/^static int btrfs_xattr_handler_set(const struct xattr_handler *handler,$/;"	f	file:
btrfs_xattr_handler_set_prop	xattr.c	/^static int btrfs_xattr_handler_set_prop(const struct xattr_handler *handler,$/;"	f	file:
btrfs_xattr_handlers	xattr.c	/^const struct xattr_handler *btrfs_xattr_handlers[] = {$/;"	v	typeref:struct:xattr_handler
btrfs_xattr_security_init	xattr.c	/^int btrfs_xattr_security_init(struct btrfs_trans_handle *trans,$/;"	f
btrfs_zlib_compress	zlib.c	/^const struct btrfs_compress_op btrfs_zlib_compress = {$/;"	v	typeref:struct:btrfs_compress_op
btrfs_zstd_compress	zstd.c	/^const struct btrfs_compress_op btrfs_zstd_compress = {$/;"	v	typeref:struct:btrfs_compress_op
btrfsic_bh_end_io	check-integrity.c	/^static void btrfsic_bh_end_io(struct buffer_head *bh, int uptodate)$/;"	f	file:
btrfsic_bio_end_io	check-integrity.c	/^static void btrfsic_bio_end_io(struct bio *bp)$/;"	f	file:
btrfsic_block	check-integrity.c	/^struct btrfsic_block {$/;"	s	file:
btrfsic_block_alloc	check-integrity.c	/^static struct btrfsic_block *btrfsic_block_alloc(void)$/;"	f	file:
btrfsic_block_data_ctx	check-integrity.c	/^struct btrfsic_block_data_ctx {$/;"	s	file:
btrfsic_block_free	check-integrity.c	/^static void btrfsic_block_free(struct btrfsic_block *b)$/;"	f	file:
btrfsic_block_hashtable	check-integrity.c	/^struct btrfsic_block_hashtable {$/;"	s	file:
btrfsic_block_hashtable_add	check-integrity.c	/^static void btrfsic_block_hashtable_add(struct btrfsic_block *b,$/;"	f	file:
btrfsic_block_hashtable_init	check-integrity.c	/^static void btrfsic_block_hashtable_init(struct btrfsic_block_hashtable *h)$/;"	f	file:
btrfsic_block_hashtable_lookup	check-integrity.c	/^static struct btrfsic_block *btrfsic_block_hashtable_lookup($/;"	f	file:
btrfsic_block_hashtable_remove	check-integrity.c	/^static void btrfsic_block_hashtable_remove(struct btrfsic_block *b)$/;"	f	file:
btrfsic_block_init	check-integrity.c	/^static void btrfsic_block_init(struct btrfsic_block *b)$/;"	f	file:
btrfsic_block_link	check-integrity.c	/^struct btrfsic_block_link {$/;"	s	file:
btrfsic_block_link_alloc	check-integrity.c	/^static struct btrfsic_block_link *btrfsic_block_link_alloc(void)$/;"	f	file:
btrfsic_block_link_free	check-integrity.c	/^static void btrfsic_block_link_free(struct btrfsic_block_link *l)$/;"	f	file:
btrfsic_block_link_hashtable	check-integrity.c	/^struct btrfsic_block_link_hashtable {$/;"	s	file:
btrfsic_block_link_hashtable_add	check-integrity.c	/^static void btrfsic_block_link_hashtable_add($/;"	f	file:
btrfsic_block_link_hashtable_init	check-integrity.c	/^static void btrfsic_block_link_hashtable_init($/;"	f	file:
btrfsic_block_link_hashtable_lookup	check-integrity.c	/^static struct btrfsic_block_link *btrfsic_block_link_hashtable_lookup($/;"	f	file:
btrfsic_block_link_hashtable_remove	check-integrity.c	/^static void btrfsic_block_link_hashtable_remove(struct btrfsic_block_link *l)$/;"	f	file:
btrfsic_block_link_init	check-integrity.c	/^static void btrfsic_block_link_init(struct btrfsic_block_link *l)$/;"	f	file:
btrfsic_block_link_lookup_or_add	check-integrity.c	/^static struct btrfsic_block_link *btrfsic_block_link_lookup_or_add($/;"	f	file:
btrfsic_block_lookup_or_add	check-integrity.c	/^static struct btrfsic_block *btrfsic_block_lookup_or_add($/;"	f	file:
btrfsic_check_all_ref_blocks	check-integrity.c	/^static int btrfsic_check_all_ref_blocks(struct btrfsic_state *state,$/;"	f	file:
btrfsic_cmp_log_and_dev_bytenr	check-integrity.c	/^static void btrfsic_cmp_log_and_dev_bytenr(struct btrfsic_state *state,$/;"	f	file:
btrfsic_create_link_to_next_block	check-integrity.c	/^static int btrfsic_create_link_to_next_block($/;"	f	file:
btrfsic_dev_state	check-integrity.c	/^struct btrfsic_dev_state {$/;"	s	file:
btrfsic_dev_state_alloc	check-integrity.c	/^static struct btrfsic_dev_state *btrfsic_dev_state_alloc(void)$/;"	f	file:
btrfsic_dev_state_free	check-integrity.c	/^static void btrfsic_dev_state_free(struct btrfsic_dev_state *ds)$/;"	f	file:
btrfsic_dev_state_hashtable	check-integrity.c	/^static struct btrfsic_dev_state_hashtable btrfsic_dev_state_hashtable;$/;"	v	typeref:struct:btrfsic_dev_state_hashtable	file:
btrfsic_dev_state_hashtable	check-integrity.c	/^struct btrfsic_dev_state_hashtable {$/;"	s	file:
btrfsic_dev_state_hashtable_add	check-integrity.c	/^static void btrfsic_dev_state_hashtable_add($/;"	f	file:
btrfsic_dev_state_hashtable_init	check-integrity.c	/^static void btrfsic_dev_state_hashtable_init($/;"	f	file:
btrfsic_dev_state_hashtable_lookup	check-integrity.c	/^static struct btrfsic_dev_state *btrfsic_dev_state_hashtable_lookup(dev_t dev,$/;"	f	file:
btrfsic_dev_state_hashtable_remove	check-integrity.c	/^static void btrfsic_dev_state_hashtable_remove(struct btrfsic_dev_state *ds)$/;"	f	file:
btrfsic_dev_state_init	check-integrity.c	/^static void btrfsic_dev_state_init(struct btrfsic_dev_state *ds)$/;"	f	file:
btrfsic_dev_state_lookup	check-integrity.c	/^static struct btrfsic_dev_state *btrfsic_dev_state_lookup(dev_t dev)$/;"	f	file:
btrfsic_dump_database	check-integrity.c	/^static void btrfsic_dump_database(struct btrfsic_state *state)$/;"	f	file:
btrfsic_dump_tree	check-integrity.c	/^static void btrfsic_dump_tree(const struct btrfsic_state *state)$/;"	f	file:
btrfsic_dump_tree_sub	check-integrity.c	/^static void btrfsic_dump_tree_sub(const struct btrfsic_state *state,$/;"	f	file:
btrfsic_get_block_type	check-integrity.c	/^static char btrfsic_get_block_type(const struct btrfsic_state *state,$/;"	f	file:
btrfsic_handle_extent_data	check-integrity.c	/^static int btrfsic_handle_extent_data($/;"	f	file:
btrfsic_is_block_ref_by_superblock	check-integrity.c	/^static int btrfsic_is_block_ref_by_superblock($/;"	f	file:
btrfsic_is_initialized	check-integrity.c	/^static int btrfsic_is_initialized;$/;"	v	file:
btrfsic_map_block	check-integrity.c	/^static int btrfsic_map_block(struct btrfsic_state *state, u64 bytenr, u32 len,$/;"	f	file:
btrfsic_mount	check-integrity.c	/^int btrfsic_mount(struct btrfs_fs_info *fs_info,$/;"	f
btrfsic_mutex	check-integrity.c	/^static struct mutex btrfsic_mutex;$/;"	v	typeref:struct:mutex	file:
btrfsic_print_add_link	check-integrity.c	/^static void btrfsic_print_add_link(const struct btrfsic_state *state,$/;"	f	file:
btrfsic_print_rem_link	check-integrity.c	/^static void btrfsic_print_rem_link(const struct btrfsic_state *state,$/;"	f	file:
btrfsic_process_metablock	check-integrity.c	/^static int btrfsic_process_metablock($/;"	f	file:
btrfsic_process_superblock	check-integrity.c	/^static int btrfsic_process_superblock(struct btrfsic_state *state,$/;"	f	file:
btrfsic_process_superblock_dev_mirror	check-integrity.c	/^static int btrfsic_process_superblock_dev_mirror($/;"	f	file:
btrfsic_process_written_block	check-integrity.c	/^static void btrfsic_process_written_block(struct btrfsic_dev_state *dev_state,$/;"	f	file:
btrfsic_process_written_superblock	check-integrity.c	/^static int btrfsic_process_written_superblock($/;"	f	file:
btrfsic_read_block	check-integrity.c	/^static int btrfsic_read_block(struct btrfsic_state *state,$/;"	f	file:
btrfsic_read_from_block_data	check-integrity.c	/^static void btrfsic_read_from_block_data($/;"	f	file:
btrfsic_release_block_ctx	check-integrity.c	/^static void btrfsic_release_block_ctx(struct btrfsic_block_data_ctx *block_ctx)$/;"	f	file:
btrfsic_stack_frame	check-integrity.c	/^struct btrfsic_stack_frame {$/;"	s	file:
btrfsic_stack_frame_alloc	check-integrity.c	/^static struct btrfsic_stack_frame *btrfsic_stack_frame_alloc(void)$/;"	f	file:
btrfsic_stack_frame_free	check-integrity.c	/^static void btrfsic_stack_frame_free(struct btrfsic_stack_frame *sf)$/;"	f	file:
btrfsic_state	check-integrity.c	/^struct btrfsic_state {$/;"	s	file:
btrfsic_submit_bh	check-integrity.c	/^int btrfsic_submit_bh(int op, int op_flags, struct buffer_head *bh)$/;"	f
btrfsic_submit_bh	check-integrity.h	27;"	d
btrfsic_submit_bio	check-integrity.c	/^void btrfsic_submit_bio(struct bio *bio)$/;"	f
btrfsic_submit_bio	check-integrity.h	28;"	d
btrfsic_submit_bio_wait	check-integrity.c	/^int btrfsic_submit_bio_wait(struct bio *bio)$/;"	f
btrfsic_submit_bio_wait	check-integrity.h	29;"	d
btrfsic_test_for_metadata	check-integrity.c	/^static int btrfsic_test_for_metadata(struct btrfsic_state *state,$/;"	f	file:
btrfsic_unmount	check-integrity.c	/^void btrfsic_unmount(struct btrfs_fs_devices *fs_devices)$/;"	f
buf	lzo.c	/^	void *buf;	\/* where decompressed data goes *\/$/;"	m	struct:workspace	file:
buf	send.c	/^			char *buf;$/;"	m	struct:fs_path::__anon1::__anon2	file:
buf	zlib.c	/^	char *buf;$/;"	m	struct:workspace	file:
buf	zstd.c	/^	char *buf;$/;"	m	struct:workspace	file:
buf_len	send.c	/^			unsigned short buf_len:15;$/;"	m	struct:fs_path::__anon1::__anon2	file:
buffer_lock	ctree.h	/^	spinlock_t buffer_lock;$/;"	m	struct:btrfs_fs_info
buffer_radix	ctree.h	/^	struct radix_tree_root buffer_radix;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::radix_tree_root
build_backref_tree	relocation.c	/^struct backref_node *build_backref_tree(struct reloc_control *rc,$/;"	f	file:
build_ino_list	ioctl.c	/^static int build_ino_list(u64 inum, u64 offset, u64 root, void *ctx)$/;"	f	file:
bytenr	ctree.h	/^	__le64 bytenr; \/* this block number *\/$/;"	m	struct:btrfs_super_block
bytenr	ctree.h	/^	__le64 bytenr; \/* which block this node is supposed to live in *\/$/;"	m	struct:btrfs_header
bytenr	delayed-ref.h	/^	u64 bytenr;$/;"	m	struct:btrfs_delayed_ref_node
bytenr	inode.c	/^	u64 bytenr;$/;"	m	struct:new_sa_defrag_extent	file:
bytenr	inode.c	/^	u64 bytenr;$/;"	m	struct:old_sa_defrag_extent	file:
bytenr	ordered-data.h	/^	u64 bytenr;$/;"	m	struct:btrfs_ordered_sum
bytenr	qgroup.h	/^	u64 bytenr;$/;"	m	struct:btrfs_qgroup_extent_record
bytenr	relocation.c	/^	u64 bytenr;$/;"	m	struct:backref_node	file:
bytenr	relocation.c	/^	u64 bytenr;$/;"	m	struct:mapping_node	file:
bytenr	relocation.c	/^	u64 bytenr;$/;"	m	struct:tree_block	file:
bytenr	relocation.c	/^	u64 bytenr;$/;"	m	struct:tree_entry	file:
bytes	btrfs_inode.h	/^	u64 bytes;$/;"	m	struct:btrfs_dio_private
bytes	extent-tree.c	/^	u64 bytes;$/;"	m	struct:reserve_ticket	file:
bytes	free-space-cache.c	/^	u64 bytes;$/;"	m	struct:btrfs_trim_range	file:
bytes	free-space-cache.h	/^	u64 bytes;$/;"	m	struct:btrfs_free_space
bytes_changed	extent_io.h	/^	unsigned int bytes_changed;$/;"	m	struct:extent_changeset
bytes_left	ordered-data.h	/^	u64 bytes_left;$/;"	m	struct:btrfs_ordered_extent
bytes_may_use	ctree.h	/^	u64 bytes_may_use;	\/* number of bytes that may be used for$/;"	m	struct:btrfs_space_info
bytes_may_use	sysfs.c	/^SPACE_INFO_ATTR(bytes_may_use);$/;"	v
bytes_pinned	ctree.h	/^	u64 bytes_pinned;	\/* total bytes pinned, will be freed when the$/;"	m	struct:btrfs_space_info
bytes_pinned	sysfs.c	/^SPACE_INFO_ATTR(bytes_pinned);$/;"	v
bytes_readonly	ctree.h	/^	u64 bytes_readonly;	\/* total bytes that are read only *\/$/;"	m	struct:btrfs_space_info
bytes_readonly	sysfs.c	/^SPACE_INFO_ATTR(bytes_readonly);$/;"	v
bytes_reserved	ctree.h	/^	u64 bytes_reserved;	\/* total bytes the allocator has reserved for$/;"	m	struct:btrfs_space_info
bytes_reserved	delayed-inode.h	/^	u64 bytes_reserved;$/;"	m	struct:btrfs_delayed_item
bytes_reserved	delayed-inode.h	/^	u64 bytes_reserved;$/;"	m	struct:btrfs_delayed_node
bytes_reserved	sysfs.c	/^SPACE_INFO_ATTR(bytes_reserved);$/;"	v
bytes_reserved	transaction.h	/^	u64 bytes_reserved;$/;"	m	struct:btrfs_trans_handle
bytes_super	ctree.h	/^	u64 bytes_super;$/;"	m	struct:btrfs_block_group_cache
bytes_to_bits	free-space-cache.c	/^static inline unsigned long bytes_to_bits(u64 bytes, u32 unit)$/;"	f	file:
bytes_used	ctree.h	/^	__le64 bytes_used;$/;"	m	struct:btrfs_root_backup
bytes_used	ctree.h	/^	__le64 bytes_used;$/;"	m	struct:btrfs_super_block
bytes_used	ctree.h	/^	u64 bytes_used;		\/* total bytes used,$/;"	m	struct:btrfs_space_info
bytes_used	sysfs.c	/^SPACE_INFO_ATTR(bytes_used);$/;"	v
bytes_used	volumes.h	/^	u64 bytes_used;$/;"	m	struct:btrfs_device
bytes_used	volumes.h	/^BTRFS_DEVICE_GETSET_FUNCS(bytes_used);$/;"	v
cache_block_group	extent-tree.c	/^static int cache_block_group(struct btrfs_block_group_cache *cache,$/;"	f	file:
cache_generation	ctree.h	/^	__le64 cache_generation;$/;"	m	struct:btrfs_super_block
cache_generation	ctree.h	/^	u64 cache_generation;$/;"	m	struct:btrfs_block_group_cache
cache_helper	async-thread.c	/^BTRFS_WORK_HELPER(cache_helper);$/;"	v
cache_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(cache_helper);$/;"	v
cache_lock	ctree.h	/^	spinlock_t cache_lock;$/;"	m	struct:btrfs_stripe_hash_table
cache_node	ctree.h	/^	struct rb_node cache_node;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::rb_node
cache_rbio	raid56.c	/^static void cache_rbio(struct btrfs_raid_bio *rbio)$/;"	f	file:
cache_rbio_pages	raid56.c	/^static void cache_rbio_pages(struct btrfs_raid_bio *rbio)$/;"	f	file:
cache_save_setup	extent-tree.c	/^static int cache_save_setup(struct btrfs_block_group_cache *block_group,$/;"	f	file:
cache_size	ctree.h	/^	int cache_size;$/;"	m	struct:btrfs_stripe_hash_table
cache_state	extent_io.c	/^static void cache_state(struct extent_state *state,$/;"	f	file:
cache_state_if_flags	extent_io.c	/^static void cache_state_if_flags(struct extent_state *state,$/;"	f	file:
cache_write_mutex	transaction.h	/^	struct mutex cache_write_mutex;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::mutex
cache_writeout_mutex	free-space-cache.h	/^	struct mutex cache_writeout_mutex;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:btrfs_free_space_ctl::mutex
cached	ctree.h	/^	int cached;$/;"	m	struct:btrfs_block_group_cache
cached	extent_io.c	/^	bool cached;$/;"	m	struct:fiemap_cache	file:
caching_block_groups	ctree.h	/^	struct list_head caching_block_groups;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
caching_ctl	ctree.h	/^	struct btrfs_caching_control *caching_ctl;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_caching_control
caching_kthread	inode-map.c	/^static int caching_kthread(void *data)$/;"	f	file:
caching_thread	extent-tree.c	/^static noinline void caching_thread(struct btrfs_work *work)$/;"	f	file:
caching_workers	ctree.h	/^	struct btrfs_workqueue *caching_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
calc_csum_metadata_size	extent-tree.c	/^static u64 calc_csum_metadata_size(struct btrfs_inode *inode, u64 num_bytes,$/;"	f	file:
calc_global_rsv_need_space	extent-tree.c	/^static inline u64 calc_global_rsv_need_space(struct btrfs_block_rsv *global)$/;"	f	file:
calc_reclaim_items_nr	extent-tree.c	/^static inline u64 calc_reclaim_items_nr(struct btrfs_fs_info *fs_info,$/;"	f	file:
calcu_metadata_size	relocation.c	/^u64 calcu_metadata_size(struct reloc_control *rc,$/;"	f	file:
can_discard	volumes.h	/^	int can_discard;$/;"	m	struct:btrfs_device
can_flush_pending_bgs	transaction.h	/^	bool can_flush_pending_bgs;$/;"	m	struct:btrfs_trans_handle
can_modify_feature	sysfs.c	/^static int can_modify_feature(struct btrfs_feature_attr *fa)$/;"	f	file:
can_nocow_extent	inode.c	/^noinline int can_nocow_extent(struct inode *inode, u64 offset, u64 *len,$/;"	f
can_overcommit	extent-tree.c	/^static int can_overcommit(struct btrfs_fs_info *fs_info,$/;"	f	file:
can_rmdir	send.c	/^static int can_rmdir(struct send_ctx *sctx, u64 dir, u64 dir_gen,$/;"	f	file:
cancel_req	scrub.c	/^	atomic_t		cancel_req;$/;"	m	struct:scrub_ctx	file:
cb	raid56.c	/^	struct blk_plug_cb cb;$/;"	m	struct:btrfs_plug_cb	typeref:struct:btrfs_plug_cb::blk_plug_cb	file:
cbuf	lzo.c	/^	void *cbuf;	\/* where compressed data goes *\/$/;"	m	struct:workspace	file:
changed	relocation.c	/^	struct list_head changed;$/;"	m	struct:backref_cache	typeref:struct:backref_cache::list_head	file:
changed_cb	send.c	/^static int changed_cb(struct btrfs_root *left_root,$/;"	f	file:
changed_extent	send.c	/^static int changed_extent(struct send_ctx *sctx,$/;"	f	file:
changed_inode	send.c	/^static int changed_inode(struct send_ctx *sctx,$/;"	f	file:
changed_ref	send.c	/^static int changed_ref(struct send_ctx *sctx,$/;"	f	file:
changed_xattr	send.c	/^static int changed_xattr(struct send_ctx *sctx,$/;"	f	file:
check_async_write	disk-io.c	/^static int check_async_write(unsigned long bio_flags)$/;"	f	file:
check_barrier_error	disk-io.c	/^static int check_barrier_error(struct btrfs_fs_info *fs_info)$/;"	f	file:
check_buffer_tree_ref	extent_io.c	/^static void check_buffer_tree_ref(struct extent_buffer *eb)$/;"	f	file:
check_cache_empty	tests/free-space-tests.c	/^static int check_cache_empty(struct btrfs_block_group_cache *cache)$/;"	f	file:
check_can_nocow	file.c	/^static noinline int check_can_nocow(struct btrfs_inode *inode, loff_t pos,$/;"	f	file:
check_committed_ref	extent-tree.c	/^static noinline int check_committed_ref(struct btrfs_root *root,$/;"	f	file:
check_compressed_csum	compression.c	/^static int check_compressed_csum(struct btrfs_inode *inode,$/;"	f	file:
check_crcs	ctree.h	/^	unsigned check_crcs:1;$/;"	m	struct:btrfs_io_ctl
check_defrag_in_cache	ioctl.c	/^static int check_defrag_in_cache(struct inode *inode, u64 offset, u32 thresh)$/;"	f	file:
check_delayed_ref	extent-tree.c	/^static noinline int check_delayed_ref(struct btrfs_root *root,$/;"	f	file:
check_direct_IO	inode.c	/^static ssize_t check_direct_IO(struct btrfs_fs_info *fs_info,$/;"	f	file:
check_eb_bitmap	tests/extent-io-tests.c	/^static int check_eb_bitmap(unsigned long *bitmap, struct extent_buffer *eb,$/;"	f	file:
check_extent_flags	relocation.c	/^static int check_extent_flags(u64 flags)$/;"	f	file:
check_extent_in_eb	backref.c	/^static int check_extent_in_eb(const struct btrfs_key *key,$/;"	f	file:
check_extent_io_range	extent_io.h	/^	void (*check_extent_io_range)(void *private_data, const char *caller,$/;"	m	struct:extent_io_ops
check_extent_to_block	scrub.c	/^static int check_extent_to_block(struct btrfs_inode *inode, u64 start, u64 len,$/;"	f	file:
check_feature	ioctl.c	5416;"	d	file:
check_feature_bits	ioctl.c	/^static int check_feature_bits(struct btrfs_fs_info *fs_info,$/;"	f	file:
check_flags	ioctl.c	/^static int check_flags(unsigned int flags)$/;"	f	file:
check_free_space_extents	tests/free-space-tree-tests.c	/^static int check_free_space_extents(struct btrfs_trans_handle *trans,$/;"	f	file:
check_integrity_print_mask	ctree.h	/^	u32 check_integrity_print_mask;$/;"	m	struct:btrfs_fs_info
check_item_in_log	tree-log.c	/^static noinline int check_item_in_log(struct btrfs_trans_handle *trans,$/;"	f	file:
check_leaf	disk-io.c	/^static noinline int check_leaf(struct btrfs_root *root,$/;"	f	file:
check_node	disk-io.c	/^static int check_node(struct btrfs_root *root, struct extent_buffer *node)$/;"	f	file:
check_num_extents_and_bitmaps	tests/free-space-tests.c	/^check_num_extents_and_bitmaps(const struct btrfs_block_group_cache *cache,$/;"	f	file:
check_page_uptodate	extent_io.c	/^static void check_page_uptodate(struct extent_io_tree *tree, struct page *page)$/;"	f	file:
check_parent_dirs_for_sync	tree-log.c	/^static noinline int check_parent_dirs_for_sync(struct btrfs_trans_handle *trans,$/;"	f	file:
check_raid56_incompat_flag	volumes.c	/^static void check_raid56_incompat_flag(struct btrfs_fs_info *info, u64 type)$/;"	f	file:
check_ref_cleanup	extent-tree.c	/^static noinline int check_ref_cleanup(struct btrfs_trans_handle *trans,$/;"	f	file:
check_system_chunk	extent-tree.c	/^void check_system_chunk(struct btrfs_trans_handle *trans,$/;"	f
check_tree_block_fsid	disk-io.c	/^static int check_tree_block_fsid(struct btrfs_fs_info *fs_info,$/;"	f	file:
checked	relocation.c	/^	unsigned int checked:1;$/;"	m	struct:backref_node	file:
checksum_error	scrub.c	/^		unsigned int	checksum_error:1;$/;"	m	struct:scrub_block::__anon4	file:
chunk_alloc	ctree.h	/^	unsigned int chunk_alloc:1;	\/* set if we are allocating a chunk *\/$/;"	m	struct:btrfs_space_info
chunk_block_rsv	ctree.h	/^	struct btrfs_block_rsv chunk_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_block_rsv
chunk_bytes_reserved	transaction.h	/^	u64 chunk_bytes_reserved;$/;"	m	struct:btrfs_trans_handle
chunk_devid_filter	volumes.c	/^static int chunk_devid_filter(struct extent_buffer *leaf,$/;"	f	file:
chunk_drange_filter	volumes.c	/^static int chunk_drange_filter(struct extent_buffer *leaf,$/;"	f	file:
chunk_mutex	ctree.h	/^	struct mutex chunk_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
chunk_profiles_filter	volumes.c	/^static int chunk_profiles_filter(u64 chunk_type,$/;"	f	file:
chunk_root	ctree.h	/^	__le64 chunk_root;$/;"	m	struct:btrfs_root_backup
chunk_root	ctree.h	/^	__le64 chunk_root;$/;"	m	struct:btrfs_super_block
chunk_root	ctree.h	/^	struct btrfs_root *chunk_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
chunk_root_gen	ctree.h	/^	__le64 chunk_root_gen;$/;"	m	struct:btrfs_root_backup
chunk_root_generation	ctree.h	/^	__le64 chunk_root_generation;$/;"	m	struct:btrfs_super_block
chunk_root_level	ctree.h	/^	u8 chunk_root_level;$/;"	m	struct:btrfs_root_backup
chunk_root_level	ctree.h	/^	u8 chunk_root_level;$/;"	m	struct:btrfs_super_block
chunk_soft_convert_filter	volumes.c	/^static int chunk_soft_convert_filter(u64 chunk_type,$/;"	f	file:
chunk_stripes_range_filter	volumes.c	/^static int chunk_stripes_range_filter(struct extent_buffer *leaf,$/;"	f	file:
chunk_tree_uuid	ctree.h	/^	u8 chunk_tree_uuid[BTRFS_UUID_SIZE];$/;"	m	struct:btrfs_fs_info
chunk_tree_uuid	ctree.h	/^	u8 chunk_tree_uuid[BTRFS_UUID_SIZE];$/;"	m	struct:btrfs_header
chunk_usage_filter	volumes.c	/^static int chunk_usage_filter(struct btrfs_fs_info *fs_info,$/;"	f	file:
chunk_usage_range_filter	volumes.c	/^static int chunk_usage_range_filter(struct btrfs_fs_info *fs_info, u64 chunk_offset,$/;"	f	file:
chunk_vrange_filter	volumes.c	/^static int chunk_vrange_filter(struct extent_buffer *leaf,$/;"	f	file:
clean_io_failure	extent_io.c	/^int clean_io_failure(struct btrfs_fs_info *fs_info,$/;"	f
clean_tree_block	disk-io.c	/^void clean_tree_block(struct btrfs_fs_info *fs_info,$/;"	f
cleaner_delayed_iput_mutex	ctree.h	/^	struct mutex cleaner_delayed_iput_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
cleaner_kthread	ctree.h	/^	struct task_struct *cleaner_kthread;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::task_struct
cleaner_kthread	disk-io.c	/^static int cleaner_kthread(void *arg)$/;"	f	file:
cleaner_mutex	ctree.h	/^	struct mutex cleaner_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
cleanup_bitmap_list	free-space-cache.c	/^cleanup_bitmap_list(struct list_head *bitmap_list)$/;"	f	file:
cleanup_transaction	transaction.c	/^static void cleanup_transaction(struct btrfs_trans_handle *trans,$/;"	f	file:
cleanup_work_sem	ctree.h	/^	struct rw_semaphore cleanup_work_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rw_semaphore
cleanup_write_cache_enospc	free-space-cache.c	/^cleanup_write_cache_enospc(struct inode *inode,$/;"	f	file:
clear_avail_alloc_bits	extent-tree.c	/^static void clear_avail_alloc_bits(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	file:
clear_bit_hook	extent_io.h	/^	void (*clear_bit_hook)(void *private_data,$/;"	m	struct:extent_io_ops
clear_btree_io_tree	transaction.c	/^static void clear_btree_io_tree(struct extent_io_tree *tree)$/;"	f	file:
clear_em_logging	extent_map.c	/^void clear_em_logging(struct extent_map_tree *tree, struct extent_map *em)$/;"	f
clear_extent_bit	extent_io.c	/^int clear_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f
clear_extent_bits	extent_io.h	/^static inline int clear_extent_bits(struct extent_io_tree *tree, u64 start,$/;"	f
clear_extent_buffer_dirty	extent_io.c	/^void clear_extent_buffer_dirty(struct extent_buffer *eb)$/;"	f
clear_extent_buffer_uptodate	extent_io.c	/^void clear_extent_buffer_uptodate(struct extent_buffer *eb)$/;"	f
clear_extent_dirty	extent_io.h	/^static inline int clear_extent_dirty(struct extent_io_tree *tree, u64 start,$/;"	f
clear_extent_uptodate	extent_io.h	/^static inline int clear_extent_uptodate(struct extent_io_tree *tree, u64 start,$/;"	f
clear_free_space_tree	free-space-tree.c	/^static int clear_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
clear_record_extent_bits	extent_io.c	/^int clear_record_extent_bits(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f
clear_state_bit	extent_io.c	/^static struct extent_state *clear_state_bit(struct extent_io_tree *tree,$/;"	f	file:
clear_state_cb	extent_io.c	/^static void clear_state_cb(struct extent_io_tree *tree,$/;"	f	file:
clone_backref_node	relocation.c	/^static int clone_backref_node(struct btrfs_trans_handle *trans,$/;"	f	file:
clone_copy_inline_extent	ioctl.c	/^static int clone_copy_inline_extent(struct inode *dst,$/;"	f	file:
clone_finish_inode_update	ioctl.c	/^static int clone_finish_inode_update(struct btrfs_trans_handle *trans,$/;"	f	file:
clone_fs_devices	volumes.c	/^static struct btrfs_fs_devices *clone_fs_devices(struct btrfs_fs_devices *orig)$/;"	f	file:
clone_range	send.c	/^static int clone_range(struct send_ctx *sctx,$/;"	f	file:
clone_root	send.c	/^struct clone_root {$/;"	s	file:
clone_roots	send.c	/^	struct clone_root *clone_roots;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::clone_root	file:
clone_roots_cnt	send.c	/^	int clone_roots_cnt;$/;"	m	struct:send_ctx	file:
clone_update_extent_map	ioctl.c	/^static void clone_update_extent_map(struct btrfs_inode *inode,$/;"	f	file:
close_blocks	ctree.c	/^static int close_blocks(u64 blocknr, u64 other, u32 blocksize)$/;"	f	file:
close_ctree	disk-io.c	/^void close_ctree(struct btrfs_fs_info *fs_info)$/;"	f
cluster	relocation.c	/^	struct file_extent_cluster cluster;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::file_extent_cluster	file:
cluster_list	ctree.h	/^	struct list_head cluster_list;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::list_head
cluster_pages_for_defrag	ioctl.c	/^static int cluster_pages_for_defrag(struct inode *inode,$/;"	f	file:
cmd	send.h	/^	__le16 cmd;$/;"	m	struct:btrfs_cmd_header
cmd_send_size	send.c	/^	u64 cmd_send_size[BTRFS_SEND_C_MAX + 1];$/;"	m	struct:send_ctx	file:
cmp_key	send.c	/^	struct btrfs_key *cmp_key;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::btrfs_key	file:
cmp_pages	ioctl.c	/^struct cmp_pages {$/;"	s	file:
collision_resolving_node	check-integrity.c	/^	struct list_head collision_resolving_node;	\/* list node *\/$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block::list_head	file:
collision_resolving_node	check-integrity.c	/^	struct list_head collision_resolving_node;	\/* list node *\/$/;"	m	struct:btrfsic_block_link	typeref:struct:btrfsic_block_link::list_head	file:
collision_resolving_node	check-integrity.c	/^	struct list_head collision_resolving_node;	\/* list node *\/$/;"	m	struct:btrfsic_dev_state	typeref:struct:btrfsic_dev_state::list_head	file:
commit_bytes_used	volumes.h	/^	u64 commit_bytes_used;$/;"	m	struct:btrfs_device
commit_cowonly_roots	transaction.c	/^static noinline int commit_cowonly_roots(struct btrfs_trans_handle *trans,$/;"	f	file:
commit_fs_roots	transaction.c	/^static noinline int commit_fs_roots(struct btrfs_trans_handle *trans,$/;"	f	file:
commit_interval	ctree.h	/^	int commit_interval;$/;"	m	struct:btrfs_fs_info
commit_root	ctree.h	/^	struct extent_buffer *commit_root;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::extent_buffer
commit_root_sem	ctree.h	/^	struct rw_semaphore commit_root_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rw_semaphore
commit_total_bytes	volumes.h	/^	u64 commit_total_bytes;$/;"	m	struct:btrfs_device
commit_wait	transaction.h	/^	wait_queue_head_t commit_wait;$/;"	m	struct:btrfs_transaction
committed_cursor_left	ctree.h	/^	u64 committed_cursor_left;$/;"	m	struct:btrfs_dev_replace
comp_data_refs	delayed-ref.c	/^static int comp_data_refs(struct btrfs_delayed_data_ref *ref2,$/;"	f	file:
comp_keys	ctree.c	/^static int comp_keys(const struct btrfs_disk_key *disk,$/;"	f	file:
comp_tree_refs	delayed-ref.c	/^static int comp_tree_refs(struct btrfs_delayed_tree_ref *ref2,$/;"	f	file:
compare_refs	send.c	/^static int compare_refs(struct send_ctx *sctx, struct btrfs_path *path,$/;"	f	file:
compat_flags	ctree.h	/^	__le64 compat_flags;$/;"	m	struct:btrfs_super_block
compat_ro_flags	ctree.h	/^	__le64 compat_ro_flags;$/;"	m	struct:btrfs_super_block
completion	ctree.h	/^	struct completion completion;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:btrfs_delalloc_work::completion
completion	ordered-data.h	/^	struct completion completion;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::completion
compress_file_range	inode.c	/^static noinline void compress_file_range(struct inode *inode,$/;"	f	file:
compress_pages	compression.h	/^	int (*compress_pages)(struct list_head *workspace,$/;"	m	struct:btrfs_compress_op
compress_type	compression.h	/^	int compress_type;$/;"	m	struct:compressed_bio
compress_type	ctree.h	/^	unsigned long compress_type:4;$/;"	m	struct:btrfs_fs_info
compress_type	extent_map.h	/^	unsigned int compress_type;$/;"	m	struct:extent_map
compress_type	inode.c	/^	int compress_type;$/;"	m	struct:async_extent	file:
compress_type	inode.c	/^	u8 compress_type;$/;"	m	struct:new_sa_defrag_extent	file:
compress_type	ordered-data.h	/^	int compress_type;$/;"	m	struct:btrfs_ordered_extent
compressed_bio	compression.h	/^struct compressed_bio {$/;"	s
compressed_bio_size	compression.c	/^static inline int compressed_bio_size(struct btrfs_fs_info *fs_info,$/;"	f	file:
compressed_len	compression.h	/^	unsigned long compressed_len;$/;"	m	struct:compressed_bio
compressed_only	tests/inode-tests.c	/^static unsigned long compressed_only = 0;$/;"	v	file:
compressed_pages	compression.h	/^	struct page **compressed_pages;$/;"	m	struct:compressed_bio	typeref:struct:compressed_bio::page
compressed_size	inode.c	/^	u64 compressed_size;$/;"	m	struct:async_extent	file:
cont_reading_from_srcdev_mode	ctree.h	/^	u64 cont_reading_from_srcdev_mode;	\/* see #define above *\/$/;"	m	struct:btrfs_dev_replace
contains_pending_extent	volumes.c	/^static int contains_pending_extent(struct btrfs_transaction *transaction,$/;"	f	file:
convert_extent_bit	extent_io.c	/^int convert_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f
convert_extent_item_v0	extent-tree.c	/^static int convert_extent_item_v0(struct btrfs_trans_handle *trans,$/;"	f	file:
convert_free_space_to_bitmaps	free-space-tree.c	/^int convert_free_space_to_bitmaps(struct btrfs_trans_handle *trans,$/;"	f
convert_free_space_to_extents	free-space-tree.c	/^int convert_free_space_to_extents(struct btrfs_trans_handle *trans,$/;"	f
copy_extent_buffer	extent_io.c	/^void copy_extent_buffer(struct extent_buffer *dst, struct extent_buffer *src,$/;"	f
copy_extent_buffer_full	extent_io.c	/^void copy_extent_buffer_full(struct extent_buffer *dst,$/;"	f
copy_for_split	ctree.c	/^static noinline void copy_for_split(struct btrfs_trans_handle *trans,$/;"	f	file:
copy_items	tree-log.c	/^static noinline int copy_items(struct btrfs_trans_handle *trans,$/;"	f	file:
copy_nocow_pages	scrub.c	/^static int copy_nocow_pages(struct scrub_ctx *sctx, u64 logical, u64 len,$/;"	f	file:
copy_nocow_pages_for_inode	scrub.c	/^static int copy_nocow_pages_for_inode(u64 inum, u64 offset, u64 root,$/;"	f	file:
copy_nocow_pages_worker	scrub.c	/^static void copy_nocow_pages_worker(struct btrfs_work *work)$/;"	f	file:
copy_pages	extent_io.c	/^static void copy_pages(struct page *dst_page, struct page *src_page,$/;"	f	file:
copy_to_sk	ioctl.c	/^static noinline int copy_to_sk(struct btrfs_path *path,$/;"	f	file:
could_end_wait	delayed-inode.c	/^static int could_end_wait(struct btrfs_delayed_root *delayed_root, int seq)$/;"	f	file:
count	async-thread.c	/^	unsigned int count;$/;"	m	struct:__btrfs_workqueue	file:
count	backref.c	/^	unsigned int count;$/;"	m	struct:preftree	file:
count	backref.h	/^	int count;$/;"	m	struct:prelim_ref
count	ctree.h	/^	atomic_t count;$/;"	m	struct:btrfs_block_group_cache
count	ctree.h	/^	refcount_t count;$/;"	m	struct:btrfs_caching_control
count	delayed-inode.h	/^	int count;$/;"	m	struct:btrfs_delayed_node
count	extent-tree.c	/^	int count;$/;"	m	struct:async_delayed_refs	file:
count	inode.c	/^	int count;$/;"	m	struct:old_sa_defrag_extent	file:
count_inode_extrefs	tree-log.c	/^static int count_inode_extrefs(struct btrfs_root *root,$/;"	f	file:
count_inode_refs	tree-log.c	/^static int count_inode_refs(struct btrfs_root *root,$/;"	f	file:
count_max_extents	ctree.h	/^static inline u32 count_max_extents(u64 size)$/;"	f
count_range_bits	extent_io.c	/^u64 count_range_bits(struct extent_io_tree *tree,$/;"	f
counter	ctree.h	/^	struct percpu_counter	counter;$/;"	m	struct:btrfs_subvolume_writers	typeref:struct:btrfs_subvolume_writers::percpu_counter
cow_file_range	inode.c	/^static noinline int cow_file_range(struct inode *inode,$/;"	f	file:
cow_file_range_async	inode.c	/^static int cow_file_range_async(struct inode *inode, struct page *locked_page,$/;"	f	file:
cow_file_range_inline	inode.c	/^static noinline int cow_file_range_inline(struct btrfs_root *root,$/;"	f	file:
cowonly	relocation.c	/^	unsigned int cowonly:1;$/;"	m	struct:backref_node	file:
cpu_to_le8	ctree.h	1458;"	d
crc	send.h	/^	__le32 crc;$/;"	m	struct:btrfs_cmd_header
create_free_ino_inode	free-space-cache.c	/^int create_free_ino_inode(struct btrfs_root *root,$/;"	f
create_free_space_inode	free-space-cache.c	/^int create_free_space_inode(struct btrfs_fs_info *fs_info,$/;"	f
create_io_em	inode.c	/^static struct extent_map *create_io_em(struct inode *inode, u64 start, u64 len,$/;"	f	file:
create_pending_snapshot	transaction.c	/^static noinline int create_pending_snapshot(struct btrfs_trans_handle *trans,$/;"	f	file:
create_pending_snapshots	transaction.c	/^static noinline int create_pending_snapshots(struct btrfs_trans_handle *trans,$/;"	f	file:
create_reloc_inode	relocation.c	/^struct inode *create_reloc_inode(struct btrfs_fs_info *fs_info,$/;"	f	file:
create_reloc_root	relocation.c	/^static struct btrfs_root *create_reloc_root(struct btrfs_trans_handle *trans,$/;"	f	file:
create_reloc_tree	relocation.c	/^	unsigned int create_reloc_tree:1;$/;"	m	struct:reloc_control	file:
create_snapshot	ioctl.c	/^static int create_snapshot(struct btrfs_root *root, struct inode *dir,$/;"	f	file:
create_space_info	extent-tree.c	/^static int create_space_info(struct btrfs_fs_info *info, u64 flags,$/;"	f	file:
create_subvol	ioctl.c	/^static noinline int create_subvol(struct inode *dir,$/;"	f	file:
csum	ctree.h	/^	u8 csum[BTRFS_CSUM_SIZE];$/;"	m	struct:btrfs_header
csum	ctree.h	/^	u8 csum[BTRFS_CSUM_SIZE];$/;"	m	struct:btrfs_super_block
csum	scrub.c	/^	u8			csum[BTRFS_CSUM_SIZE];$/;"	m	struct:scrub_page	file:
csum	volumes.h	/^	u8 *csum;$/;"	m	struct:btrfs_io_bio
csum_allocated	volumes.h	/^	u8 *csum_allocated;$/;"	m	struct:btrfs_io_bio
csum_bytes	btrfs_inode.h	/^	u64 csum_bytes;$/;"	m	struct:btrfs_inode
csum_dirty_buffer	disk-io.c	/^static int csum_dirty_buffer(struct btrfs_fs_info *fs_info, struct page *page)$/;"	f	file:
csum_exist_in_range	inode.c	/^static noinline int csum_exist_in_range(struct btrfs_fs_info *fs_info,$/;"	f	file:
csum_inline	volumes.h	/^	u8 csum_inline[BTRFS_BIO_INLINE_CSUM_SIZE];$/;"	m	struct:btrfs_io_bio
csum_list	scrub.c	/^	struct list_head	csum_list;$/;"	m	struct:scrub_ctx	typeref:struct:scrub_ctx::list_head	file:
csum_root	ctree.h	/^	__le64 csum_root;$/;"	m	struct:btrfs_root_backup
csum_root	ctree.h	/^	struct btrfs_root *csum_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
csum_root_gen	ctree.h	/^	__le64 csum_root_gen;$/;"	m	struct:btrfs_root_backup
csum_root_level	ctree.h	/^	u8 csum_root_level;$/;"	m	struct:btrfs_root_backup
csum_size	check-integrity.c	/^	int csum_size;$/;"	m	struct:btrfsic_state	file:
csum_size	scrub.c	/^	u16			csum_size;$/;"	m	struct:scrub_ctx	file:
csum_tree_block	disk-io.c	/^static int csum_tree_block(struct btrfs_fs_info *fs_info,$/;"	f	file:
csum_type	ctree.h	/^	__le16 csum_type;$/;"	m	struct:btrfs_super_block
cur	ctree.h	/^	void *cur, *orig;$/;"	m	struct:btrfs_io_ctl
cur_ino	send.c	/^	u64 cur_ino;$/;"	m	struct:send_ctx	file:
cur_inode_deleted	send.c	/^	int cur_inode_deleted;$/;"	m	struct:send_ctx	file:
cur_inode_gen	send.c	/^	u64 cur_inode_gen;$/;"	m	struct:send_ctx	file:
cur_inode_last_extent	send.c	/^	u64 cur_inode_last_extent;$/;"	m	struct:send_ctx	file:
cur_inode_mode	send.c	/^	u64 cur_inode_mode;$/;"	m	struct:send_ctx	file:
cur_inode_new	send.c	/^	int cur_inode_new;$/;"	m	struct:send_ctx	file:
cur_inode_new_gen	send.c	/^	int cur_inode_new_gen;$/;"	m	struct:send_ctx	file:
cur_inode_rdev	send.c	/^	u64 cur_inode_rdev;$/;"	m	struct:send_ctx	file:
cur_inode_size	send.c	/^	u64 cur_inode_size;$/;"	m	struct:send_ctx	file:
cur_list	ulist.h	/^	struct list_head *cur_list;  \/* hint to start search *\/$/;"	m	struct:ulist_iterator	typeref:struct:ulist_iterator::list_head
cur_objectid	send.c	/^	u64 cur_objectid;$/;"	m	struct:backref_ctx	file:
cur_offset	send.c	/^	u64 cur_offset;$/;"	m	struct:backref_ctx	file:
curr	scrub.c	/^	int			curr;$/;"	m	struct:scrub_ctx	file:
current_active	async-thread.c	/^	int current_active;$/;"	m	struct:__btrfs_workqueue	file:
cursor_left	ctree.h	/^	u64 cursor_left;$/;"	m	struct:btrfs_dev_replace
cursor_left_last_write_of_item	ctree.h	/^	u64 cursor_left_last_write_of_item;$/;"	m	struct:btrfs_dev_replace
cursor_right	ctree.h	/^	u64 cursor_right;$/;"	m	struct:btrfs_dev_replace
cycled	file.c	/^	int cycled;$/;"	m	struct:inode_defrag	file:
data	delayed-inode.h	/^	char data[0];$/;"	m	struct:btrfs_delayed_item
data	relocation.c	/^	void *data;$/;"	m	struct:mapping_node	file:
data	volumes.h	/^	struct btrfs_balance_args data;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_control::btrfs_balance_args
data_alloc_cluster	ctree.h	/^	struct btrfs_free_cluster data_alloc_cluster;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_free_cluster
data_chunk_allocations	ctree.h	/^	unsigned data_chunk_allocations;$/;"	m	struct:btrfs_fs_info
data_corrected	scrub.c	/^		unsigned int	data_corrected:1;$/;"	m	struct:scrub_block::__anon4	file:
data_inode	relocation.c	/^	struct inode *data_inode;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::inode	file:
data_len	delayed-inode.h	/^	u32 data_len;$/;"	m	struct:btrfs_delayed_item
data_offset	send.c	/^	u64 data_offset;$/;"	m	struct:backref_ctx	file:
data_rwsem	ctree.h	/^	struct rw_semaphore data_rwsem;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::rw_semaphore
data_seqcount	volumes.h	/^	seqcount_t data_seqcount;$/;"	m	struct:btrfs_device
data_sinfo	ctree.h	/^	struct btrfs_space_info *data_sinfo;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_space_info
datablock_size	check-integrity.c	/^	u32 datablock_size;$/;"	m	struct:btrfsic_state	file:
datav	check-integrity.c	/^	char **datav;$/;"	m	struct:btrfsic_block_data_ctx	file:
dbitmap	raid56.c	/^	unsigned long *dbitmap;$/;"	m	struct:btrfs_raid_bio	file:
dbitmap	scrub.c	/^	unsigned long		*dbitmap;$/;"	m	struct:scrub_parity	file:
dead_roots	ctree.h	/^	struct list_head dead_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
decompress	compression.h	/^	int (*decompress)(struct list_head *workspace,$/;"	m	struct:btrfs_compress_op
decompress_bio	compression.h	/^	int (*decompress_bio)(struct list_head *workspace,$/;"	m	struct:btrfs_compress_op
defrag_bytes	btrfs_inode.h	/^	u64 defrag_bytes;$/;"	m	struct:btrfs_inode
defrag_check_next_extent	ioctl.c	/^static bool defrag_check_next_extent(struct inode *inode, struct extent_map *em)$/;"	f	file:
defrag_compress	btrfs_inode.h	/^	unsigned defrag_compress;$/;"	m	struct:btrfs_inode
defrag_inodes	ctree.h	/^	struct rb_root defrag_inodes;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rb_root
defrag_inodes_lock	ctree.h	/^	spinlock_t defrag_inodes_lock;$/;"	m	struct:btrfs_fs_info
defrag_lookup_extent	ioctl.c	/^static struct extent_map *defrag_lookup_extent(struct inode *inode, u64 start)$/;"	f	file:
defrag_max	ctree.h	/^	struct btrfs_key defrag_max;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_key
defrag_progress	ctree.h	/^	struct btrfs_key defrag_progress;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_key
defrag_running	ctree.h	/^	atomic_t defrag_running;$/;"	m	struct:btrfs_fs_info
defrag_trans_start	ctree.h	/^	u64 defrag_trans_start;$/;"	m	struct:btrfs_root
del_balance_item	volumes.c	/^static int del_balance_item(struct btrfs_fs_info *fs_info)$/;"	f	file:
del_ptr	ctree.c	/^static void del_ptr(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	file:
del_qgroup_item	qgroup.c	/^static int del_qgroup_item(struct btrfs_trans_handle *trans,$/;"	f	file:
del_qgroup_rb	qgroup.c	/^static int del_qgroup_rb(struct btrfs_fs_info *fs_info, u64 qgroupid)$/;"	f	file:
del_qgroup_relation_item	qgroup.c	/^static int del_qgroup_relation_item(struct btrfs_trans_handle *trans,$/;"	f	file:
del_relation_rb	qgroup.c	/^static int del_relation_rb(struct btrfs_fs_info *fs_info,$/;"	f	file:
del_root	delayed-inode.h	/^	struct rb_root del_root;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_delayed_node::rb_root
delalloc_batch	ctree.h	/^	s32 delalloc_batch;$/;"	m	struct:btrfs_fs_info
delalloc_block_rsv	ctree.h	/^	struct btrfs_block_rsv delalloc_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_block_rsv
delalloc_bytes	btrfs_inode.h	/^	u64 delalloc_bytes;$/;"	m	struct:btrfs_inode
delalloc_bytes	ctree.h	/^	struct percpu_counter delalloc_bytes;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::percpu_counter
delalloc_bytes	ctree.h	/^	u64 delalloc_bytes;$/;"	m	struct:btrfs_block_group_cache
delalloc_helper	async-thread.c	/^BTRFS_WORK_HELPER(delalloc_helper);$/;"	v
delalloc_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(delalloc_helper);$/;"	v
delalloc_inodes	btrfs_inode.h	/^	struct list_head delalloc_inodes;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::list_head
delalloc_inodes	ctree.h	/^	struct list_head delalloc_inodes;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
delalloc_lock	ctree.h	/^	spinlock_t delalloc_lock;$/;"	m	struct:btrfs_root
delalloc_mutex	btrfs_inode.h	/^	struct mutex delalloc_mutex;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::mutex
delalloc_mutex	ctree.h	/^	struct mutex delalloc_mutex;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::mutex
delalloc_root	ctree.h	/^	struct list_head delalloc_root;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
delalloc_root_lock	ctree.h	/^	spinlock_t delalloc_root_lock;$/;"	m	struct:btrfs_fs_info
delalloc_root_mutex	ctree.h	/^	struct mutex delalloc_root_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
delalloc_roots	ctree.h	/^	struct list_head delalloc_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
delalloc_workers	ctree.h	/^	struct btrfs_workqueue *delalloc_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
delay_iput	ctree.h	/^	int delay_iput;$/;"	m	struct:btrfs_delalloc_work
delayed_block_rsv	ctree.h	/^	struct btrfs_block_rsv delayed_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_block_rsv
delayed_iput	btrfs_inode.h	/^	struct list_head delayed_iput;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::list_head
delayed_iput_count	btrfs_inode.h	/^	long delayed_iput_count;$/;"	m	struct:btrfs_inode
delayed_iput_lock	ctree.h	/^	spinlock_t delayed_iput_lock;$/;"	m	struct:btrfs_fs_info
delayed_iputs	ctree.h	/^	struct list_head delayed_iputs;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
delayed_meta_helper	async-thread.c	/^BTRFS_WORK_HELPER(delayed_meta_helper);$/;"	v
delayed_meta_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(delayed_meta_helper);$/;"	v
delayed_node	btrfs_inode.h	/^	struct btrfs_delayed_node *delayed_node;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::btrfs_delayed_node
delayed_node	delayed-inode.h	/^	struct btrfs_delayed_node *delayed_node;$/;"	m	struct:btrfs_delayed_item	typeref:struct:btrfs_delayed_item::btrfs_delayed_node
delayed_node_cache	delayed-inode.c	/^static struct kmem_cache *delayed_node_cache;$/;"	v	typeref:struct:kmem_cache	file:
delayed_nodes_tree	ctree.h	/^	struct radix_tree_root delayed_nodes_tree;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::radix_tree_root
delayed_ref_async_start	extent-tree.c	/^static void delayed_ref_async_start(struct btrfs_work *work)$/;"	f	file:
delayed_ref_updates	transaction.h	/^	unsigned long delayed_ref_updates;$/;"	m	struct:btrfs_trans_handle
delayed_refs	transaction.h	/^	struct btrfs_delayed_ref_root delayed_refs;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::btrfs_delayed_ref_root
delayed_root	ctree.h	/^	struct btrfs_delayed_root *delayed_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_delayed_root
delayed_root	delayed-inode.c	/^	struct btrfs_delayed_root *delayed_root;$/;"	m	struct:btrfs_async_delayed_work	typeref:struct:btrfs_async_delayed_work::btrfs_delayed_root	file:
delayed_workers	ctree.h	/^	struct btrfs_workqueue *delayed_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
delete_block_group_cache	relocation.c	/^static int delete_block_group_cache(struct btrfs_fs_info *fs_info,$/;"	f	file:
delete_unused_bgs_mutex	ctree.h	/^	struct mutex delete_unused_bgs_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
deleted_bgs	transaction.h	/^	struct list_head deleted_bgs;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
deleted_refs	send.c	/^	struct list_head deleted_refs;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::list_head	file:
dentry	transaction.h	/^	struct dentry *dentry;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::dentry
describe_relocation	relocation.c	/^static void describe_relocation(struct btrfs_fs_info *fs_info,$/;"	f	file:
detached	relocation.c	/^	struct list_head detached;$/;"	m	struct:backref_cache	typeref:struct:backref_cache::list_head	file:
detached	relocation.c	/^	unsigned int detached:1;$/;"	m	struct:backref_node	file:
dev	check-integrity.c	/^	struct btrfsic_dev_state *dev;$/;"	m	struct:btrfsic_block_data_ctx	typeref:struct:btrfsic_block_data_ctx::btrfsic_dev_state	file:
dev	scrub.c	/^	struct btrfs_device	*dev;$/;"	m	struct:scrub_bio	typeref:struct:scrub_bio::btrfs_device	file:
dev	scrub.c	/^	struct btrfs_device	*dev;$/;"	m	struct:scrub_fixup_nodatasum	typeref:struct:scrub_fixup_nodatasum::btrfs_device	file:
dev	scrub.c	/^	struct btrfs_device	*dev;$/;"	m	struct:scrub_page	typeref:struct:scrub_page::btrfs_device	file:
dev	scrub.c	/^	struct btrfs_device	*dev;$/;"	m	struct:scrub_warning	typeref:struct:scrub_warning::btrfs_device	file:
dev	volumes.h	/^	struct btrfs_device *dev;$/;"	m	struct:btrfs_bio_stripe	typeref:struct:btrfs_bio_stripe::btrfs_device
dev	volumes.h	/^	struct btrfs_device *dev;$/;"	m	struct:btrfs_device_info	typeref:struct:btrfs_device_info::btrfs_device
dev_alloc_list	volumes.h	/^	struct list_head dev_alloc_list;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::list_head
dev_bytenr	check-integrity.c	/^	u64 dev_bytenr;		\/* key, physical byte num on disk *\/$/;"	m	struct:btrfsic_block	file:
dev_bytenr	check-integrity.c	/^	u64 dev_bytenr;		\/* physical bytenr on device *\/$/;"	m	struct:btrfsic_block_data_ctx	file:
dev_item	ctree.h	/^	struct btrfs_dev_item dev_item;$/;"	m	struct:btrfs_super_block	typeref:struct:btrfs_super_block::btrfs_dev_item
dev_list	volumes.h	/^	struct list_head dev_list;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::list_head
dev_offset	volumes.h	/^	u64 dev_offset;$/;"	m	struct:btrfs_device_info
dev_replace	ctree.h	/^	struct btrfs_dev_replace dev_replace;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_dev_replace
dev_root	ctree.h	/^	__le64 dev_root;$/;"	m	struct:btrfs_root_backup
dev_root	ctree.h	/^	struct btrfs_root *dev_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
dev_root_gen	ctree.h	/^	__le64 dev_root_gen;$/;"	m	struct:btrfs_root_backup
dev_root_level	ctree.h	/^	u8 dev_root_level;$/;"	m	struct:btrfs_root_backup
dev_stat_values	volumes.h	/^	atomic_t dev_stat_values[BTRFS_DEV_STAT_VALUES_MAX];$/;"	m	struct:btrfs_device
dev_state	check-integrity.c	/^	struct btrfsic_dev_state *dev_state;$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block::btrfsic_dev_state	file:
dev_stats_ccnt	volumes.h	/^	atomic_t dev_stats_ccnt;$/;"	m	struct:btrfs_device
dev_stats_valid	volumes.h	/^	int dev_stats_valid;$/;"	m	struct:btrfs_device
dev_stripes	volumes.h	/^	int dev_stripes;	\/* stripes per dev *\/$/;"	m	struct:btrfs_raid_attr
device	reada.c	/^	struct btrfs_device	*device;$/;"	m	struct:reada_zone	typeref:struct:reada_zone::btrfs_device	file:
device_dir_kobj	volumes.h	/^	struct kobject *device_dir_kobj;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::kobject
device_list_add	volumes.c	/^static noinline int device_list_add(const char *path,$/;"	f	file:
device_list_mutex	volumes.h	/^	struct mutex device_list_mutex;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::mutex
devices	volumes.h	/^	struct list_head devices;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::list_head
devid	volumes.h	/^	u64 devid;$/;"	m	struct:btrfs_device
devs	reada.c	/^	struct btrfs_device	*devs[BTRFS_MAX_MIRRORS]; \/* full list, incl$/;"	m	struct:reada_zone	typeref:struct:reada_zone::btrfs_device	file:
devs_increment	volumes.h	/^	int devs_increment;	\/* ndevs has to be a multiple of this *\/$/;"	m	struct:btrfs_raid_attr
devs_max	volumes.h	/^	int devs_max;		\/* max devs to use *\/$/;"	m	struct:btrfs_raid_attr
devs_min	volumes.h	/^	int devs_min;		\/* min devs needed *\/$/;"	m	struct:btrfs_raid_attr
did_create_dir	send.c	/^static int did_create_dir(struct send_ctx *sctx, u64 dir)$/;"	f	file:
did_overwrite_first_ref	send.c	/^static int did_overwrite_first_ref(struct send_ctx *sctx, u64 ino, u64 gen)$/;"	f	file:
did_overwrite_ref	send.c	/^static int did_overwrite_ref(struct send_ctx *sctx,$/;"	f	file:
dio_bio	btrfs_inode.h	/^	struct bio *dio_bio;$/;"	m	struct:btrfs_dio_private	typeref:struct:btrfs_dio_private::bio
dio_read_error	inode.c	/^static blk_status_t dio_read_error(struct inode *inode, struct bio *failed_bio,$/;"	f	file:
dio_sem	btrfs_inode.h	/^	struct rw_semaphore dio_sem;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::rw_semaphore
dir	send.c	/^	u64 dir;$/;"	m	struct:find_ref_ctx	file:
dir	send.c	/^	u64 dir;$/;"	m	struct:recorded_ref	file:
dir	transaction.h	/^	struct inode *dir;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::inode
dir_changed	send.c	/^static int dir_changed(struct send_ctx *sctx, u64 dir)$/;"	f	file:
dir_entry	inode.c	/^struct dir_entry {$/;"	s	file:
dir_gen	send.c	/^	u64 dir_gen;$/;"	m	struct:find_ref_ctx	file:
dir_gen	send.c	/^	u64 dir_gen;$/;"	m	struct:recorded_ref	file:
dir_index	btrfs_inode.h	/^	u64 dir_index;$/;"	m	struct:btrfs_inode
direct	backref.c	/^	struct preftree direct;    \/* BTRFS_SHARED_[DATA|BLOCK]_REF_KEY *\/$/;"	m	struct:preftrees	typeref:struct:preftrees::preftree	file:
dirty	qgroup.h	/^	struct list_head dirty;   \/* dirty groups *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:btrfs_qgroup::list_head
dirty	transaction.h	/^	bool dirty;$/;"	m	struct:btrfs_trans_handle
dirty_bgs	transaction.h	/^	struct list_head dirty_bgs;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
dirty_bgs_lock	transaction.h	/^	spinlock_t dirty_bgs_lock;$/;"	m	struct:btrfs_transaction
dirty_bytes	extent_io.h	/^	u64 dirty_bytes;$/;"	m	struct:extent_io_tree
dirty_cowonly_roots	ctree.h	/^	struct list_head dirty_cowonly_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
dirty_extent_root	delayed-ref.h	/^	struct rb_root dirty_extent_root;$/;"	m	struct:btrfs_delayed_ref_root	typeref:struct:btrfs_delayed_ref_root::rb_root
dirty_list	ctree.h	/^	struct list_head dirty_list;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::list_head
dirty_list	ctree.h	/^	struct list_head dirty_list;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
dirty_log_pages	ctree.h	/^	struct extent_io_tree dirty_log_pages;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::extent_io_tree
dirty_metadata_batch	ctree.h	/^	s32 dirty_metadata_batch;$/;"	m	struct:btrfs_fs_info
dirty_metadata_bytes	ctree.h	/^	struct percpu_counter dirty_metadata_bytes;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::percpu_counter
dirty_pages	transaction.h	/^	struct extent_io_tree dirty_pages;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::extent_io_tree
dirty_qgroups	ctree.h	/^	struct list_head dirty_qgroups;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
disk_bytenr	btrfs_inode.h	/^	u64 disk_bytenr;$/;"	m	struct:btrfs_dio_private
disk_cache_state	ctree.h	/^	int disk_cache_state;$/;"	m	struct:btrfs_block_group_cache
disk_i_size	btrfs_inode.h	/^	u64 disk_i_size;$/;"	m	struct:btrfs_inode
disk_key	check-integrity.c	/^	struct btrfs_disk_key disk_key;	\/* extra info to print in case of$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block::btrfs_disk_key	file:
disk_len	inode.c	/^	u64 disk_len;$/;"	m	struct:new_sa_defrag_extent	file:
disk_len	ordered-data.h	/^	u64 disk_len;$/;"	m	struct:btrfs_ordered_extent
disk_total	ctree.h	/^	u64 disk_total;		\/* total bytes on disk, takes mirrors into$/;"	m	struct:btrfs_space_info
disk_total	sysfs.c	/^SPACE_INFO_ATTR(disk_total);$/;"	v
disk_total_bytes	volumes.h	/^	u64 disk_total_bytes;$/;"	m	struct:btrfs_device
disk_total_bytes	volumes.h	/^BTRFS_DEVICE_GETSET_FUNCS(disk_total_bytes);$/;"	v
disk_used	ctree.h	/^	u64 disk_used;		\/* total bytes used on disk *\/$/;"	m	struct:btrfs_space_info
disk_used	sysfs.c	/^SPACE_INFO_ATTR(disk_used);$/;"	v
div_factor	math.h	/^static inline u64 div_factor(u64 num, int factor)$/;"	f
div_factor_fine	math.h	/^static inline u64 div_factor_fine(u64 num, int factor)$/;"	f
do_async_commit	transaction.c	/^static void do_async_commit(struct work_struct *work)$/;"	f	file:
do_chunk_alloc	extent-tree.c	/^static int do_chunk_alloc(struct btrfs_trans_handle *trans,$/;"	f	file:
do_relocation	relocation.c	/^static int do_relocation(struct btrfs_trans_handle *trans,$/;"	f	file:
do_setxattr	xattr.c	/^static int do_setxattr(struct btrfs_trans_handle *trans,$/;"	f	file:
do_trimming	free-space-cache.c	/^static int do_trimming(struct btrfs_block_group_cache *block_group,$/;"	f	file:
do_walk_down	extent-tree.c	/^static noinline int do_walk_down(struct btrfs_trans_handle *trans,$/;"	f	file:
done	inode.c	/^	struct completion done;$/;"	m	struct:btrfs_retry_complete	typeref:struct:btrfs_retry_complete::completion	file:
drop_backref_node	relocation.c	/^static void drop_backref_node(struct backref_cache *tree,$/;"	f	file:
drop_delayed_ref	delayed-ref.c	/^static inline void drop_delayed_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
drop_node_buffer	relocation.c	/^static void drop_node_buffer(struct backref_node *node)$/;"	f	file:
drop_objectid_items	tree-log.c	/^static int drop_objectid_items(struct btrfs_trans_handle *trans,$/;"	f	file:
drop_one_dir_item	tree-log.c	/^static noinline int drop_one_dir_item(struct btrfs_trans_handle *trans,$/;"	f	file:
drop_outstanding_extent	extent-tree.c	/^static unsigned drop_outstanding_extent(struct btrfs_inode *inode,$/;"	f	file:
dropped_roots	transaction.h	/^	struct list_head dropped_roots;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
dropped_roots_lock	transaction.h	/^	spinlock_t dropped_roots_lock;$/;"	m	struct:btrfs_transaction
dst_pages	ioctl.c	/^	struct page	**dst_pages;$/;"	m	struct:cmp_pages	typeref:struct:cmp_pages::page	file:
dst_slot	ctree.c	/^	int dst_slot;$/;"	m	struct:tree_mod_move	file:
dummy_block_for_bio_bh_flush	check-integrity.c	/^	struct btrfsic_block dummy_block_for_bio_bh_flush;$/;"	m	struct:btrfsic_dev_state	typeref:struct:btrfsic_dev_state::btrfsic_block	file:
dump_devs	reada.c	/^static void dump_devs(struct btrfs_fs_info *fs_info, int all)$/;"	f	file:
dump_space_info	extent-tree.c	/^static void dump_space_info(struct btrfs_fs_info *fs_info,$/;"	f	file:
dup_ref	send.c	/^static int dup_ref(struct recorded_ref *ref, struct list_head *list)$/;"	f	file:
eb	ctree.h	/^	const struct extent_buffer *eb;$/;"	m	struct:btrfs_map_token	typeref:struct:btrfs_map_token::extent_buffer
eb	relocation.c	/^	struct extent_buffer *eb;$/;"	m	struct:backref_node	typeref:struct:backref_node::extent_buffer	file:
eb_bitmap_offset	extent_io.c	/^static inline void eb_bitmap_offset(struct extent_buffer *eb,$/;"	f	file:
ebitmap	scrub.c	/^	unsigned long		*ebitmap;$/;"	m	struct:scrub_parity	file:
elems	ctree.h	/^	atomic_t		elems;$/;"	m	struct:reada_control
elems	reada.c	/^	u64			elems;$/;"	m	struct:reada_zone	file:
emit_fiemap_extent	extent_io.c	/^static int emit_fiemap_extent(struct fiemap_extent_info *fieinfo,$/;"	f	file:
emit_last_fiemap_cache	extent_io.c	/^static int emit_last_fiemap_cache(struct btrfs_fs_info *fs_info,$/;"	f	file:
empty_block_rsv	ctree.h	/^	struct btrfs_block_rsv empty_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_block_rsv
end	extent_io.c	/^	u64 end;$/;"	m	struct:tree_entry	file:
end	extent_io.h	/^	u64 end; \/* inclusive *\/$/;"	m	struct:extent_state
end	inode.c	/^	u64 end;$/;"	m	struct:async_cow	file:
end	reada.c	/^	u64			end;$/;"	m	struct:reada_zone	file:
end	relocation.c	/^	u64 end;$/;"	m	struct:file_extent_cluster	file:
end	send.c	/^			char *end;$/;"	m	struct:fs_path::__anon1::__anon2	file:
end_bio_extent_buffer_writepage	extent_io.c	/^static void end_bio_extent_buffer_writepage(struct bio *bio)$/;"	f	file:
end_bio_extent_readpage	extent_io.c	/^static void end_bio_extent_readpage(struct bio *bio)$/;"	f	file:
end_bio_extent_writepage	extent_io.c	/^static void end_bio_extent_writepage(struct bio *bio)$/;"	f	file:
end_compressed_bio_read	compression.c	/^static void end_compressed_bio_read(struct bio *bio)$/;"	f	file:
end_compressed_bio_write	compression.c	/^static void end_compressed_bio_write(struct bio *bio)$/;"	f	file:
end_compressed_writeback	compression.c	/^static noinline void end_compressed_writeback(struct inode *inode,$/;"	f	file:
end_extent_buffer_writeback	extent_io.c	/^static void end_extent_buffer_writeback(struct extent_buffer *eb)$/;"	f	file:
end_extent_writepage	extent_io.c	/^void end_extent_writepage(struct page *page, int err, u64 start, u64 end)$/;"	f
end_io	disk-io.c	/^	bio_end_io_t *end_io;$/;"	m	struct:btrfs_end_io_wq	file:
end_io	volumes.h	/^	bio_end_io_t *end_io;$/;"	m	struct:btrfs_bio
end_io	volumes.h	/^	btrfs_io_bio_end_io_t *end_io;$/;"	m	struct:btrfs_io_bio
end_workqueue_bio	disk-io.c	/^static void end_workqueue_bio(struct bio *bio)$/;"	f	file:
end_workqueue_fn	disk-io.c	/^static void end_workqueue_fn(struct btrfs_work *work)$/;"	f	file:
endio_freespace_worker	ctree.h	/^	struct btrfs_workqueue *endio_freespace_worker;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
endio_helper	async-thread.c	/^BTRFS_WORK_HELPER(endio_helper);$/;"	v
endio_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(endio_helper);$/;"	v
endio_meta_helper	async-thread.c	/^BTRFS_WORK_HELPER(endio_meta_helper);$/;"	v
endio_meta_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(endio_meta_helper);$/;"	v
endio_meta_workers	ctree.h	/^	struct btrfs_workqueue *endio_meta_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
endio_meta_write_helper	async-thread.c	/^BTRFS_WORK_HELPER(endio_meta_write_helper);$/;"	v
endio_meta_write_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(endio_meta_write_helper);$/;"	v
endio_meta_write_workers	ctree.h	/^	struct btrfs_workqueue *endio_meta_write_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
endio_raid56_helper	async-thread.c	/^BTRFS_WORK_HELPER(endio_raid56_helper);$/;"	v
endio_raid56_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(endio_raid56_helper);$/;"	v
endio_raid56_workers	ctree.h	/^	struct btrfs_workqueue *endio_raid56_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
endio_readpage_release_extent	extent_io.c	/^endio_readpage_release_extent(struct extent_io_tree *tree, u64 start, u64 len,$/;"	f	file:
endio_repair_helper	async-thread.c	/^BTRFS_WORK_HELPER(endio_repair_helper);$/;"	v
endio_repair_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(endio_repair_helper);$/;"	v
endio_repair_workers	ctree.h	/^	struct btrfs_workqueue *endio_repair_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
endio_workers	ctree.h	/^	struct btrfs_workqueue *endio_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
endio_write_helper	async-thread.c	/^BTRFS_WORK_HELPER(endio_write_helper);$/;"	v
endio_write_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(endio_write_helper);$/;"	v
endio_write_workers	ctree.h	/^	struct btrfs_workqueue *endio_write_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
ensure_commit_roots_uptodate	send.c	/^static int ensure_commit_roots_uptodate(struct send_ctx *sctx)$/;"	f	file:
entries	ctree.h	/^	int entries;$/;"	m	struct:btrfs_io_ctl
entry_end	ordered-data.c	/^static u64 entry_end(struct btrfs_ordered_extent *entry)$/;"	f	file:
error	check-integrity.c	/^	int error;$/;"	m	struct:btrfsic_stack_frame	file:
error	extent-tree.c	/^	int error;$/;"	m	struct:async_delayed_refs	file:
error	extent-tree.c	/^	int error;$/;"	m	struct:reserve_ticket	file:
error	raid56.c	/^	atomic_t error;$/;"	m	struct:btrfs_raid_bio	file:
error	transaction.h	/^	int error;$/;"	m	struct:btrfs_pending_snapshot
error	volumes.h	/^	atomic_t error;$/;"	m	struct:btrfs_bio
errors	btrfs_inode.h	/^	int errors;$/;"	m	struct:btrfs_dio_private
errors	compression.h	/^	int errors;$/;"	m	struct:compressed_bio
errstr	scrub.c	/^	const char		*errstr;$/;"	m	struct:scrub_warning	file:
event	scrub.c	/^	struct completion event;$/;"	m	struct:scrub_bio_ret	typeref:struct:scrub_bio_ret::completion	file:
evict_inode_truncate_pages	inode.c	/^static void evict_inode_truncate_pages(struct inode *inode)$/;"	f	file:
excl	qgroup.h	/^	u64 excl;	\/* exclusive *\/$/;"	m	struct:btrfs_qgroup
excl_cmpr	qgroup.h	/^	u64 excl_cmpr;	\/* exclusive compressed *\/$/;"	m	struct:btrfs_qgroup
exclude_super_stripes	extent-tree.c	/^static int exclude_super_stripes(struct btrfs_fs_info *fs_info,$/;"	f	file:
exit_btrfs_fs	super.c	/^static void __exit exit_btrfs_fs(void)$/;"	f	file:
extctl	reada.c	/^	struct list_head	extctl;$/;"	m	struct:reada_extent	typeref:struct:reada_extent::list_head	file:
extent_buffer	extent_io.h	/^struct extent_buffer {$/;"	s
extent_buffer_bitmap_clear	extent_io.c	/^void extent_buffer_bitmap_clear(struct extent_buffer *eb, unsigned long start,$/;"	f
extent_buffer_bitmap_set	extent_io.c	/^void extent_buffer_bitmap_set(struct extent_buffer *eb, unsigned long start,$/;"	f
extent_buffer_cache	extent_io.c	/^static struct kmem_cache *extent_buffer_cache;$/;"	v	typeref:struct:kmem_cache	file:
extent_buffer_get	extent_io.h	/^static inline void extent_buffer_get(struct extent_buffer *eb)$/;"	f
extent_buffer_test_bit	extent_io.c	/^int extent_buffer_test_bit(struct extent_buffer *eb, unsigned long start,$/;"	f
extent_buffer_under_io	extent_io.c	/^int extent_buffer_under_io(struct extent_buffer *eb)$/;"	f
extent_buffer_uptodate	extent_io.c	/^int extent_buffer_uptodate(struct extent_buffer *eb)$/;"	f
extent_changeset	extent_io.h	/^struct extent_changeset {$/;"	s
extent_changeset_alloc	extent_io.h	/^static inline struct extent_changeset *extent_changeset_alloc(void)$/;"	f
extent_changeset_free	extent_io.h	/^static inline void extent_changeset_free(struct extent_changeset *changeset)$/;"	f
extent_changeset_init	extent_io.h	/^static inline void extent_changeset_init(struct extent_changeset *changeset)$/;"	f
extent_changeset_release	extent_io.h	/^static inline void extent_changeset_release(struct extent_changeset *changeset)$/;"	f
extent_clear_unlock_delalloc	extent_io.c	/^void extent_clear_unlock_delalloc(struct inode *inode, u64 start, u64 end,$/;"	f
extent_cmp	tree-log.c	/^static int extent_cmp(void *priv, struct list_head *a, struct list_head *b)$/;"	f	file:
extent_compress_type	extent_io.h	/^static inline int extent_compress_type(unsigned long bio_flags)$/;"	f
extent_data_ref_count	extent-tree.c	/^static noinline u32 extent_data_ref_count(struct btrfs_path *path,$/;"	f	file:
extent_fiemap	extent_io.c	/^int extent_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,$/;"	f
extent_from_logical	backref.c	/^int extent_from_logical(struct btrfs_fs_info *fs_info, u64 logical,$/;"	f
extent_inode_elem	backref.c	/^struct extent_inode_elem {$/;"	s	file:
extent_invalidatepage	extent_io.c	/^int extent_invalidatepage(struct extent_io_tree *tree,$/;"	f
extent_io_exit	extent_io.c	/^void extent_io_exit(void)$/;"	f
extent_io_init	extent_io.c	/^int __init extent_io_init(void)$/;"	f
extent_io_ops	extent_io.h	/^struct extent_io_ops {$/;"	s
extent_io_tree	extent_io.h	/^struct extent_io_tree {$/;"	s
extent_io_tree_init	extent_io.c	/^void extent_io_tree_init(struct extent_io_tree *tree,$/;"	f
extent_io_tree_panic	extent_io.c	/^static void extent_io_tree_panic(struct extent_io_tree *tree, int err)$/;"	f	file:
extent_is_shared	backref.c	/^static inline int extent_is_shared(struct share_check *sc)$/;"	f	file:
extent_item_size	scrub.c	/^	u64			extent_item_size;$/;"	m	struct:scrub_warning	file:
extent_len	send.c	/^	u64 extent_len;$/;"	m	struct:backref_ctx	file:
extent_locked	extent_io.c	/^	unsigned int extent_locked:1;$/;"	m	struct:extent_page_data	file:
extent_map	extent_map.h	/^struct extent_map {$/;"	s
extent_map_block_end	extent_map.h	/^static inline u64 extent_map_block_end(struct extent_map *em)$/;"	f
extent_map_cache	extent_map.c	/^static struct kmem_cache *extent_map_cache;$/;"	v	typeref:struct:kmem_cache	file:
extent_map_end	extent_map.h	/^static inline u64 extent_map_end(struct extent_map *em)$/;"	f
extent_map_exit	extent_map.c	/^void extent_map_exit(void)$/;"	f
extent_map_in_tree	extent_map.h	/^static inline int extent_map_in_tree(const struct extent_map *em)$/;"	f
extent_map_init	extent_map.c	/^int __init extent_map_init(void)$/;"	f
extent_map_tree	extent_map.h	/^struct extent_map_tree {$/;"	s
extent_map_tree_init	extent_map.c	/^void extent_map_tree_init(struct extent_map_tree *tree)$/;"	f
extent_mergeable	file.c	/^static int extent_mergeable(struct extent_buffer *leaf, int slot,$/;"	f	file:
extent_offset	inode.c	/^	u64 extent_offset;$/;"	m	struct:old_sa_defrag_extent	file:
extent_offset	inode.c	/^	u64 extent_offset;$/;"	m	struct:sa_defrag_extent_backref	file:
extent_op	delayed-ref.h	/^	struct btrfs_delayed_extent_op *extent_op;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:btrfs_delayed_ref_head::btrfs_delayed_extent_op
extent_page_data	extent_io.c	/^struct extent_page_data {$/;"	s	file:
extent_range_clear_dirty_for_io	extent_io.c	/^void extent_range_clear_dirty_for_io(struct inode *inode, u64 start, u64 end)$/;"	f
extent_range_redirty_for_io	extent_io.c	/^void extent_range_redirty_for_io(struct inode *inode, u64 start, u64 end)$/;"	f
extent_read_full_page	extent_io.c	/^int extent_read_full_page(struct extent_io_tree *tree, struct page *page,$/;"	f
extent_readpages	extent_io.c	/^int extent_readpages(struct extent_io_tree *tree,$/;"	f
extent_ref_type	extent-tree.c	/^static inline int extent_ref_type(u64 parent, u64 owner)$/;"	f	file:
extent_refs_helper	async-thread.c	/^BTRFS_WORK_HELPER(extent_refs_helper);$/;"	v
extent_refs_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(extent_refs_helper);$/;"	v
extent_root	ctree.h	/^	__le64 extent_root;$/;"	m	struct:btrfs_root_backup
extent_root	ctree.h	/^	struct btrfs_root *extent_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
extent_root	relocation.c	/^	struct btrfs_root *extent_root;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::btrfs_root	file:
extent_root_gen	ctree.h	/^	__le64 extent_root_gen;$/;"	m	struct:btrfs_root_backup
extent_root_level	ctree.h	/^	u8 extent_root_level;$/;"	m	struct:btrfs_root_backup
extent_same_check_offsets	ioctl.c	/^static int extent_same_check_offsets(struct inode *inode, u64 off, u64 *plen,$/;"	f	file:
extent_same_get_page	ioctl.c	/^static struct page *extent_same_get_page(struct inode *inode, pgoff_t index)$/;"	f	file:
extent_set_compress_type	extent_io.h	/^static inline void extent_set_compress_type(unsigned long *bio_flags,$/;"	f
extent_state	extent_io.h	/^struct extent_state {$/;"	s
extent_state_cache	extent_io.c	/^static struct kmem_cache *extent_state_cache;$/;"	v	typeref:struct:kmem_cache	file:
extent_state_in_tree	extent_io.c	/^static inline bool extent_state_in_tree(const struct extent_state *state)$/;"	f	file:
extent_submit_bio_hook_t	extent_io.h	/^typedef	blk_status_t (extent_submit_bio_hook_t)(void *private_data, struct bio *bio,$/;"	t
extent_tree	btrfs_inode.h	/^	struct extent_map_tree extent_tree;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::extent_map_tree
extent_workers	ctree.h	/^	struct btrfs_workqueue *extent_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
extent_write_cache_pages	extent_io.c	/^static int extent_write_cache_pages(struct address_space *mapping,$/;"	f	file:
extent_write_full_page	extent_io.c	/^int extent_write_full_page(struct extent_io_tree *tree, struct page *page,$/;"	f
extent_write_locked_range	extent_io.c	/^int extent_write_locked_range(struct extent_io_tree *tree, struct inode *inode,$/;"	f
extent_writepages	extent_io.c	/^int extent_writepages(struct extent_io_tree *tree,$/;"	f
extents	inode.c	/^	struct list_head extents;$/;"	m	struct:async_cow	typeref:struct:async_cow::list_head	file:
extents_found	relocation.c	/^	u64 extents_found;$/;"	m	struct:reloc_control	file:
extents_thresh	free-space-cache.h	/^	int extents_thresh;$/;"	m	struct:btrfs_free_space_ctl
extract	props.c	/^	const char *(*extract)(struct inode *inode);$/;"	m	struct:prop_handler	file:
extref_get_fields	tree-log.c	/^static int extref_get_fields(struct extent_buffer *eb, int slot,$/;"	f	file:
extwriter_counter_dec	transaction.c	/^static inline void extwriter_counter_dec(struct btrfs_transaction *trans,$/;"	f	file:
extwriter_counter_inc	transaction.c	/^static inline void extwriter_counter_inc(struct btrfs_transaction *trans,$/;"	f	file:
extwriter_counter_init	transaction.c	/^static inline void extwriter_counter_init(struct btrfs_transaction *trans,$/;"	f	file:
extwriter_counter_read	transaction.c	/^static inline int extwriter_counter_read(struct btrfs_transaction *trans)$/;"	f	file:
fail_bio_stripe	raid56.c	/^static int fail_bio_stripe(struct btrfs_raid_bio *rbio,$/;"	f	file:
fail_rbio_index	raid56.c	/^static int fail_rbio_index(struct btrfs_raid_bio *rbio, int failed)$/;"	f	file:
faila	raid56.c	/^	int faila;$/;"	m	struct:btrfs_raid_bio	file:
failb	raid56.c	/^	int failb;$/;"	m	struct:btrfs_raid_bio	file:
failed_mirror	extent_io.h	/^	int failed_mirror;$/;"	m	struct:io_failure_record
failfast	ctree.h	/^	unsigned short failfast;$/;"	m	struct:btrfs_block_rsv
failrec	extent_io.h	/^	struct io_failure_record *failrec;$/;"	m	struct:extent_state	typeref:struct:extent_state::io_failure_record
falloc_range	file.c	/^struct falloc_range {$/;"	s	file:
feature_bit	sysfs.h	/^	u64 feature_bit;$/;"	m	struct:btrfs_feature_attr
feature_set	sysfs.h	/^	enum btrfs_feature_set feature_set;$/;"	m	struct:btrfs_feature_attr	typeref:enum:btrfs_feature_attr::btrfs_feature_set
fetch_cluster_info	extent-tree.c	/^fetch_cluster_info(struct btrfs_fs_info *fs_info,$/;"	f	file:
fiemap_cache	extent_io.c	/^struct fiemap_cache {$/;"	s	file:
file_extent_cluster	relocation.c	/^struct file_extent_cluster {$/;"	s	file:
file_offset	ordered-data.h	/^	u64 file_offset;$/;"	m	struct:btrfs_ordered_extent
file_pos	inode.c	/^	u64 file_pos;$/;"	m	struct:new_sa_defrag_extent	file:
file_pos	inode.c	/^	u64 file_pos;$/;"	m	struct:sa_defrag_extent_backref	file:
fill_delalloc	extent_io.h	/^	int (*fill_delalloc)(void *private_data, struct page *locked_page,$/;"	m	struct:extent_io_ops
fill_device_from_item	volumes.c	/^static void fill_device_from_item(struct extent_buffer *leaf,$/;"	f	file:
fill_holes	file.c	/^static int fill_holes(struct btrfs_trans_handle *trans,$/;"	f	file:
fill_inode_item	inode.c	/^static void fill_inode_item(struct btrfs_trans_handle *trans,$/;"	f	file:
fill_inode_item	tree-log.c	/^static void fill_inode_item(struct btrfs_trans_handle *trans,$/;"	f	file:
fill_read_buf	send.c	/^static ssize_t fill_read_buf(struct send_ctx *sctx, u64 offset, u32 len)$/;"	f	file:
fill_stack_inode_item	delayed-inode.c	/^static void fill_stack_inode_item(struct btrfs_trans_handle *trans,$/;"	f	file:
filldir_buf	ctree.h	/^	void *filldir_buf;$/;"	m	struct:btrfs_file_private
find_bio_stripe	raid56.c	/^static int find_bio_stripe(struct btrfs_raid_bio *rbio,$/;"	f	file:
find_data_references	relocation.c	/^static int find_data_references(struct reloc_control *rc,$/;"	f	file:
find_delalloc_range	extent_io.c	/^static noinline u64 find_delalloc_range(struct extent_io_tree *tree,$/;"	f	file:
find_desired_extent	file.c	/^static int find_desired_extent(struct inode *inode, loff_t *offset, int whence)$/;"	f	file:
find_device	volumes.c	/^static struct btrfs_device *find_device(struct btrfs_fs_devices *fs_devices,$/;"	f	file:
find_dir_range	tree-log.c	/^static noinline int find_dir_range(struct btrfs_root *root,$/;"	f	file:
find_extent_buffer	extent_io.c	/^struct extent_buffer *find_extent_buffer(struct btrfs_fs_info *fs_info,$/;"	f
find_extent_clone	send.c	/^static int find_extent_clone(struct send_ctx *sctx,$/;"	f	file:
find_extent_in_eb	backref.c	/^static int find_extent_in_eb(const struct extent_buffer *eb,$/;"	f	file:
find_first_block_group	extent-tree.c	/^static int find_first_block_group(struct btrfs_fs_info *fs_info,$/;"	f	file:
find_first_extent_bit	extent_io.c	/^int find_first_extent_bit(struct extent_io_tree *tree, u64 start,$/;"	f
find_first_extent_bit_state	extent_io.c	/^find_first_extent_bit_state(struct extent_io_tree *tree,$/;"	f	file:
find_first_non_hole	file.c	/^static int find_first_non_hole(struct inode *inode, u64 *start, u64 *len)$/;"	f	file:
find_free_dev_extent	volumes.c	/^int find_free_dev_extent(struct btrfs_trans_handle *trans,$/;"	f
find_free_dev_extent_start	volumes.c	/^int find_free_dev_extent_start(struct btrfs_transaction *transaction,$/;"	f
find_free_extent	extent-tree.c	/^static noinline int find_free_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
find_free_space	free-space-cache.c	/^find_free_space(struct btrfs_free_space_ctl *ctl, u64 *offset, u64 *bytes,$/;"	f	file:
find_fsid	volumes.c	/^static noinline struct btrfs_fs_devices *find_fsid(u8 *fsid)$/;"	f	file:
find_inline_backref	relocation.c	/^int find_inline_backref(struct extent_buffer *leaf, int slot,$/;"	f	file:
find_iref	send.c	/^static int find_iref(struct btrfs_root *root,$/;"	f	file:
find_live_mirror	volumes.c	/^static int find_live_mirror(struct btrfs_fs_info *fs_info,$/;"	f	file:
find_lock_delalloc_range	extent_io.c	/^STATIC u64 find_lock_delalloc_range(struct inode *inode,$/;"	f
find_logical_bio_stripe	raid56.c	/^static int find_logical_bio_stripe(struct btrfs_raid_bio *rbio,$/;"	f	file:
find_middle	extent-tree.c	/^static u64 find_middle(struct rb_root *root)$/;"	f	file:
find_name_in_backref	inode-item.c	/^static int find_name_in_backref(struct btrfs_path *path, const char *name,$/;"	f	file:
find_new_extents	ioctl.c	/^static int find_new_extents(struct btrfs_root *root,$/;"	f	file:
find_newest_super_backup	disk-io.c	/^static int find_newest_super_backup(struct btrfs_fs_info *info, u64 newest_gen)$/;"	f	file:
find_next_chunk	volumes.c	/^static u64 find_next_chunk(struct btrfs_fs_info *fs_info)$/;"	f	file:
find_next_devid	volumes.c	/^static noinline int find_next_devid(struct btrfs_fs_info *fs_info,$/;"	f	file:
find_next_extent	relocation.c	/^int find_next_extent(struct reloc_control *rc, struct btrfs_path *path,$/;"	f	file:
find_next_inode	relocation.c	/^static struct inode *find_next_inode(struct btrfs_root *root, u64 objectid)$/;"	f	file:
find_next_key	extent-tree.c	/^static int find_next_key(struct btrfs_path *path, int level,$/;"	f	file:
find_next_key	relocation.c	/^static int find_next_key(struct btrfs_path *path, int level,$/;"	f	file:
find_oldest_super_backup	disk-io.c	/^static void find_oldest_super_backup(struct btrfs_fs_info *info,$/;"	f	file:
find_parent_nodes	backref.c	/^static int find_parent_nodes(struct btrfs_trans_handle *trans,$/;"	f	file:
find_prop_handler	props.c	/^find_prop_handler(const char *name,$/;"	f	file:
find_prop_handlers_by_hash	props.c	/^static const struct hlist_head *find_prop_handlers_by_hash(const u64 hash)$/;"	f	file:
find_qgroup_rb	qgroup.c	/^static struct btrfs_qgroup *find_qgroup_rb(struct btrfs_fs_info *fs_info,$/;"	f	file:
find_ref_ctx	send.c	/^struct find_ref_ctx {$/;"	s	file:
find_ref_head	delayed-ref.c	/^find_ref_head(struct rb_root *root, u64 bytenr,$/;"	f	file:
find_reloc_root	relocation.c	/^static struct btrfs_root *find_reloc_root(struct reloc_control *rc,$/;"	f	file:
find_tree_root	relocation.c	/^struct btrfs_root *find_tree_root(struct reloc_control *rc,$/;"	f	file:
find_workspace	compression.c	/^static struct list_head *find_workspace(int type)$/;"	f	file:
find_xattr	send.c	/^static int find_xattr(struct btrfs_root *root,$/;"	f	file:
find_xattr_ctx	send.c	/^struct find_xattr_ctx {$/;"	s	file:
finish_inode_if_needed	send.c	/^static int finish_inode_if_needed(struct send_ctx *sctx, int at_end)$/;"	f	file:
finish_one_item	delayed-inode.c	/^static void finish_one_item(struct btrfs_delayed_root *delayed_root)$/;"	f	file:
finish_ordered_fn	inode.c	/^static void finish_ordered_fn(struct btrfs_work *work)$/;"	f	file:
finish_parity_scrub	raid56.c	/^static noinline void finish_parity_scrub(struct btrfs_raid_bio *rbio,$/;"	f	file:
finish_pending_nodes	relocation.c	/^static int finish_pending_nodes(struct btrfs_trans_handle *trans,$/;"	f	file:
finish_rmw	raid56.c	/^static noinline void finish_rmw(struct btrfs_raid_bio *rbio)$/;"	f	file:
first_free	scrub.c	/^	int			first_free;$/;"	m	struct:scrub_ctx	file:
first_logical_byte	ctree.h	/^	u64 first_logical_byte;$/;"	m	struct:btrfs_fs_info
first_logical_byte	extent-tree.c	/^static u64 first_logical_byte(struct btrfs_fs_info *fs_info, u64 search_start)$/;"	f	file:
fixup_helper	async-thread.c	/^BTRFS_WORK_HELPER(fixup_helper);$/;"	v
fixup_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(fixup_helper);$/;"	v
fixup_inode_link_count	tree-log.c	/^static noinline int fixup_inode_link_count(struct btrfs_trans_handle *trans,$/;"	f	file:
fixup_inode_link_counts	tree-log.c	/^static noinline int fixup_inode_link_counts(struct btrfs_trans_handle *trans,$/;"	f	file:
fixup_low_keys	ctree.c	/^static void fixup_low_keys(struct btrfs_fs_info *fs_info,$/;"	f	file:
fixup_tree_root_location	inode.c	/^static int fixup_tree_root_location(struct btrfs_fs_info *fs_info,$/;"	f	file:
fixup_workers	ctree.h	/^	struct btrfs_workqueue *fixup_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
flags	async-thread.h	/^	unsigned long flags;$/;"	m	struct:btrfs_work
flags	btrfs_inode.h	/^	u32 flags;$/;"	m	struct:btrfs_inode
flags	btrfs_inode.h	/^	unsigned long flags;$/;"	m	struct:btrfs_dio_private
flags	ctree.h	/^	__le64 flags;$/;"	m	struct:btrfs_header
flags	ctree.h	/^	__le64 flags;$/;"	m	struct:btrfs_super_block
flags	ctree.h	/^	u64 flags;$/;"	m	struct:btrfs_block_group_cache
flags	ctree.h	/^	u64 flags;$/;"	m	struct:btrfs_space_info
flags	ctree.h	/^	unsigned long flags;$/;"	m	struct:btrfs_fs_info
flags	delayed-inode.h	/^	unsigned long flags;$/;"	m	struct:btrfs_delayed_node
flags	extent-tree.c	/^	u64 flags[BTRFS_MAX_LEVEL];$/;"	m	struct:walk_control	file:
flags	extent_io.c	/^	u32 flags;$/;"	m	struct:fiemap_cache	file:
flags	extent_map.h	/^	unsigned long flags;$/;"	m	struct:extent_map
flags	ioctl.c	/^	__u64	flags;			\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	file:
flags	ordered-data.h	/^	unsigned long flags;$/;"	m	struct:btrfs_ordered_extent
flags	raid56.c	/^	unsigned long flags;$/;"	m	struct:btrfs_raid_bio	file:
flags	scrub.c	/^	u64			flags;  \/* extent flags *\/$/;"	m	struct:scrub_page	file:
flags	send.c	/^	u64 flags;	\/* 'flags' member of btrfs_ioctl_send_args is u64 *\/$/;"	m	struct:send_ctx	file:
flags	sysfs.c	/^SPACE_INFO_ATTR(flags);$/;"	v
flags	transaction.h	/^	unsigned long flags;$/;"	m	struct:btrfs_transaction
flags	volumes.h	/^	u64 flags;$/;"	m	struct:btrfs_balance_control
flags	volumes.h	/^	unsigned long flags;$/;"	m	struct:btrfs_bio
flags_to_set	delayed-ref.h	/^	u64 flags_to_set;$/;"	m	struct:btrfs_delayed_extent_op
flush	ctree.h	/^	unsigned int flush:1;		\/* set if we are trying to make space *\/$/;"	m	struct:btrfs_space_info
flush_all_writes	scrub.c	/^	bool                    flush_all_writes;$/;"	m	struct:scrub_ctx	file:
flush_bio	volumes.h	/^	struct bio *flush_bio;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::bio
flush_bio_sent	volumes.h	/^	int flush_bio_sent;$/;"	m	struct:btrfs_device
flush_delalloc_helper	async-thread.c	/^BTRFS_WORK_HELPER(flush_delalloc_helper);$/;"	v
flush_delalloc_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(flush_delalloc_helper);$/;"	v
flush_dirty_cache	free-space-cache.c	/^static int flush_dirty_cache(struct inode *inode)$/;"	f	file:
flush_epd_write_bio	extent_io.c	/^static void flush_epd_write_bio(struct extent_page_data *epd)$/;"	f	file:
flush_gen	check-integrity.c	/^	u64 flush_gen; \/* only valid if !never_written *\/$/;"	m	struct:btrfsic_block	file:
flush_space	extent-tree.c	/^static void flush_space(struct btrfs_fs_info *fs_info,$/;"	f	file:
flush_wait	volumes.h	/^	struct completion flush_wait;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::completion
flush_work	ordered-data.h	/^	struct btrfs_work flush_work;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::btrfs_work
flush_workers	ctree.h	/^	struct btrfs_workqueue *flush_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
flush_write_bio	extent_io.c	/^static noinline void flush_write_bio(void *data)$/;"	f	file:
flushing	delayed-ref.h	/^	int flushing;$/;"	m	struct:btrfs_delayed_ref_root
for_reloc	extent-tree.c	/^	int for_reloc;$/;"	m	struct:walk_control	file:
force_alloc	ctree.h	/^	unsigned int force_alloc;	\/* set if we need to force a chunk$/;"	m	struct:btrfs_space_info
force_metadata_allocation	extent-tree.c	/^static void force_metadata_allocation(struct btrfs_fs_info *info)$/;"	f	file:
found	send.c	/^	u64 found;$/;"	m	struct:backref_ctx	file:
found_data	send.c	/^	char *found_data;$/;"	m	struct:find_xattr_ctx	file:
found_data_len	send.c	/^	int found_data_len;$/;"	m	struct:find_xattr_ctx	file:
found_file_extent	relocation.c	/^	unsigned int found_file_extent:1;$/;"	m	struct:reloc_control	file:
found_idx	send.c	/^	int found_idx;$/;"	m	struct:find_ref_ctx	file:
found_idx	send.c	/^	int found_idx;$/;"	m	struct:find_xattr_ctx	file:
found_itself	send.c	/^	int found_itself;$/;"	m	struct:backref_ctx	file:
found_refs	send.c	/^	u64 found_refs;$/;"	m	struct:clone_root	file:
fragment_free_space	extent-tree.c	/^static void fragment_free_space(struct btrfs_block_group_cache *block_group)$/;"	f	file:
fragmented	ctree.h	/^	bool fragmented;$/;"	m	struct:btrfs_free_cluster
free	tree-log.c	/^	int free;$/;"	m	struct:walk_control	file:
free_async_extent_pages	inode.c	/^static void free_async_extent_pages(struct async_extent *async_extent)$/;"	f	file:
free_backref_edge	relocation.c	/^static void free_backref_edge(struct backref_cache *cache,$/;"	f	file:
free_backref_node	relocation.c	/^static void free_backref_node(struct backref_cache *cache,$/;"	f	file:
free_bitmap	free-space-cache.c	/^static void free_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
free_block_list	relocation.c	/^static void free_block_list(struct rb_root *blocks)$/;"	f	file:
free_chunk_space	ctree.h	/^	atomic64_t free_chunk_space;$/;"	m	struct:btrfs_fs_info
free_device	volumes.c	/^static void free_device(struct rcu_head *head)$/;"	f	file:
free_excluded_extents	extent-tree.c	/^static void free_excluded_extents(struct btrfs_fs_info *fs_info,$/;"	f	file:
free_extent_buffer	extent_io.c	/^void free_extent_buffer(struct extent_buffer *eb)$/;"	f
free_extent_buffer_stale	extent_io.c	/^void free_extent_buffer_stale(struct extent_buffer *eb)$/;"	f
free_extent_map	extent_map.c	/^void free_extent_map(struct extent_map *em)$/;"	f
free_extent_state	extent_io.c	/^void free_extent_state(struct extent_state *state)$/;"	f
free_extents	free-space-cache.h	/^	int free_extents;$/;"	m	struct:btrfs_free_space_ctl
free_fs_devices	volumes.c	/^static void free_fs_devices(struct btrfs_fs_devices *fs_devices)$/;"	f	file:
free_fs_info	ctree.h	/^static inline void free_fs_info(struct btrfs_fs_info *fs_info)$/;"	f
free_fs_root	disk-io.c	/^static void free_fs_root(struct btrfs_root *root)$/;"	f	file:
free_ino_ctl	ctree.h	/^	struct btrfs_free_space_ctl *free_ino_ctl;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_free_space_ctl
free_ino_op	inode-map.c	/^static const struct btrfs_free_space_op free_ino_op = {$/;"	v	typeref:struct:btrfs_free_space_op	file:
free_ino_pinned	ctree.h	/^	struct btrfs_free_space_ctl *free_ino_pinned;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_free_space_ctl
free_inode_elem_list	backref.c	/^static void free_inode_elem_list(struct extent_inode_elem *eie)$/;"	f	file:
free_io_failure	extent_io.c	/^int free_io_failure(struct extent_io_tree *failure_tree,$/;"	f
free_ipath	backref.c	/^void free_ipath(struct inode_fs_paths *ipath)$/;"	f
free_leaf_list	backref.c	/^static void free_leaf_list(struct ulist *blocks)$/;"	f	file:
free_log_tree	tree-log.c	/^static void free_log_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
free_orphan_dir_info	send.c	/^static void free_orphan_dir_info(struct send_ctx *sctx,$/;"	f	file:
free_pending_move	send.c	/^static void free_pending_move(struct send_ctx *sctx, struct pending_dir_move *m)$/;"	f	file:
free_pref	backref.c	/^static void free_pref(struct prelim_ref *ref)$/;"	f	file:
free_raid_bio	raid56.c	/^static void free_raid_bio(struct btrfs_raid_bio *rbio)$/;"	f	file:
free_recorded_refs	send.c	/^static void free_recorded_refs(struct send_ctx *sctx)$/;"	f	file:
free_reloc_roots	relocation.c	/^void free_reloc_roots(struct list_head *list)$/;"	f	file:
free_root_extent_buffers	disk-io.c	/^static void free_root_extent_buffers(struct btrfs_root *root)$/;"	f	file:
free_root_pointers	disk-io.c	/^static void free_root_pointers(struct btrfs_fs_info *info, int chunk_root)$/;"	f	file:
free_sa_defrag_extent	inode.c	/^static void free_sa_defrag_extent(struct new_sa_defrag_extent *new)$/;"	f	file:
free_space	free-space-cache.h	/^	u64 free_space;$/;"	m	struct:btrfs_free_space_ctl
free_space_bitmap_size	free-space-tree.c	/^static inline u32 free_space_bitmap_size(u64 size, u32 sectorsize)$/;"	f	file:
free_space_ctl	ctree.h	/^	struct btrfs_free_space_ctl *free_space_ctl;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_free_space_ctl
free_space_extent	tests/free-space-tree-tests.c	/^struct free_space_extent {$/;"	s	file:
free_space_lock	ctree.h	/^	struct mutex free_space_lock;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::mutex
free_space_next_bitmap	free-space-tree.c	/^static int free_space_next_bitmap(struct btrfs_trans_handle *trans,$/;"	f	file:
free_space_offset	free-space-cache.h	/^	struct rb_root free_space_offset;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:btrfs_free_space_ctl::rb_root
free_space_op	free-space-cache.c	/^static const struct btrfs_free_space_op free_space_op = {$/;"	v	typeref:struct:btrfs_free_space_op	file:
free_space_root	ctree.h	/^	struct btrfs_root *free_space_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
free_space_set_bits	free-space-tree.c	/^static void free_space_set_bits(struct btrfs_block_group_cache *block_group,$/;"	f	file:
free_space_test_bit	free-space-tree.c	/^int free_space_test_bit(struct btrfs_block_group_cache *block_group,$/;"	f
free_waiting_dir_move	send.c	/^static void free_waiting_dir_move(struct send_ctx *sctx,$/;"	f	file:
free_workspace	compression.c	/^static void free_workspace(int type, struct list_head *workspace)$/;"	f	file:
free_workspace	compression.h	/^	void (*free_workspace)(struct list_head *workspace);$/;"	m	struct:btrfs_compress_op
free_workspaces	compression.c	/^static void free_workspaces(void)$/;"	f	file:
free_ws	compression.c	/^	int free_ws;$/;"	m	struct:__anon6	file:
freed_extents	ctree.h	/^	struct extent_io_tree freed_extents[2];$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::extent_io_tree
freespace_write_helper	async-thread.c	/^BTRFS_WORK_HELPER(freespace_write_helper);$/;"	v
freespace_write_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(freespace_write_helper);$/;"	v
fs_devices	ctree.h	/^	struct btrfs_fs_devices *fs_devices;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_fs_devices
fs_devices	volumes.h	/^	struct btrfs_fs_devices *fs_devices;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::btrfs_fs_devices
fs_info	async-thread.c	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:__btrfs_workqueue	typeref:struct:__btrfs_workqueue::btrfs_fs_info	file:
fs_info	check-integrity.c	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_state::btrfs_fs_info	file:
fs_info	ctree.h	/^	struct btrfs_fs_info	*fs_info;		\/* tree to prefetch *\/$/;"	m	struct:reada_control	typeref:struct:reada_control::btrfs_fs_info
fs_info	ctree.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_fs_info
fs_info	ctree.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_io_ctl	typeref:struct:btrfs_io_ctl::btrfs_fs_info
fs_info	ctree.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_fs_info
fs_info	disk-io.c	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:async_submit_bio	typeref:struct:async_submit_bio::btrfs_fs_info	file:
fs_info	extent_io.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:extent_buffer	typeref:struct:extent_buffer::btrfs_fs_info
fs_info	raid56.c	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::btrfs_fs_info	file:
fs_info	reada.c	/^	struct btrfs_fs_info	*fs_info;$/;"	m	struct:reada_machine_work	typeref:struct:reada_machine_work::btrfs_fs_info	file:
fs_info	scrub.c	/^	struct btrfs_fs_info	*fs_info;$/;"	m	struct:scrub_ctx	typeref:struct:scrub_ctx::btrfs_fs_info	file:
fs_info	transaction.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_trans_handle::btrfs_fs_info
fs_info	transaction.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::btrfs_fs_info
fs_info	volumes.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_control::btrfs_fs_info
fs_info	volumes.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_bio	typeref:struct:btrfs_bio::btrfs_fs_info
fs_info	volumes.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::btrfs_fs_info
fs_info	volumes.h	/^	struct btrfs_fs_info *fs_info;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::btrfs_fs_info
fs_path	send.c	/^struct fs_path {$/;"	s	file:
fs_path_add	send.c	/^static int fs_path_add(struct fs_path *p, const char *name, int name_len)$/;"	f	file:
fs_path_add_from_extent_buffer	send.c	/^static int fs_path_add_from_extent_buffer(struct fs_path *p,$/;"	f	file:
fs_path_add_path	send.c	/^static int fs_path_add_path(struct fs_path *p, struct fs_path *p2)$/;"	f	file:
fs_path_alloc	send.c	/^static struct fs_path *fs_path_alloc(void)$/;"	f	file:
fs_path_alloc_reversed	send.c	/^static struct fs_path *fs_path_alloc_reversed(void)$/;"	f	file:
fs_path_copy	send.c	/^static int fs_path_copy(struct fs_path *p, struct fs_path *from)$/;"	f	file:
fs_path_ensure_buf	send.c	/^static int fs_path_ensure_buf(struct fs_path *p, int len)$/;"	f	file:
fs_path_free	send.c	/^static void fs_path_free(struct fs_path *p)$/;"	f	file:
fs_path_len	send.c	/^static int fs_path_len(struct fs_path *p)$/;"	f	file:
fs_path_prepare_for_add	send.c	/^static int fs_path_prepare_for_add(struct fs_path *p, int name_len,$/;"	f	file:
fs_path_reset	send.c	/^static void fs_path_reset(struct fs_path *p)$/;"	f	file:
fs_path_unreverse	send.c	/^static void fs_path_unreverse(struct fs_path *p)$/;"	f	file:
fs_root	backref.h	/^	struct btrfs_root		*fs_root;$/;"	m	struct:inode_fs_paths	typeref:struct:inode_fs_paths::btrfs_root
fs_root	ctree.h	/^	__le64 fs_root;$/;"	m	struct:btrfs_root_backup
fs_root	ctree.h	/^	struct btrfs_root *fs_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
fs_root_gen	ctree.h	/^	__le64 fs_root_gen;$/;"	m	struct:btrfs_root_backup
fs_root_level	ctree.h	/^	u8 fs_root_level;$/;"	m	struct:btrfs_root_backup
fs_roots_radix	ctree.h	/^	struct radix_tree_root fs_roots_radix;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::radix_tree_root
fs_roots_radix_lock	ctree.h	/^	spinlock_t fs_roots_radix_lock;$/;"	m	struct:btrfs_fs_info
fs_state	ctree.h	/^	unsigned long fs_state;$/;"	m	struct:btrfs_fs_info
fsid	ctree.h	/^	u8 fsid[BTRFS_FSID_SIZE];    \/* FS specific uuid *\/$/;"	m	struct:btrfs_super_block
fsid	ctree.h	/^	u8 fsid[BTRFS_FSID_SIZE]; \/* FS specific uuid *\/$/;"	m	struct:btrfs_header
fsid	ctree.h	/^	u8 fsid[BTRFS_FSID_SIZE];$/;"	m	struct:btrfs_fs_info
fsid	volumes.h	/^	u8 fsid[BTRFS_FSID_SIZE]; \/* FS specific uuid *\/$/;"	m	struct:btrfs_fs_devices
fsid_kobj	volumes.h	/^	struct kobject fsid_kobj;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::kobject
fspath	backref.h	/^	struct btrfs_data_container	*fspath;$/;"	m	struct:inode_fs_paths	typeref:struct:inode_fs_paths::btrfs_data_container
full	ctree.h	/^	unsigned int full:1;	\/* indicates that we cannot allocate any more$/;"	m	struct:btrfs_space_info
full	ctree.h	/^	unsigned short full;$/;"	m	struct:btrfs_block_rsv
full_path	send.c	/^	struct fs_path *full_path;$/;"	m	struct:recorded_ref	typeref:struct:recorded_ref::fs_path	file:
full_send_tree	send.c	/^static int full_send_tree(struct send_ctx *sctx)$/;"	f	file:
full_stripe_len	ctree.h	/^	unsigned long full_stripe_len;$/;"	m	struct:btrfs_block_group_cache
full_stripe_lock	scrub.c	/^struct full_stripe_lock {$/;"	s	file:
full_stripe_locks_root	ctree.h	/^	struct btrfs_full_stripe_locks_tree full_stripe_locks_root;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_full_stripe_locks_tree
full_stripe_write	raid56.c	/^static int full_stripe_write(struct btrfs_raid_bio *rbio)$/;"	f	file:
func	async-thread.h	/^	btrfs_func_t func;$/;"	m	struct:btrfs_work
gather_extent_pages	ioctl.c	/^static int gather_extent_pages(struct inode *inode, struct page **pages,$/;"	f	file:
gen	export.h	/^	u32 gen;$/;"	m	struct:btrfs_fid
gen	send.c	/^	u64 gen;$/;"	m	struct:name_cache_entry	file:
gen	send.c	/^	u64 gen;$/;"	m	struct:orphan_dir_info	file:
gen	send.c	/^	u64 gen;$/;"	m	struct:pending_dir_move	file:
gen_unique_name	send.c	/^static int gen_unique_name(struct send_ctx *sctx,$/;"	f	file:
generation	btrfs_inode.h	/^	u64 generation;$/;"	m	struct:btrfs_inode
generation	check-integrity.c	/^	u64 generation;$/;"	m	struct:btrfsic_block	file:
generation	ctree.c	/^	u64 generation;$/;"	m	struct:tree_mod_elem	file:
generation	ctree.h	/^	__le64 generation;$/;"	m	struct:btrfs_header
generation	ctree.h	/^	__le64 generation;$/;"	m	struct:btrfs_key_ptr
generation	ctree.h	/^	__le64 generation;$/;"	m	struct:btrfs_super_block
generation	ctree.h	/^	u64 generation;$/;"	m	struct:btrfs_fs_info
generation	extent_map.h	/^	u64 generation;$/;"	m	struct:extent_map
generation	inode.c	/^	u64 generation;$/;"	m	struct:sa_defrag_extent_backref	file:
generation	reada.c	/^	u64			generation;$/;"	m	struct:reada_extctl	file:
generation	scrub.c	/^	u64			generation;$/;"	m	struct:scrub_page	file:
generation	volumes.h	/^	u64 generation;$/;"	m	struct:btrfs_device
generation_error	scrub.c	/^		unsigned int	generation_error:1; \/* also sets header_error *\/$/;"	m	struct:scrub_block::__anon4	file:
generic_bin_search	ctree.c	/^static noinline int generic_bin_search(struct extent_buffer *eb,$/;"	f	file:
generic_bio_cnt	raid56.c	/^	int generic_bio_cnt;$/;"	m	struct:btrfs_raid_bio	file:
get_alloc_profile	extent-tree.c	/^static u64 get_alloc_profile(struct btrfs_fs_info *fs_info, u64 orig_flags)$/;"	f	file:
get_alloc_profile_by_root	extent-tree.c	/^static u64 get_alloc_profile_by_root(struct btrfs_root *root, int data)$/;"	f	file:
get_block_group_index	extent-tree.c	/^int get_block_group_index(struct btrfs_block_group_cache *cache)$/;"	f
get_block_rsv	extent-tree.c	/^static struct btrfs_block_rsv *get_block_rsv($/;"	f	file:
get_caching_control	extent-tree.c	/^get_caching_control(struct btrfs_block_group_cache *cache)$/;"	f	file:
get_chunk_map	volumes.c	/^static struct extent_map *get_chunk_map(struct btrfs_fs_info *fs_info,$/;"	f	file:
get_cur_inode_state	send.c	/^static int get_cur_inode_state(struct send_ctx *sctx, u64 ino, u64 gen)$/;"	f	file:
get_cur_path	send.c	/^static int get_cur_path(struct send_ctx *sctx, u64 ino, u64 gen,$/;"	f	file:
get_default_subvol_objectid	super.c	/^static int get_default_subvol_objectid(struct btrfs_fs_info *fs_info, u64 *objectid)$/;"	f	file:
get_extent	extent_io.c	/^	get_extent_t *get_extent;$/;"	m	struct:extent_page_data	file:
get_extent_allocation_hint	inode.c	/^static u64 get_extent_allocation_hint(struct inode *inode, u64 start,$/;"	f	file:
get_extent_inline_ref	backref.c	/^static int get_extent_inline_ref(unsigned long *ptr,$/;"	f	file:
get_extent_skip_holes	extent_io.c	/^static struct extent_map *get_extent_skip_holes(struct inode *inode,$/;"	f	file:
get_extent_t	extent_io.h	/^typedef struct extent_map *(get_extent_t)(struct btrfs_inode *inode,$/;"	t	typeref:struct:get_extent_t
get_extra_mirror_from_replace	volumes.c	/^static int get_extra_mirror_from_replace(struct btrfs_fs_info *fs_info,$/;"	f	file:
get_features	sysfs.c	/^static u64 get_features(struct btrfs_fs_info *fs_info,$/;"	f	file:
get_first_ref	send.c	/^static int get_first_ref(struct btrfs_root *root, u64 ino,$/;"	f	file:
get_full_stripe_logical	scrub.c	/^static u64 get_full_stripe_logical(struct btrfs_block_group_cache *cache,$/;"	f	file:
get_inode_info	send.c	/^static int get_inode_info(struct btrfs_root *root,$/;"	f	file:
get_inode_path	send.c	/^static int get_inode_path(struct btrfs_root *root,$/;"	f	file:
get_last_extent	send.c	/^static int get_last_extent(struct send_ctx *sctx, u64 offset)$/;"	f	file:
get_new_location	relocation.c	/^static int get_new_location(struct inode *reloc_inode, u64 *new_bytenr,$/;"	f	file:
get_old_root	ctree.c	/^get_old_root(struct btrfs_root *root, u64 time_seq)$/;"	f	file:
get_orphan_dir_info	send.c	/^get_orphan_dir_info(struct send_ctx *sctx, u64 dir_ino)$/;"	f	file:
get_pending_dir_moves	send.c	/^static struct pending_dir_move *get_pending_dir_moves(struct send_ctx *sctx,$/;"	f	file:
get_profile_num_devs	extent-tree.c	/^static u64 get_profile_num_devs(struct btrfs_fs_info *fs_info, u64 type)$/;"	f	file:
get_raid56_logic_offset	scrub.c	/^static int get_raid56_logic_offset(u64 physical, int num,$/;"	f	file:
get_raid_name	extent-tree.c	/^static const char *get_raid_name(enum btrfs_raid_types type)$/;"	f	file:
get_ref_objectid_v0	relocation.c	/^static int get_ref_objectid_v0(struct reloc_control *rc,$/;"	f	file:
get_restripe_target	extent-tree.c	/^static u64 get_restripe_target(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	file:
get_state_failrec	extent_io.c	/^static noinline int get_state_failrec(struct extent_io_tree *tree, u64 start,$/;"	f	file:
get_subvol_name_from_objectid	super.c	/^static char *get_subvol_name_from_objectid(struct btrfs_fs_info *fs_info,$/;"	f	file:
get_tree_block_key	relocation.c	/^static int get_tree_block_key(struct btrfs_fs_info *fs_info,$/;"	f	file:
get_unaligned_le8	struct-funcs.c	/^static inline u8 get_unaligned_le8(const void *p)$/;"	f	file:
get_waiting_dir_move	send.c	/^get_waiting_dir_move(struct send_ctx *sctx, u64 ino)$/;"	f	file:
global_block_rsv	ctree.h	/^	struct btrfs_block_rsv global_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_block_rsv
global_rsv_reserved_show	sysfs.c	/^static ssize_t global_rsv_reserved_show(struct kobject *kobj,$/;"	f	file:
global_rsv_size_show	sysfs.c	/^static ssize_t global_rsv_size_show(struct kobject *kobj,$/;"	f	file:
group	qgroup.c	/^	struct btrfs_qgroup *group;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:btrfs_qgroup_list::btrfs_qgroup	file:
groups	qgroup.h	/^	struct list_head groups;  \/* groups this group is member of *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:btrfs_qgroup::list_head
groups_sem	ctree.h	/^	struct rw_semaphore groups_sem;$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::rw_semaphore
handle_ops_on_dev_replace	volumes.c	/^static void handle_ops_on_dev_replace(enum btrfs_map_op op,$/;"	f	file:
has_caching_ctl	ctree.h	/^	unsigned int has_caching_ctl:1;$/;"	m	struct:btrfs_block_group_cache
hash_extent_data_ref	extent-tree.c	/^static u64 hash_extent_data_ref(u64 root_objectid, u64 owner, u64 offset)$/;"	f	file:
hash_extent_data_ref_item	extent-tree.c	/^static u64 hash_extent_data_ref_item(struct extent_buffer *leaf,$/;"	f	file:
hash_list	ctree.h	/^	struct list_head hash_list;$/;"	m	struct:btrfs_stripe_hash	typeref:struct:btrfs_stripe_hash::list_head
hash_list	raid56.c	/^	struct list_head hash_list;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::list_head	file:
have_csum	scrub.c	/^		unsigned int	have_csum:1;$/;"	m	struct:scrub_page::__anon3	file:
hdr	check-integrity.c	/^	struct btrfs_header *hdr;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_stack_frame::btrfs_header	file:
head	inode.c	/^	struct list_head head;$/;"	m	struct:new_sa_defrag_extent	typeref:struct:new_sa_defrag_extent::list_head	file:
head	volumes.h	/^	struct bio *head;$/;"	m	struct:btrfs_pending_bios	typeref:struct:btrfs_pending_bios::bio
header	ctree.h	/^	struct btrfs_header header;$/;"	m	struct:btrfs_leaf	typeref:struct:btrfs_leaf::btrfs_header
header	ctree.h	/^	struct btrfs_header header;$/;"	m	struct:btrfs_node	typeref:struct:btrfs_node::btrfs_header
header_error	scrub.c	/^		unsigned int	header_error:1;$/;"	m	struct:scrub_block::__anon4	file:
heads_to_leaves	extent-tree.c	/^static inline u64 heads_to_leaves(struct btrfs_fs_info *fs_info, u64 heads)$/;"	f	file:
high	async-thread.c	/^	struct __btrfs_workqueue *high;$/;"	m	struct:btrfs_workqueue	typeref:struct:btrfs_workqueue::__btrfs_workqueue	file:
highest_objectid	ctree.h	/^	u64 highest_objectid;$/;"	m	struct:btrfs_root
hole_mergeable	file.c	/^static int hole_mergeable(struct btrfs_inode *inode, struct extent_buffer *leaf,$/;"	f	file:
href_node	delayed-ref.h	/^	struct rb_node href_node;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:btrfs_delayed_ref_head::rb_node
href_root	delayed-ref.h	/^	struct rb_root href_root;$/;"	m	struct:btrfs_delayed_ref_root	typeref:struct:btrfs_delayed_ref_root::rb_root
htree_insert	delayed-ref.c	/^static struct btrfs_delayed_ref_head *htree_insert(struct rb_root *root,$/;"	f	file:
i	check-integrity.c	/^	int i;$/;"	m	struct:btrfsic_stack_frame	file:
i_otime	btrfs_inode.h	/^	struct timespec i_otime;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::timespec
id	disk-io.c	/^	u64			id;		\/* root objectid *\/$/;"	m	struct:btrfs_lockdep_keyset	file:
idle_ws	compression.c	/^	struct list_head idle_ws;$/;"	m	struct:__anon6	typeref:struct:__anon6::list_head	file:
in_block_group	relocation.c	/^static int in_block_group(u64 bytenr,$/;"	f	file:
in_fs_metadata	volumes.h	/^	int in_fs_metadata;$/;"	m	struct:btrfs_device
in_range	extent-tree.c	2061;"	d	file:
in_tree	delayed-ref.h	/^	unsigned int in_tree:1;$/;"	m	struct:btrfs_delayed_ref_node
in_validation	extent_io.h	/^	int in_validation;$/;"	m	struct:io_failure_record
inc_block_group_ro	extent-tree.c	/^static int inc_block_group_ro(struct btrfs_block_group_cache *cache, int force)$/;"	f	file:
include_extent_data	check-integrity.c	/^	int include_extent_data;$/;"	m	struct:btrfsic_state	file:
incompat_flags	ctree.h	/^	__le64 incompat_flags;$/;"	m	struct:btrfs_super_block
inconsistent_snapshot_error	send.c	/^static void inconsistent_snapshot_error(struct send_ctx *sctx,$/;"	f	file:
index	ctree.h	/^	int index;$/;"	m	struct:btrfs_io_ctl
index	scrub.c	/^	int			index;$/;"	m	struct:scrub_bio	file:
index_cnt	btrfs_inode.h	/^	u64 index_cnt;$/;"	m	struct:btrfs_inode
index_cnt	delayed-inode.h	/^	u64 index_cnt;$/;"	m	struct:btrfs_delayed_node
index_rbio_pages	raid56.c	/^static void index_rbio_pages(struct btrfs_raid_bio *rbio)$/;"	f	file:
indirect	backref.c	/^	struct preftree indirect;  \/* BTRFS_[TREE_BLOCK|EXTENT_DATA]_REF_KEY *\/$/;"	m	struct:preftrees	typeref:struct:preftrees::preftree	file:
indirect_missing_keys	backref.c	/^	struct preftree indirect_missing_keys;$/;"	m	struct:preftrees	typeref:struct:preftrees::preftree	file:
info	disk-io.c	/^	struct btrfs_fs_info *info;$/;"	m	struct:btrfs_end_io_wq	typeref:struct:btrfs_end_io_wq::btrfs_fs_info	file:
info	raid56.c	/^	struct btrfs_fs_info *info;$/;"	m	struct:btrfs_plug_cb	typeref:struct:btrfs_plug_cb::btrfs_fs_info	file:
inherit	transaction.h	/^	struct btrfs_qgroup_inherit *inherit;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::btrfs_qgroup_inherit
inherit_props	props.c	/^static int inherit_props(struct btrfs_trans_handle *trans,$/;"	f	file:
inheritable	props.c	/^	int inheritable;$/;"	m	struct:prop_handler	file:
init_btrfs_fs	super.c	/^late_initcall(init_btrfs_fs);$/;"	v
init_btrfs_fs	super.c	/^static int __init init_btrfs_fs(void)$/;"	f	file:
init_data_container	backref.c	/^struct btrfs_data_container *init_data_container(u32 total_bytes)$/;"	f
init_feature_attrs	sysfs.c	/^static void init_feature_attrs(void)$/;"	f	file:
init_first_rw_device	volumes.c	/^static noinline int init_first_rw_device(struct btrfs_trans_handle *trans,$/;"	f	file:
init_global_block_rsv	extent-tree.c	/^static void init_global_block_rsv(struct btrfs_fs_info *fs_info)$/;"	f	file:
init_ipath	backref.c	/^struct inode_fs_paths *init_ipath(s32 total_bytes, struct btrfs_root *fs_root,$/;"	f
init_once	inode.c	/^static void init_once(void *foo)$/;"	f	file:
inline_buf	send.c	/^			char inline_buf[];$/;"	m	struct:fs_path::__anon1::__anon2	file:
ino	file.c	/^	u64 ino;$/;"	m	struct:inode_defrag	file:
ino	inode.c	/^	u64 ino;$/;"	m	struct:dir_entry	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:clone_root	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:name_cache_entry	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:orphan_dir_info	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:pending_dir_move	file:
ino	send.c	/^	u64 ino;$/;"	m	struct:waiting_dir_move	file:
ino	tree-log.c	/^	u64 ino;$/;"	m	struct:btrfs_dir_list	file:
ino_cache_inode	ctree.h	/^	struct inode *ino_cache_inode;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::inode
ino_cache_lock	ctree.h	/^	spinlock_t ino_cache_lock;$/;"	m	struct:btrfs_root
ino_cache_progress	ctree.h	/^	u64 ino_cache_progress;$/;"	m	struct:btrfs_root
ino_cache_state	ctree.h	/^	enum btrfs_caching_type ino_cache_state;$/;"	m	struct:btrfs_root	typeref:enum:btrfs_root::btrfs_caching_type
ino_cache_wait	ctree.h	/^	wait_queue_head_t ino_cache_wait;$/;"	m	struct:btrfs_root
inode	btrfs_inode.h	/^	struct inode *inode;$/;"	m	struct:btrfs_dio_private	typeref:struct:btrfs_dio_private::inode
inode	compression.h	/^	struct inode *inode;$/;"	m	struct:compressed_bio	typeref:struct:compressed_bio::inode
inode	ctree.h	/^	struct inode *inode;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::inode
inode	ctree.h	/^	struct inode *inode;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:btrfs_delalloc_work::inode
inode	ctree.h	/^	struct inode *inode;$/;"	m	struct:btrfs_io_ctl	typeref:struct:btrfs_io_ctl::inode
inode	inode.c	/^	struct inode *inode;$/;"	m	struct:async_cow	typeref:struct:async_cow::inode	file:
inode	inode.c	/^	struct inode *inode;$/;"	m	struct:btrfs_retry_complete	typeref:struct:btrfs_retry_complete::inode	file:
inode	inode.c	/^	struct inode *inode;$/;"	m	struct:new_sa_defrag_extent	typeref:struct:new_sa_defrag_extent::inode	file:
inode	ordered-data.h	/^	struct inode *inode;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::inode
inode	tree-log.h	/^	struct inode *inode;$/;"	m	struct:btrfs_log_ctx	typeref:struct:btrfs_log_ctx::inode
inode_defrag	file.c	/^struct inode_defrag {$/;"	s	file:
inode_fs_paths	backref.h	/^struct inode_fs_paths {$/;"	s
inode_id	delayed-inode.h	/^	u64 inode_id;$/;"	m	struct:btrfs_delayed_node
inode_in_dir	tree-log.c	/^static noinline int inode_in_dir(struct btrfs_root *root,$/;"	f	file:
inode_item	delayed-inode.h	/^	struct btrfs_inode_item inode_item;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_delayed_node::btrfs_inode_item
inode_list	backref.h	/^	struct extent_inode_elem *inode_list;$/;"	m	struct:prelim_ref	typeref:struct:prelim_ref::extent_inode_elem
inode_lock	ctree.h	/^	spinlock_t inode_lock;$/;"	m	struct:btrfs_root
inode_need_compress	inode.c	/^static inline int inode_need_compress(struct inode *inode, u64 start, u64 end)$/;"	f	file:
inode_prop_iterator	props.c	/^static void inode_prop_iterator(void *ctx,$/;"	f	file:
inode_should_defrag	inode.c	/^static inline void inode_should_defrag(struct btrfs_inode *inode,$/;"	f	file:
inode_state	send.c	/^enum inode_state {$/;"	g	file:
inode_state_did_create	send.c	/^	inode_state_did_create,$/;"	e	enum:inode_state	file:
inode_state_did_delete	send.c	/^	inode_state_did_delete,$/;"	e	enum:inode_state	file:
inode_state_no_change	send.c	/^	inode_state_no_change,$/;"	e	enum:inode_state	file:
inode_state_will_create	send.c	/^	inode_state_will_create,$/;"	e	enum:inode_state	file:
inode_state_will_delete	send.c	/^	inode_state_will_delete,$/;"	e	enum:inode_state	file:
inode_to_path	backref.c	/^static int inode_to_path(u64 inum, u32 name_len, unsigned long name_off,$/;"	f	file:
inode_tree	ctree.h	/^	struct rb_root inode_tree;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::rb_root
inode_tree_add	inode.c	/^static void inode_tree_add(struct inode *inode)$/;"	f	file:
inode_tree_del	inode.c	/^static void inode_tree_del(struct inode *inode)$/;"	f	file:
inodes	scrub.c	/^	struct list_head	inodes;$/;"	m	struct:scrub_copy_nocow_ctx	typeref:struct:scrub_copy_nocow_ctx::list_head	file:
ins_or_del	delayed-inode.h	/^	int ins_or_del;$/;"	m	struct:btrfs_delayed_item
ins_root	delayed-inode.h	/^	struct rb_root ins_root;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_delayed_node::rb_root
insert_balance_item	volumes.c	/^static int insert_balance_item(struct btrfs_fs_info *fs_info,$/;"	f	file:
insert_dir_log_key	tree-log.c	/^static noinline int insert_dir_log_key(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_extent	tests/inode-tests.c	/^static void insert_extent(struct btrfs_root *root, u64 start, u64 len,$/;"	f	file:
insert_extent_backref	extent-tree.c	/^static int insert_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_extent_data_ref	extent-tree.c	/^static noinline int insert_extent_data_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_full_stripe_lock	scrub.c	/^static struct full_stripe_lock *insert_full_stripe_lock($/;"	f	file:
insert_inline_extent	inode.c	/^static int insert_inline_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_inline_extent_backref	extent-tree.c	/^int insert_inline_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_inode_item_key	tests/inode-tests.c	/^static void insert_inode_item_key(struct btrfs_root *root)$/;"	f	file:
insert_into_bitmap	free-space-cache.c	/^static int insert_into_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
insert_new_root	ctree.c	/^static noinline int insert_new_root(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_normal_tree_ref	tests/qgroup-tests.c	/^static int insert_normal_tree_ref(struct btrfs_root *root, u64 bytenr,$/;"	f	file:
insert_one_name	tree-log.c	/^static noinline int insert_one_name(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_orphan_item	tree-log.c	/^static int insert_orphan_item(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_ptr	ctree.c	/^static void insert_ptr(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_reserved_file_extent	inode.c	/^static int insert_reserved_file_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_state	extent_io.c	/^static int insert_state(struct extent_io_tree *tree,$/;"	f	file:
insert_tree_block_ref	extent-tree.c	/^static noinline int insert_tree_block_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
insert_with_overflow	dir-item.c	/^static struct btrfs_dir_item *insert_with_overflow(struct btrfs_trans_handle$/;"	f	file:
inum	backref.c	/^	u64 inum;$/;"	m	struct:extent_inode_elem	file:
inum	backref.c	/^	u64 inum;$/;"	m	struct:share_check	file:
inum	inode.c	/^	u64 inum;$/;"	m	struct:sa_defrag_extent_backref	file:
inum	scrub.c	/^	u64			inum;$/;"	m	struct:scrub_nocow_inode	file:
invalidate_extent_cache	relocation.c	/^static int invalidate_extent_cache(struct btrfs_root *root,$/;"	f	file:
io_align	volumes.h	/^	int io_align;$/;"	m	struct:map_lookup
io_align	volumes.h	/^	u32 io_align;$/;"	m	struct:btrfs_device
io_bgs	transaction.h	/^	struct list_head io_bgs;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
io_ctl	ctree.h	/^	struct btrfs_io_ctl io_ctl;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_io_ctl
io_ctl_add_bitmap	free-space-cache.c	/^static int io_ctl_add_bitmap(struct btrfs_io_ctl *io_ctl, void *bitmap)$/;"	f	file:
io_ctl_add_entry	free-space-cache.c	/^static int io_ctl_add_entry(struct btrfs_io_ctl *io_ctl, u64 offset, u64 bytes,$/;"	f	file:
io_ctl_check_crc	free-space-cache.c	/^static int io_ctl_check_crc(struct btrfs_io_ctl *io_ctl, int index)$/;"	f	file:
io_ctl_check_generation	free-space-cache.c	/^static int io_ctl_check_generation(struct btrfs_io_ctl *io_ctl, u64 generation)$/;"	f	file:
io_ctl_drop_pages	free-space-cache.c	/^static void io_ctl_drop_pages(struct btrfs_io_ctl *io_ctl)$/;"	f	file:
io_ctl_free	free-space-cache.c	/^static void io_ctl_free(struct btrfs_io_ctl *io_ctl)$/;"	f	file:
io_ctl_init	free-space-cache.c	/^static int io_ctl_init(struct btrfs_io_ctl *io_ctl, struct inode *inode,$/;"	f	file:
io_ctl_map_page	free-space-cache.c	/^static void io_ctl_map_page(struct btrfs_io_ctl *io_ctl, int clear)$/;"	f	file:
io_ctl_prepare_pages	free-space-cache.c	/^static int io_ctl_prepare_pages(struct btrfs_io_ctl *io_ctl, struct inode *inode,$/;"	f	file:
io_ctl_read_bitmap	free-space-cache.c	/^static int io_ctl_read_bitmap(struct btrfs_io_ctl *io_ctl,$/;"	f	file:
io_ctl_read_entry	free-space-cache.c	/^static int io_ctl_read_entry(struct btrfs_io_ctl *io_ctl,$/;"	f	file:
io_ctl_set_crc	free-space-cache.c	/^static void io_ctl_set_crc(struct btrfs_io_ctl *io_ctl, int index)$/;"	f	file:
io_ctl_set_generation	free-space-cache.c	/^static void io_ctl_set_generation(struct btrfs_io_ctl *io_ctl, u64 generation)$/;"	f	file:
io_ctl_unmap_page	free-space-cache.c	/^static void io_ctl_unmap_page(struct btrfs_io_ctl *io_ctl)$/;"	f	file:
io_ctl_zero_remaining_pages	free-space-cache.c	/^static void io_ctl_zero_remaining_pages(struct btrfs_io_ctl *io_ctl)$/;"	f	file:
io_err	tree-log.h	/^	int io_err;$/;"	m	struct:btrfs_log_ctx
io_error	scrub.c	/^		unsigned int	io_error:1;$/;"	m	struct:scrub_page::__anon3	file:
io_failure_record	extent_io.h	/^struct io_failure_record {$/;"	s
io_failure_tree	btrfs_inode.h	/^	struct extent_io_tree io_failure_tree;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::extent_io_tree
io_list	ctree.h	/^	struct list_head io_list;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::list_head
io_pages	extent_io.h	/^	atomic_t io_pages;$/;"	m	struct:extent_buffer
io_tree	btrfs_inode.h	/^	struct extent_io_tree io_tree;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::extent_io_tree
io_width	volumes.h	/^	int io_width;$/;"	m	struct:map_lookup
io_width	volumes.h	/^	u32 io_width;$/;"	m	struct:btrfs_device
iodone_w_error	check-integrity.c	/^	unsigned int iodone_w_error:1;	\/* error was indicated to endio *\/$/;"	m	struct:btrfsic_block	file:
iotree_fs_info	inode.c	/^static struct btrfs_fs_info *iotree_fs_info(void *private_data)$/;"	f	file:
iref	ctree.h	/^	unsigned int iref:1;$/;"	m	struct:btrfs_block_group_cache
is_ancestor	send.c	/^static int is_ancestor(struct btrfs_root *root,$/;"	f	file:
is_cowonly_root	relocation.c	/^static int is_cowonly_root(u64 root_objectid)$/;"	f	file:
is_data	delayed-ref.h	/^	bool is_data;$/;"	m	struct:btrfs_delayed_extent_op
is_data	delayed-ref.h	/^	unsigned int is_data:1;$/;"	m	struct:btrfs_delayed_ref_head
is_data_stripe	raid56.c	/^static inline int is_data_stripe(struct btrfs_raid_bio *rbio, int stripe)$/;"	f	file:
is_dev_replace	scrub.c	/^	int			is_dev_replace;$/;"	m	struct:scrub_ctx	file:
is_extent_unchanged	send.c	/^static int is_extent_unchanged(struct send_ctx *sctx,$/;"	f	file:
is_first_ref	send.c	/^static int is_first_ref(struct btrfs_root *root,$/;"	f	file:
is_fstree	ctree.h	/^static inline int is_fstree(u64 rootid)$/;"	f
is_head	delayed-ref.h	/^	unsigned int is_head:1;$/;"	m	struct:btrfs_delayed_ref_node
is_inode_existent	send.c	/^static int is_inode_existent(struct send_ctx *sctx, u64 ino, u64 gen)$/;"	f	file:
is_iodone	check-integrity.c	/^	unsigned int is_iodone:1;	\/* if is done by lower subsystem *\/$/;"	m	struct:btrfsic_block	file:
is_metadata	check-integrity.c	/^	unsigned int is_metadata:1;	\/* if it is meta-data, not data-data *\/$/;"	m	struct:btrfsic_block	file:
is_parity_stripe	raid56.h	39;"	d
is_subvolume_inode	super.c	/^static inline int is_subvolume_inode(struct inode *inode)$/;"	f	file:
is_superblock	check-integrity.c	/^	unsigned int is_superblock:1;	\/* if it is one of the superblocks *\/$/;"	m	struct:btrfsic_block	file:
is_tgtdev_for_dev_replace	volumes.h	/^	int is_tgtdev_for_dev_replace;$/;"	m	struct:btrfs_device
is_transaction_blocked	transaction.c	/^static inline int is_transaction_blocked(struct btrfs_transaction *trans)$/;"	f	file:
is_valid	ctree.h	/^	int is_valid;$/;"	m	struct:btrfs_dev_replace
is_waiting_for_move	send.c	/^static int is_waiting_for_move(struct send_ctx *sctx, u64 ino)$/;"	f	file:
is_waiting_for_rm	send.c	/^static int is_waiting_for_rm(struct send_ctx *sctx, u64 dir_ino)$/;"	f	file:
item	ctree.h	/^	struct btrfs_block_group_item item;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_block_group_item
item_needs_writeback	ctree.h	/^	int item_needs_writeback;$/;"	m	struct:btrfs_dev_replace
items	ctree.h	/^	struct btrfs_item items[];$/;"	m	struct:btrfs_leaf	typeref:struct:btrfs_leaf::btrfs_item
items	delayed-inode.h	/^	atomic_t items;		\/* for delayed items *\/$/;"	m	struct:btrfs_delayed_root
items_seq	delayed-inode.h	/^	atomic_t items_seq;	\/* for delayed items *\/$/;"	m	struct:btrfs_delayed_root
iter	volumes.h	/^	struct bvec_iter iter;$/;"	m	struct:btrfs_io_bio	typeref:struct:btrfs_io_bio::bvec_iter
iterate_dir_item	send.c	/^static int iterate_dir_item(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	file:
iterate_dir_item_t	send.c	/^typedef int (*iterate_dir_item_t)(int num, struct btrfs_key *di_key,$/;"	t	file:
iterate_extent_inodes	backref.c	/^int iterate_extent_inodes(struct btrfs_fs_info *fs_info,$/;"	f
iterate_extent_inodes_t	backref.h	/^typedef int (iterate_extent_inodes_t)(u64 inum, u64 offset, u64 root,$/;"	t
iterate_inode_extrefs	backref.c	/^static int iterate_inode_extrefs(u64 inum, struct btrfs_root *fs_root,$/;"	f	file:
iterate_inode_ref	send.c	/^static int iterate_inode_ref(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	file:
iterate_inode_ref_t	send.c	/^typedef int (*iterate_inode_ref_t)(int num, u64 dir, int index,$/;"	t	file:
iterate_inode_refs	backref.c	/^static int iterate_inode_refs(u64 inum, struct btrfs_root *fs_root,$/;"	f	file:
iterate_inodes_from_logical	backref.c	/^int iterate_inodes_from_logical(u64 logical, struct btrfs_fs_info *fs_info,$/;"	f
iterate_irefs	backref.c	/^static int iterate_irefs(u64 inum, struct btrfs_root *fs_root,$/;"	f	file:
iterate_irefs_t	backref.c	/^typedef int (iterate_irefs_t)(u64 parent, u32 name_len, unsigned long name_off,$/;"	t	file:
iterate_leaf_refs	backref.c	/^static int iterate_leaf_refs(struct btrfs_fs_info *fs_info,$/;"	f	file:
iterate_object_props	props.c	/^static int iterate_object_props(struct btrfs_root *root,$/;"	f	file:
join_running_log_trans	tree-log.c	/^static int join_running_log_trans(struct btrfs_root *root)$/;"	f	file:
join_transaction	transaction.c	/^static noinline int join_transaction(struct btrfs_fs_info *fs_info,$/;"	f	file:
kaddr	ctree.h	/^	char *kaddr;$/;"	m	struct:btrfs_map_token
keep_locks	ctree.h	/^	unsigned int keep_locks:1;$/;"	m	struct:btrfs_path
keep_locks	extent-tree.c	/^	int keep_locks;$/;"	m	struct:walk_control	file:
key	ctree.c	/^	struct btrfs_disk_key key;$/;"	m	struct:tree_mod_elem	typeref:struct:tree_mod_elem::btrfs_disk_key	file:
key	ctree.h	/^	struct btrfs_disk_key key;$/;"	m	struct:btrfs_item	typeref:struct:btrfs_item::btrfs_disk_key
key	ctree.h	/^	struct btrfs_disk_key key;$/;"	m	struct:btrfs_key_ptr	typeref:struct:btrfs_key_ptr::btrfs_disk_key
key	ctree.h	/^	struct btrfs_key key;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_key
key	delayed-inode.h	/^	struct btrfs_key key;$/;"	m	struct:btrfs_delayed_item	typeref:struct:btrfs_delayed_item::btrfs_key
key	delayed-ref.h	/^	struct btrfs_disk_key key;$/;"	m	struct:btrfs_delayed_extent_op	typeref:struct:btrfs_delayed_extent_op::btrfs_disk_key
key	relocation.c	/^	struct btrfs_key key;$/;"	m	struct:tree_block	typeref:struct:tree_block::btrfs_key	file:
key_end	ctree.h	/^	struct btrfs_key	key_end;	\/* exclusive *\/$/;"	m	struct:reada_control	typeref:struct:reada_control::btrfs_key
key_for_search	backref.h	/^	struct btrfs_key key_for_search;$/;"	m	struct:prelim_ref	typeref:struct:prelim_ref::btrfs_key
key_in_sk	ioctl.c	/^static noinline int key_in_sk(struct btrfs_key *key,$/;"	f	file:
key_ready	relocation.c	/^	unsigned int key_ready:1;$/;"	m	struct:tree_block	file:
key_search	ctree.c	/^static int key_search(struct extent_buffer *b, const struct btrfs_key *key,$/;"	f	file:
key_search_validate	ctree.c	/^static void key_search_validate(struct extent_buffer *b,$/;"	f	file:
key_start	ctree.h	/^	struct btrfs_key	key_start;$/;"	m	struct:reada_control	typeref:struct:reada_control::btrfs_key
keys	disk-io.c	/^	struct lock_class_key	keys[BTRFS_MAX_LEVEL + 1];$/;"	m	struct:btrfs_lockdep_keyset	typeref:struct:btrfs_lockdep_keyset::lock_class_key	file:
kobj	ctree.h	/^	struct kobject kobj;$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::kobject
kobj	ctree.h	/^	struct kobject kobj;$/;"	m	struct:raid_kobject	typeref:struct:raid_kobject::kobject
kobj_attr	sysfs.h	/^	struct kobj_attribute kobj_attr;$/;"	m	struct:btrfs_feature_attr	typeref:struct:btrfs_feature_attr::kobj_attribute
kobj_unregister	volumes.h	/^	struct completion kobj_unregister;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::completion
label	ctree.h	/^	char label[BTRFS_LABEL_SIZE];$/;"	m	struct:btrfs_super_block
last	ordered-data.h	/^	struct rb_node *last;$/;"	m	struct:btrfs_ordered_inode_tree	typeref:struct:btrfs_ordered_inode_tree::rb_node
last_byte_to_unpin	ctree.h	/^	u64 last_byte_to_unpin;$/;"	m	struct:btrfs_block_group_cache
last_flush_error	volumes.h	/^	blk_status_t last_flush_error;$/;"	m	struct:btrfs_device
last_flush_gen	check-integrity.c	/^	u64 last_flush_gen;$/;"	m	struct:btrfsic_dev_state	file:
last_log_commit	btrfs_inode.h	/^	int last_log_commit;$/;"	m	struct:btrfs_inode
last_log_commit	ctree.h	/^	int last_log_commit;$/;"	m	struct:btrfs_root
last_offset	file.c	/^	u64 last_offset;$/;"	m	struct:inode_defrag	file:
last_sub_trans	btrfs_inode.h	/^	int last_sub_trans;$/;"	m	struct:btrfs_inode
last_trans	btrfs_inode.h	/^	u64 last_trans;$/;"	m	struct:btrfs_inode
last_trans	ctree.h	/^	u64 last_trans;$/;"	m	struct:btrfs_root
last_trans	relocation.c	/^	u64 last_trans;$/;"	m	struct:backref_cache	file:
last_trans_committed	ctree.h	/^	u64 last_trans_committed;$/;"	m	struct:btrfs_fs_info
last_trans_log_full_commit	ctree.h	/^	u64 last_trans_log_full_commit;$/;"	m	struct:btrfs_fs_info
last_unlink_trans	btrfs_inode.h	/^	u64 last_unlink_trans;$/;"	m	struct:btrfs_inode
latest_bdev	volumes.h	/^	struct block_device *latest_bdev;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::block_device
latest_superblock	check-integrity.c	/^	struct btrfsic_block *latest_superblock;$/;"	m	struct:btrfsic_state	typeref:struct:btrfsic_state::btrfsic_block	file:
le8_to_cpu	ctree.h	1457;"	d
le_bitmap_clear	extent_io.c	/^void le_bitmap_clear(u8 *map, unsigned int start, int len)$/;"	f
le_bitmap_set	extent_io.c	/^void le_bitmap_set(u8 *map, unsigned int start, int len)$/;"	f
le_test_bit	extent_io.h	/^static inline int le_test_bit(int nr, const u8 *addr)$/;"	f
leaf_data_end	ctree.h	/^static inline unsigned int leaf_data_end(const struct btrfs_fs_info *fs_info,$/;"	f
leaf_space_used	ctree.c	/^static int leaf_space_used(struct extent_buffer *l, int start, int nr)$/;"	f	file:
leak_list	extent_io.h	/^	struct list_head leak_list;$/;"	m	struct:extent_buffer	typeref:struct:extent_buffer::list_head
leak_list	extent_io.h	/^	struct list_head leak_list;$/;"	m	struct:extent_state	typeref:struct:extent_state::list_head
leave_spinning	ctree.h	/^	unsigned int leave_spinning:1;$/;"	m	struct:btrfs_path
leaves	relocation.c	/^	struct list_head leaves;$/;"	m	struct:backref_cache	typeref:struct:backref_cache::list_head	file:
left_path	send.c	/^	struct btrfs_path *left_path;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::btrfs_path	file:
len	check-integrity.c	/^	u32 len;$/;"	m	struct:btrfsic_block_data_ctx	file:
len	compression.h	/^	unsigned long len;$/;"	m	struct:compressed_bio
len	extent_io.c	/^	u64 len;$/;"	m	struct:fiemap_cache	file:
len	extent_io.h	/^	u64 len;$/;"	m	struct:io_failure_record
len	extent_io.h	/^	unsigned long len;$/;"	m	struct:extent_buffer
len	extent_map.h	/^	u64 len;$/;"	m	struct:extent_map
len	file.c	/^	u64 len;$/;"	m	struct:falloc_range	file:
len	inode.c	/^	u64 len;$/;"	m	struct:new_sa_defrag_extent	file:
len	inode.c	/^	u64 len;$/;"	m	struct:old_sa_defrag_extent	file:
len	ordered-data.h	/^	int len;$/;"	m	struct:btrfs_ordered_sum
len	ordered-data.h	/^	u64 len;$/;"	m	struct:btrfs_ordered_extent
len	scrub.c	/^	u64			len;$/;"	m	struct:scrub_copy_nocow_ctx	file:
len	send.h	/^	__le32 len;$/;"	m	struct:btrfs_cmd_header
length	tests/free-space-tree-tests.c	/^	u64 length;$/;"	m	struct:free_space_extent	file:
length	volumes.h	/^	u64 length; \/* only used for discard mappings *\/$/;"	m	struct:btrfs_bio_stripe
level	backref.h	/^	int level;$/;"	m	struct:prelim_ref
level	ctree.c	/^	u8 level;$/;"	m	struct:tree_mod_root	file:
level	ctree.h	/^	u8 level;$/;"	m	struct:btrfs_header
level	delayed-ref.h	/^	int level;$/;"	m	struct:btrfs_delayed_tree_ref
level	delayed-ref.h	/^	u8 level;$/;"	m	struct:btrfs_delayed_extent_op
level	extent-tree.c	/^	int level;$/;"	m	struct:walk_control	file:
level	relocation.c	/^	unsigned int level:8;$/;"	m	struct:backref_node	file:
level	relocation.c	/^	unsigned int level:8;$/;"	m	struct:tree_block	file:
lim_flags	qgroup.h	/^	u64 lim_flags;	\/* which limits are set *\/$/;"	m	struct:btrfs_qgroup
limit_active	async-thread.c	/^	int limit_active;$/;"	m	struct:__btrfs_workqueue	file:
limit_nesting	check-integrity.c	/^	int limit_nesting;$/;"	m	struct:btrfsic_stack_frame	file:
link_free_space	free-space-cache.c	/^static int link_free_space(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
link_to_fixup_dir	tree-log.c	/^static noinline int link_to_fixup_dir(struct btrfs_trans_handle *trans,$/;"	f	file:
link_to_upper	relocation.c	/^static int link_to_upper(struct btrfs_trans_handle *trans,$/;"	f	file:
list	ctree.h	/^	struct list_head list;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::list_head
list	ctree.h	/^	struct list_head list;$/;"	m	struct:btrfs_caching_control	typeref:struct:btrfs_caching_control::list_head
list	ctree.h	/^	struct list_head list;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:btrfs_delalloc_work::list_head
list	ctree.h	/^	struct list_head list;$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::list_head
list	ctree.h	/^	struct list_head list;$/;"	m	struct:seq_list	typeref:struct:seq_list::list_head
list	delayed-ref.h	/^	struct list_head list;$/;"	m	struct:btrfs_delayed_ref_node	typeref:struct:btrfs_delayed_ref_node::list_head
list	extent-tree.c	/^	struct list_head list;$/;"	m	struct:reserve_ticket	typeref:struct:reserve_ticket::list_head	file:
list	extent_map.h	/^	struct list_head list;$/;"	m	struct:extent_map	typeref:struct:extent_map::list_head
list	file.c	/^	struct list_head list;$/;"	m	struct:falloc_range	typeref:struct:falloc_range::list_head	file:
list	free-space-cache.c	/^	struct list_head list;$/;"	m	struct:btrfs_trim_range	typeref:struct:btrfs_trim_range::list_head	file:
list	free-space-cache.h	/^	struct list_head list;$/;"	m	struct:btrfs_free_space	typeref:struct:btrfs_free_space::list_head
list	inode.c	/^	struct list_head list;$/;"	m	struct:async_extent	typeref:struct:async_extent::list_head	file:
list	inode.c	/^	struct list_head list;$/;"	m	struct:old_sa_defrag_extent	typeref:struct:old_sa_defrag_extent::list_head	file:
list	lzo.c	/^	struct list_head list;$/;"	m	struct:workspace	typeref:struct:workspace::list_head	file:
list	ordered-data.h	/^	struct list_head list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::list_head
list	ordered-data.h	/^	struct list_head list;$/;"	m	struct:btrfs_ordered_sum	typeref:struct:btrfs_ordered_sum::list_head
list	reada.c	/^	struct list_head	list;$/;"	m	struct:reada_extctl	typeref:struct:reada_extctl::list_head	file:
list	reada.c	/^	struct list_head	list;$/;"	m	struct:reada_zone	typeref:struct:reada_zone::list_head	file:
list	relocation.c	/^	struct list_head list;$/;"	m	struct:backref_node	typeref:struct:backref_node::list_head	file:
list	relocation.c	/^	struct list_head list[2];$/;"	m	struct:backref_edge	typeref:struct:backref_edge::list_head	file:
list	scrub.c	/^	struct list_head	list;$/;"	m	struct:scrub_nocow_inode	typeref:struct:scrub_nocow_inode::list_head	file:
list	scrub.c	/^	struct list_head	list;$/;"	m	struct:scrub_page	typeref:struct:scrub_page::list_head	file:
list	send.c	/^	struct list_head list;$/;"	m	struct:name_cache_entry	typeref:struct:name_cache_entry::list_head	file:
list	send.c	/^	struct list_head list;$/;"	m	struct:pending_dir_move	typeref:struct:pending_dir_move::list_head	file:
list	send.c	/^	struct list_head list;$/;"	m	struct:recorded_ref	typeref:struct:recorded_ref::list_head	file:
list	transaction.h	/^	struct list_head list;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::list_head
list	transaction.h	/^	struct list_head list;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
list	tree-log.c	/^	struct list_head list;$/;"	m	struct:btrfs_dir_list	typeref:struct:btrfs_dir_list::list_head	file:
list	tree-log.h	/^	struct list_head list;$/;"	m	struct:btrfs_log_ctx	typeref:struct:btrfs_log_ctx::list_head
list	ulist.h	/^	struct list_head list;  \/* used to link node *\/$/;"	m	struct:ulist_node	typeref:struct:ulist_node::list_head
list	volumes.h	/^	struct list_head list;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::list_head
list	zlib.c	/^	struct list_head list;$/;"	m	struct:workspace	typeref:struct:workspace::list_head	file:
list	zstd.c	/^	struct list_head list;$/;"	m	struct:workspace	typeref:struct:workspace::list_head	file:
list_lock	async-thread.c	/^	spinlock_t list_lock;$/;"	m	struct:__btrfs_workqueue	file:
list_lock	scrub.c	/^	spinlock_t		list_lock;$/;"	m	struct:scrub_ctx	file:
list_wait	scrub.c	/^	wait_queue_head_t	list_wait;$/;"	m	struct:scrub_ctx	file:
load_extent_tree_free	extent-tree.c	/^static int load_extent_tree_free(struct btrfs_caching_control *caching_ctl)$/;"	f	file:
load_free_ino_cache	free-space-cache.c	/^int load_free_ino_cache(struct btrfs_fs_info *fs_info, struct btrfs_root *root)$/;"	f
load_free_space_bitmaps	free-space-tree.c	/^static int load_free_space_bitmaps(struct btrfs_caching_control *caching_ctl,$/;"	f	file:
load_free_space_cache	free-space-cache.c	/^int load_free_space_cache(struct btrfs_fs_info *fs_info,$/;"	f
load_free_space_extents	free-space-tree.c	/^static int load_free_space_extents(struct btrfs_caching_control *caching_ctl,$/;"	f	file:
load_free_space_tree	free-space-tree.c	/^int load_free_space_tree(struct btrfs_caching_control *caching_ctl)$/;"	f
location	btrfs_inode.h	/^	struct btrfs_key location;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::btrfs_key
location	inode.c	/^	struct btrfs_key *location;$/;"	m	struct:btrfs_iget_args	typeref:struct:btrfs_iget_args::btrfs_key	file:
lock	btrfs_inode.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_inode
lock	ctree.h	/^	rwlock_t lock;$/;"	m	struct:btrfs_dev_replace
lock	ctree.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_block_group_cache
lock	ctree.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_block_rsv
lock	ctree.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_free_cluster
lock	ctree.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_space_info
lock	ctree.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_stripe_hash
lock	ctree.h	/^	struct mutex lock;$/;"	m	struct:btrfs_full_stripe_locks_tree	typeref:struct:btrfs_full_stripe_locks_tree::mutex
lock	delayed-inode.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_delayed_root
lock	delayed-ref.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_delayed_ref_head
lock	delayed-ref.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_delayed_ref_root
lock	extent_io.h	/^	rwlock_t lock;$/;"	m	struct:extent_buffer
lock	extent_io.h	/^	spinlock_t lock;$/;"	m	struct:extent_io_tree
lock	extent_map.h	/^	rwlock_t lock;$/;"	m	struct:extent_map_tree
lock	ordered-data.h	/^	spinlock_t lock;$/;"	m	struct:btrfs_ordered_inode_tree
lock	reada.c	/^	spinlock_t		lock;$/;"	m	struct:reada_extent	file:
lock	reada.c	/^	spinlock_t		lock;$/;"	m	struct:reada_zone	file:
lock	relocation.c	/^	spinlock_t lock;$/;"	m	struct:mapping_tree	file:
lock_and_cleanup_extent_if_need	file.c	/^lock_and_cleanup_extent_if_need(struct btrfs_inode *inode, struct page **pages,$/;"	f	file:
lock_delalloc_pages	extent_io.c	/^static noinline int lock_delalloc_pages(struct inode *inode,$/;"	f	file:
lock_extent	extent_io.h	/^static inline int lock_extent(struct extent_io_tree *tree, u64 start, u64 end)$/;"	f
lock_extent_bits	extent_io.c	/^int lock_extent_bits(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f
lock_extent_buffer_for_io	extent_io.c	/^lock_extent_buffer_for_io(struct extent_buffer *eb,$/;"	f	file:
lock_extent_direct	inode.c	/^static int lock_extent_direct(struct inode *inode, u64 lockstart, u64 lockend,$/;"	f	file:
lock_extent_range	ioctl.c	/^static int lock_extent_range(struct inode *inode, u64 off, u64 len,$/;"	f	file:
lock_finishing_cancel_unmount	ctree.h	/^	struct mutex lock_finishing_cancel_unmount;$/;"	m	struct:btrfs_dev_replace	typeref:struct:btrfs_dev_replace::mutex
lock_full_stripe	scrub.c	/^static int lock_full_stripe(struct btrfs_fs_info *fs_info, u64 bytenr,$/;"	f	file:
lock_nested	extent_io.h	/^	short lock_nested;$/;"	m	struct:extent_buffer
lock_owner	ctree.h	/^	pid_t lock_owner;$/;"	m	struct:btrfs_dev_replace
lock_owner	extent_io.h	/^	pid_t lock_owner;$/;"	m	struct:extent_buffer
lock_stripe_add	raid56.c	/^static noinline int lock_stripe_add(struct btrfs_raid_bio *rbio)$/;"	f	file:
locked	reada.c	/^	int			locked;$/;"	m	struct:reada_zone	file:
locked	relocation.c	/^	unsigned int locked:1;$/;"	m	struct:backref_node	file:
locked_page	inode.c	/^	struct page *locked_page;$/;"	m	struct:async_cow	typeref:struct:async_cow::page	file:
locks	ctree.h	/^	u8 locks[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_path
log_batch	ctree.h	/^	atomic_t log_batch;$/;"	m	struct:btrfs_root
log_commit	ctree.h	/^	atomic_t log_commit[2];$/;"	m	struct:btrfs_root
log_commit_wait	ctree.h	/^	wait_queue_head_t log_commit_wait[2];$/;"	m	struct:btrfs_root
log_ctxs	ctree.h	/^	struct list_head log_ctxs[2];$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
log_dir_items	tree-log.c	/^static noinline int log_dir_items(struct btrfs_trans_handle *trans,$/;"	f	file:
log_directory_changes	tree-log.c	/^static noinline int log_directory_changes(struct btrfs_trans_handle *trans,$/;"	f	file:
log_extents_lock	ctree.h	/^	spinlock_t log_extents_lock[2];$/;"	m	struct:btrfs_root
log_index	extent_io.h	/^	short log_index;$/;"	m	struct:extent_buffer
log_inode_item	tree-log.c	/^static int log_inode_item(struct btrfs_trans_handle *trans,$/;"	f	file:
log_list	ordered-data.h	/^	struct list_head log_list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::list_head
log_mutex	btrfs_inode.h	/^	struct mutex log_mutex;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::mutex
log_mutex	ctree.h	/^	struct mutex log_mutex;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::mutex
log_new_dentries	tree-log.h	/^	bool log_new_dentries;$/;"	m	struct:btrfs_log_ctx
log_new_dir_dentries	tree-log.c	/^static int log_new_dir_dentries(struct btrfs_trans_handle *trans,$/;"	f	file:
log_one_extent	tree-log.c	/^static int log_one_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
log_ret	tree-log.h	/^	int log_ret;$/;"	m	struct:btrfs_log_ctx
log_root	ctree.h	/^	__le64 log_root;$/;"	m	struct:btrfs_super_block
log_root	ctree.h	/^	struct btrfs_root *log_root;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_root
log_root_level	ctree.h	/^	u8 log_root_level;$/;"	m	struct:btrfs_super_block
log_root_transid	ctree.h	/^	__le64 log_root_transid;$/;"	m	struct:btrfs_super_block
log_root_tree	ctree.h	/^	struct btrfs_root *log_root_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
log_start_pid	ctree.h	/^	pid_t log_start_pid;$/;"	m	struct:btrfs_root
log_transid	ctree.h	/^	int log_transid;$/;"	m	struct:btrfs_root
log_transid	tree-log.h	/^	int log_transid;$/;"	m	struct:btrfs_log_ctx
log_transid_committed	ctree.h	/^	int log_transid_committed;$/;"	m	struct:btrfs_root
log_writer_wait	ctree.h	/^	wait_queue_head_t log_writer_wait;$/;"	m	struct:btrfs_root
log_writers	ctree.h	/^	atomic_t log_writers;$/;"	m	struct:btrfs_root
logged_inode_size	tree-log.c	/^static int logged_inode_size(struct btrfs_root *log, struct btrfs_inode *inode,$/;"	f	file:
logged_list	ctree.h	/^	struct list_head logged_list[2];$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
logged_trans	btrfs_inode.h	/^	u64 logged_trans;$/;"	m	struct:btrfs_inode
logic_end	scrub.c	/^	u64			logic_end;$/;"	m	struct:scrub_parity	file:
logic_start	scrub.c	/^	u64			logic_start;$/;"	m	struct:scrub_parity	file:
logical	ctree.c	/^	u64 logical;$/;"	m	struct:tree_mod_elem	file:
logical	ctree.c	/^	u64 logical;$/;"	m	struct:tree_mod_root	file:
logical	extent_io.h	/^	u64 logical;$/;"	m	struct:io_failure_record
logical	reada.c	/^	u64			logical;$/;"	m	struct:reada_extent	file:
logical	scrub.c	/^	u64			logical;$/;"	m	struct:scrub_bio	file:
logical	scrub.c	/^	u64			logical;$/;"	m	struct:scrub_copy_nocow_ctx	file:
logical	scrub.c	/^	u64			logical;$/;"	m	struct:scrub_fixup_nodatasum	file:
logical	scrub.c	/^	u64			logical;$/;"	m	struct:scrub_page	file:
logical	scrub.c	/^	u64			logical;$/;"	m	struct:scrub_warning	file:
logical	scrub.c	/^	u64 logical;$/;"	m	struct:full_stripe_lock	file:
logical	volumes.h	/^	u64 logical;$/;"	m	struct:btrfs_io_bio
logical_bytenr	check-integrity.c	/^	u64 logical_bytenr;	\/* logical byte num on disk *\/$/;"	m	struct:btrfsic_block	file:
logical_offset	btrfs_inode.h	/^	u64 logical_offset;$/;"	m	struct:btrfs_dio_private
logtypes	super.c	/^static const char * const logtypes[] = {$/;"	v	file:
lookup_dir_item_inode	send.c	/^static int lookup_dir_item_inode(struct btrfs_root *root,$/;"	f	file:
lookup_extent_backref	extent-tree.c	/^static int lookup_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	file:
lookup_extent_data_ref	extent-tree.c	/^static noinline int lookup_extent_data_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
lookup_extent_mapping	extent_map.c	/^struct extent_map *lookup_extent_mapping(struct extent_map_tree *tree,$/;"	f
lookup_free_ino_inode	free-space-cache.c	/^struct inode *lookup_free_ino_inode(struct btrfs_root *root,$/;"	f
lookup_free_space_inode	free-space-cache.c	/^struct inode *lookup_free_space_inode(struct btrfs_fs_info *fs_info,$/;"	f
lookup_inline_extent_backref	extent-tree.c	/^int lookup_inline_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	file:
lookup_tree_block_ref	extent-tree.c	/^static noinline int lookup_tree_block_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
lower	relocation.c	/^	struct list_head lower;$/;"	m	struct:backref_node	typeref:struct:backref_node::list_head	file:
lowest	relocation.c	/^	unsigned int lowest:1;$/;"	m	struct:backref_node	file:
lowest_level	ctree.h	/^	u8 lowest_level;$/;"	m	struct:btrfs_path
lzo_alloc_workspace	lzo.c	/^static struct list_head *lzo_alloc_workspace(void)$/;"	f	file:
lzo_compress_pages	lzo.c	/^static int lzo_compress_pages(struct list_head *ws,$/;"	f	file:
lzo_decompress	lzo.c	/^static int lzo_decompress(struct list_head *ws, unsigned char *data_in,$/;"	f	file:
lzo_decompress_bio	lzo.c	/^static int lzo_decompress_bio(struct list_head *ws, struct compressed_bio *cb)$/;"	f	file:
lzo_free_workspace	lzo.c	/^static void lzo_free_workspace(struct list_head *ws)$/;"	f	file:
magic	check-integrity.c	/^	u32 magic;$/;"	m	struct:btrfsic_stack_frame	file:
magic	ctree.h	/^	__le64 magic;$/;"	m	struct:btrfs_super_block
magic	send.h	/^	char magic[sizeof(BTRFS_SEND_STREAM_MAGIC)];$/;"	m	struct:btrfs_stream_header
magic_num	check-integrity.c	/^	u32 magic_num;		\/* only used for debug purposes *\/$/;"	m	struct:btrfsic_block	file:
magic_num	check-integrity.c	/^	u32 magic_num;		\/* only used for debug purposes *\/$/;"	m	struct:btrfsic_block_link	file:
magic_num	check-integrity.c	/^	u32 magic_num;		\/* only used for debug purposes *\/$/;"	m	struct:btrfsic_dev_state	file:
map	extent_map.h	/^	struct rb_root map;$/;"	m	struct:extent_map_tree	typeref:struct:extent_map_tree::rb_root
map_length	scrub.c	/^	u64			map_length;$/;"	m	struct:scrub_recover	file:
map_lookup	extent_map.h	/^		struct map_lookup *map_lookup;$/;"	m	union:extent_map::__anon10	typeref:struct:extent_map::__anon10::map_lookup
map_lookup	volumes.h	/^struct map_lookup {$/;"	s
map_lookup_size	volumes.h	361;"	d
map_private_extent_buffer	extent_io.c	/^int map_private_extent_buffer(const struct extent_buffer *eb,$/;"	f
map_tree	ctree.h	/^	struct extent_map_tree map_tree;$/;"	m	struct:btrfs_mapping_tree	typeref:struct:btrfs_mapping_tree::extent_map_tree
map_type	volumes.h	/^	u64 map_type; \/* get from map_lookup->type *\/$/;"	m	struct:btrfs_bio
mapping_node	relocation.c	/^struct mapping_node {$/;"	s	file:
mapping_tree	ctree.h	/^	struct btrfs_mapping_tree mapping_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_mapping_tree
mapping_tree	relocation.c	/^struct mapping_tree {$/;"	s	file:
mapping_tree_init	relocation.c	/^static void mapping_tree_init(struct mapping_tree *tree)$/;"	f	file:
mark_block_processed	relocation.c	/^static void mark_block_processed(struct reloc_control *rc,$/;"	f	file:
mark_extent_buffer_accessed	extent_io.c	/^static void mark_extent_buffer_accessed(struct extent_buffer *eb,$/;"	f	file:
mark_garbage_root	relocation.c	/^static noinline_for_stack int mark_garbage_root(struct btrfs_root *root)$/;"	f	file:
match_extent_data_ref	extent-tree.c	/^static int match_extent_data_ref(struct extent_buffer *leaf,$/;"	f	file:
max_avail	volumes.h	/^	u64 max_avail;$/;"	m	struct:btrfs_device_info
max_errors	volumes.h	/^	int max_errors;$/;"	m	struct:btrfs_bio
max_excl	qgroup.h	/^	u64 max_excl;$/;"	m	struct:btrfs_qgroup
max_extent_size	ctree.h	/^	u64 max_extent_size;	\/* This will hold the maximum extent size of$/;"	m	struct:btrfs_space_info
max_extent_size	free-space-cache.h	/^	u64 max_extent_size;$/;"	m	struct:btrfs_free_space
max_inline	ctree.h	/^	u64 max_inline;$/;"	m	struct:btrfs_fs_info
max_rfer	qgroup.h	/^	u64 max_rfer;$/;"	m	struct:btrfs_qgroup
max_size	ctree.h	/^	u64 max_size;$/;"	m	struct:btrfs_free_cluster
max_superblock_generation	check-integrity.c	/^	u64 max_superblock_generation;$/;"	m	struct:btrfsic_state	file:
may_commit_transaction	extent-tree.c	/^static int may_commit_transaction(struct btrfs_fs_info *fs_info,$/;"	f	file:
may_destroy_subvol	ioctl.c	/^static noinline int may_destroy_subvol(struct btrfs_root *root)$/;"	f	file:
may_wait_transaction	transaction.c	/^static int may_wait_transaction(struct btrfs_fs_info *fs_info, int type)$/;"	f	file:
maybe_fs_roots	qgroup.c	/^static int maybe_fs_roots(struct ulist *roots)$/;"	f	file:
maybe_insert_hole	inode.c	/^static int maybe_insert_hole(struct btrfs_root *root, struct inode *inode,$/;"	f	file:
maybe_send_hole	send.c	/^static int maybe_send_hole(struct send_ctx *sctx, struct btrfs_path *path,$/;"	f	file:
mem	lzo.c	/^	void *mem;$/;"	m	struct:workspace	file:
mem	zstd.c	/^	void *mem;$/;"	m	struct:workspace	file:
mem_to_free	check-integrity.c	/^	void *mem_to_free;$/;"	m	struct:btrfsic_block_data_ctx	file:
member	qgroup.c	/^	struct btrfs_qgroup *member;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:btrfs_qgroup_list::btrfs_qgroup	file:
members	qgroup.h	/^	struct list_head members; \/* groups that are members of this group *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:btrfs_qgroup::list_head
memcmp_extent_buffer	extent_io.c	/^int memcmp_extent_buffer(const struct extent_buffer *eb, const void *ptrv,$/;"	f
memcmp_node_keys	relocation.c	/^int memcmp_node_keys(struct extent_buffer *eb, int slot,$/;"	f	file:
memcpy_extent_buffer	extent_io.c	/^void memcpy_extent_buffer(struct extent_buffer *dst, unsigned long dst_offset,$/;"	f
memmove_extent_buffer	extent_io.c	/^void memmove_extent_buffer(struct extent_buffer *dst, unsigned long dst_offset,$/;"	f
memzero_extent_buffer	extent_io.c	/^void memzero_extent_buffer(struct extent_buffer *eb, unsigned long start,$/;"	f
mergable_maps	extent_map.c	/^static int mergable_maps(struct extent_map *prev, struct extent_map *next)$/;"	f	file:
merge_bio	extent_io.c	/^static int merge_bio(struct extent_io_tree *tree, struct page *page,$/;"	f	file:
merge_bio_hook	extent_io.h	/^	int (*merge_bio_hook)(struct page *page, unsigned long offset,$/;"	m	struct:extent_io_ops
merge_cb	extent_io.c	/^static void merge_cb(struct extent_io_tree *tree, struct extent_state *new,$/;"	f	file:
merge_extent_hook	extent_io.h	/^	void (*merge_extent_hook)(void *private_data,$/;"	m	struct:extent_io_ops
merge_extent_mapping	inode.c	/^static int merge_extent_mapping(struct extent_map_tree *em_tree,$/;"	f	file:
merge_rbio	raid56.c	/^static void merge_rbio(struct btrfs_raid_bio *dest,$/;"	f	file:
merge_ref	delayed-ref.c	/^static bool merge_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
merge_reloc_root	relocation.c	/^static noinline_for_stack int merge_reloc_root(struct reloc_control *rc,$/;"	f	file:
merge_reloc_roots	relocation.c	/^void merge_reloc_roots(struct reloc_control *rc)$/;"	f	file:
merge_reloc_tree	relocation.c	/^	unsigned int merge_reloc_tree:1;$/;"	m	struct:reloc_control	file:
merge_space_tree	free-space-cache.c	/^static void merge_space_tree(struct btrfs_free_space_ctl *ctl)$/;"	f	file:
merge_state	extent_io.c	/^static void merge_state(struct extent_io_tree *tree,$/;"	f	file:
merging_rsv_size	relocation.c	/^	u64 merging_rsv_size;$/;"	m	struct:reloc_control	file:
meta	volumes.h	/^	struct btrfs_balance_args meta;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_control::btrfs_balance_args
meta_alloc_cluster	ctree.h	/^	struct btrfs_free_cluster meta_alloc_cluster;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_free_cluster
metablock_size	check-integrity.c	/^	u32 metablock_size;$/;"	m	struct:btrfsic_state	file:
metadata	disk-io.c	/^	enum btrfs_wq_endio_type metadata;$/;"	m	struct:btrfs_end_io_wq	typeref:enum:btrfs_end_io_wq::btrfs_wq_endio_type	file:
metadata_ratio	ctree.h	/^	unsigned metadata_ratio;$/;"	m	struct:btrfs_fs_info
mirror_num	check-integrity.c	/^	int mirror_num;$/;"	m	struct:btrfsic_stack_frame	file:
mirror_num	check-integrity.c	/^	unsigned int mirror_num;	\/* large enough to hold$/;"	m	struct:btrfsic_block	file:
mirror_num	compression.h	/^	int mirror_num;$/;"	m	struct:compressed_bio
mirror_num	disk-io.c	/^	int mirror_num;$/;"	m	struct:async_submit_bio	file:
mirror_num	scrub.c	/^		unsigned int	mirror_num:8;$/;"	m	struct:scrub_page::__anon3	file:
mirror_num	scrub.c	/^	int			mirror_num;$/;"	m	struct:scrub_copy_nocow_ctx	file:
mirror_num	scrub.c	/^	int			mirror_num;$/;"	m	struct:scrub_fixup_nodatasum	file:
mirror_num	volumes.h	/^	int mirror_num;$/;"	m	struct:btrfs_bio
mirror_num	volumes.h	/^	unsigned int mirror_num;$/;"	m	struct:btrfs_io_bio
missing	volumes.h	/^	int missing;$/;"	m	struct:btrfs_device
missing_devices	volumes.h	/^	u64 missing_devices;$/;"	m	struct:btrfs_fs_devices
missing_raid56_work	raid56.c	/^static void missing_raid56_work(struct btrfs_work *work)$/;"	f	file:
mod_len	extent_map.h	/^	u64 mod_len;$/;"	m	struct:extent_map
mod_log_op	ctree.c	/^enum mod_log_op {$/;"	g	file:
mod_start	extent_map.h	/^	u64 mod_start;$/;"	m	struct:extent_map
mode	volumes.h	/^	fmode_t mode;$/;"	m	struct:btrfs_device
modified_extents	extent_map.h	/^	struct list_head modified_extents;$/;"	m	struct:extent_map_tree	typeref:struct:extent_map_tree::list_head
modify_free_space_bitmap	free-space-tree.c	/^static int modify_free_space_bitmap(struct btrfs_trans_handle *trans,$/;"	f	file:
mount_opt	ctree.h	/^	unsigned long mount_opt;$/;"	m	struct:btrfs_fs_info
mount_subvol	super.c	/^static struct dentry *mount_subvol(const char *subvol_name, u64 subvol_objectid,$/;"	f	file:
move	ctree.c	/^	struct tree_mod_move move;$/;"	m	struct:tree_mod_elem	typeref:struct:tree_mod_elem::tree_mod_move	file:
must_insert_reserved	delayed-ref.h	/^	unsigned int must_insert_reserved:1;$/;"	m	struct:btrfs_delayed_ref_head
mutex	ctree.h	/^	struct mutex mutex;$/;"	m	struct:btrfs_caching_control	typeref:struct:btrfs_caching_control::mutex
mutex	delayed-inode.h	/^	struct mutex mutex;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_delayed_node::mutex
mutex	delayed-ref.h	/^	struct mutex mutex;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:btrfs_delayed_ref_head::mutex
mutex	scrub.c	/^	struct mutex mutex;$/;"	m	struct:full_stripe_lock	typeref:struct:full_stripe_lock::mutex	file:
n_list	delayed-inode.h	/^	struct list_head n_list;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_delayed_node::list_head
name	check-integrity.c	/^	char name[BDEVNAME_SIZE];$/;"	m	struct:btrfsic_dev_state	file:
name	ctree.h	/^	char *name;$/;"	m	struct:btrfs_root
name	send.c	/^	char *name;$/;"	m	struct:recorded_ref	file:
name	send.c	/^	char name[];$/;"	m	struct:name_cache_entry	file:
name	send.c	/^	const char *name;$/;"	m	struct:find_xattr_ctx	file:
name	send.c	/^	struct fs_path *name;$/;"	m	struct:find_ref_ctx	typeref:struct:find_ref_ctx::fs_path	file:
name	volumes.h	/^	struct rcu_string *name;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::rcu_string
name_cache	send.c	/^	struct radix_tree_root name_cache;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::radix_tree_root	file:
name_cache_clean_unused	send.c	/^static void name_cache_clean_unused(struct send_ctx *sctx)$/;"	f	file:
name_cache_delete	send.c	/^static void name_cache_delete(struct send_ctx *sctx,$/;"	f	file:
name_cache_entry	send.c	/^struct name_cache_entry {$/;"	s	file:
name_cache_free	send.c	/^static void name_cache_free(struct send_ctx *sctx)$/;"	f	file:
name_cache_insert	send.c	/^static int name_cache_insert(struct send_ctx *sctx,$/;"	f	file:
name_cache_list	send.c	/^	struct list_head name_cache_list;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::list_head	file:
name_cache_search	send.c	/^static struct name_cache_entry *name_cache_search(struct send_ctx *sctx,$/;"	f	file:
name_cache_size	send.c	/^	int name_cache_size;$/;"	m	struct:send_ctx	file:
name_cache_used	send.c	/^static void name_cache_used(struct send_ctx *sctx, struct name_cache_entry *nce)$/;"	f	file:
name_in_log_ref	tree-log.c	/^static bool name_in_log_ref(struct btrfs_root *log_root,$/;"	f	file:
name_len	inode.c	/^	int name_len;$/;"	m	struct:dir_entry	file:
name_len	send.c	/^	int name_len;$/;"	m	struct:find_xattr_ctx	file:
name_len	send.c	/^	int name_len;$/;"	m	struct:name_cache_entry	file:
name_len	send.c	/^	int name_len;$/;"	m	struct:recorded_ref	file:
name_stem	disk-io.c	/^	const char		*name_stem;	\/* lock name stem *\/$/;"	m	struct:btrfs_lockdep_keyset	file:
names	disk-io.c	/^	char			names[BTRFS_MAX_LEVEL + 1][20];$/;"	m	struct:btrfs_lockdep_keyset	file:
ncopies	volumes.h	/^	int ncopies;		\/* how many copies to data has *\/$/;"	m	struct:btrfs_raid_attr
ndevs	reada.c	/^	int			ndevs;$/;"	m	struct:reada_zone	file:
need_commit_sem	ctree.h	/^	unsigned int need_commit_sem:1;$/;"	m	struct:btrfs_path
need_do_async_reclaim	extent-tree.c	/^static inline int need_do_async_reclaim(struct btrfs_fs_info *fs_info,$/;"	f	file:
need_force_cow	inode.c	/^static inline int need_force_cow(struct inode *inode, u64 start, u64 end)$/;"	f	file:
need_full_stripe	volumes.c	/^static bool need_full_stripe(enum btrfs_map_op op)$/;"	f	file:
need_later_update	send.c	/^	int need_later_update;$/;"	m	struct:name_cache_entry	file:
need_reserve_reloc_root	transaction.c	/^static inline bool need_reserve_reloc_root(struct btrfs_root *root)$/;"	f	file:
need_send_hole	send.c	/^static int need_send_hole(struct send_ctx *sctx)$/;"	f	file:
needs_free_space	ctree.h	/^	int needs_free_space;$/;"	m	struct:btrfs_block_group_cache
nesting_level	ctree.h	/^	atomic_t nesting_level;$/;"	m	struct:btrfs_dev_replace
never_written	check-integrity.c	/^	unsigned int never_written:1;	\/* block was added because it was$/;"	m	struct:btrfsic_block	file:
new	inode.c	/^	struct new_sa_defrag_extent *new;$/;"	m	struct:old_sa_defrag_extent	typeref:struct:old_sa_defrag_extent::new_sa_defrag_extent	file:
new_bgs	transaction.h	/^	struct list_head new_bgs;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_trans_handle::list_head
new_bytenr	relocation.c	/^	u64 new_bytenr;$/;"	m	struct:backref_node	file:
new_delalloc_bytes	btrfs_inode.h	/^	u64 new_delalloc_bytes;$/;"	m	struct:btrfs_inode
new_refcnt	qgroup.h	/^	u64 new_refcnt;$/;"	m	struct:btrfs_qgroup
new_refs	send.c	/^	struct list_head new_refs;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::list_head	file:
new_sa_defrag_extent	inode.c	/^struct new_sa_defrag_extent {$/;"	s	file:
new_simple_dir	inode.c	/^static struct inode *new_simple_dir(struct super_block *s,$/;"	f	file:
newtrans	transaction.c	/^	struct btrfs_trans_handle *newtrans;$/;"	m	struct:btrfs_async_commit	typeref:struct:btrfs_async_commit::btrfs_trans_handle	file:
next	backref.c	/^	struct extent_inode_elem *next;$/;"	m	struct:extent_inode_elem	typeref:struct:extent_inode_elem::extent_inode_elem	file:
next_block	check-integrity.c	/^	struct btrfsic_block *next_block;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_stack_frame::btrfsic_block	file:
next_block_ctx	check-integrity.c	/^	struct btrfsic_block_data_ctx next_block_ctx;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_stack_frame::btrfsic_block_data_ctx	file:
next_block_group	extent-tree.c	/^next_block_group(struct btrfs_fs_info *fs_info,$/;"	f	file:
next_extent_map	inode.c	/^static struct extent_map *next_extent_map(struct extent_map *em)$/;"	f	file:
next_free	scrub.c	/^	int			next_free;$/;"	m	struct:scrub_bio	file:
next_group	qgroup.c	/^	struct list_head next_group;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:btrfs_qgroup_list::list_head	file:
next_in_same_bio	check-integrity.c	/^	struct btrfsic_block *next_in_same_bio;$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block::btrfsic_block	file:
next_member	qgroup.c	/^	struct list_head next_member;$/;"	m	struct:btrfs_qgroup_list	typeref:struct:btrfs_qgroup_list::list_head	file:
next_root_backup	disk-io.c	/^static noinline int next_root_backup(struct btrfs_fs_info *info,$/;"	f	file:
next_state	extent_io.c	/^static struct extent_state *next_state(struct extent_state *state)$/;"	f	file:
nnodes	ulist.h	/^	unsigned long nnodes;$/;"	m	struct:ulist
no_io_error_seen	scrub.c	/^		unsigned int	no_io_error_seen:1;$/;"	m	struct:scrub_block::__anon4	file:
nocow_writers	ctree.h	/^	atomic_t nocow_writers;$/;"	m	struct:btrfs_block_group_cache
node	ctree.c	/^	struct rb_node node;$/;"	m	struct:tree_mod_elem	typeref:struct:tree_mod_elem::rb_node	file:
node	ctree.h	/^	struct extent_buffer *node;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::extent_buffer
node	delayed-ref.h	/^	struct btrfs_delayed_ref_node node;$/;"	m	struct:btrfs_delayed_data_ref	typeref:struct:btrfs_delayed_data_ref::btrfs_delayed_ref_node
node	delayed-ref.h	/^	struct btrfs_delayed_ref_node node;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:btrfs_delayed_ref_head::btrfs_delayed_ref_node
node	delayed-ref.h	/^	struct btrfs_delayed_ref_node node;$/;"	m	struct:btrfs_delayed_tree_ref	typeref:struct:btrfs_delayed_tree_ref::btrfs_delayed_ref_node
node	inode.c	/^	struct rb_node node;$/;"	m	struct:sa_defrag_extent_backref	typeref:struct:sa_defrag_extent_backref::rb_node	file:
node	props.c	/^	struct hlist_node node;$/;"	m	struct:prop_handler	typeref:struct:prop_handler::hlist_node	file:
node	qgroup.h	/^	struct rb_node node;	  \/* tree of qgroups *\/$/;"	m	struct:btrfs_qgroup	typeref:struct:btrfs_qgroup::rb_node
node	qgroup.h	/^	struct rb_node node;$/;"	m	struct:btrfs_qgroup_extent_record	typeref:struct:btrfs_qgroup_extent_record::rb_node
node	relocation.c	/^	struct backref_node *node[2];$/;"	m	struct:backref_edge	typeref:struct:backref_edge::backref_node	file:
node	scrub.c	/^	struct rb_node node;$/;"	m	struct:full_stripe_lock	typeref:struct:full_stripe_lock::rb_node	file:
node	send.c	/^	struct rb_node node;$/;"	m	struct:orphan_dir_info	typeref:struct:orphan_dir_info::rb_node	file:
node	send.c	/^	struct rb_node node;$/;"	m	struct:pending_dir_move	typeref:struct:pending_dir_move::rb_node	file:
node	send.c	/^	struct rb_node node;$/;"	m	struct:waiting_dir_move	typeref:struct:waiting_dir_move::rb_node	file:
node_list	delayed-inode.h	/^	struct list_head node_list;$/;"	m	struct:btrfs_delayed_root	typeref:struct:btrfs_delayed_root::list_head
node_ref_from	check-integrity.c	/^	struct list_head node_ref_from;	\/* list node *\/$/;"	m	struct:btrfsic_block_link	typeref:struct:btrfsic_block_link::list_head	file:
node_ref_to	check-integrity.c	/^	struct list_head node_ref_to;	\/* list node *\/$/;"	m	struct:btrfsic_block_link	typeref:struct:btrfsic_block_link::list_head	file:
nodes	ctree.h	/^	struct extent_buffer *nodes[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_path	typeref:struct:btrfs_path::extent_buffer
nodes	delayed-inode.h	/^	int nodes;		\/* for delayed nodes *\/$/;"	m	struct:btrfs_delayed_root
nodes	ulist.h	/^	struct list_head nodes;$/;"	m	struct:ulist	typeref:struct:ulist::list_head
nodes_relocated	relocation.c	/^	u64 nodes_relocated;$/;"	m	struct:reloc_control	file:
nodesize	ctree.h	/^	__le32 nodesize;$/;"	m	struct:btrfs_super_block
nodesize	ctree.h	/^	u32 nodesize;$/;"	m	struct:btrfs_fs_info
normal	async-thread.c	/^	struct __btrfs_workqueue *normal;$/;"	m	struct:btrfs_workqueue	typeref:struct:btrfs_workqueue::__btrfs_workqueue	file:
normal_work	async-thread.h	/^	struct work_struct normal_work;$/;"	m	struct:btrfs_work	typeref:struct:btrfs_work::work_struct
normal_work_helper	async-thread.c	/^static void normal_work_helper(struct btrfs_work *work)$/;"	f	file:
normal_wq	async-thread.c	/^	struct workqueue_struct *normal_wq;$/;"	m	struct:__btrfs_workqueue	typeref:struct:__btrfs_workqueue::workqueue_struct	file:
nr	check-integrity.c	/^	u32 nr;$/;"	m	struct:btrfsic_stack_frame	file:
nr	delayed-inode.c	/^	int nr;$/;"	m	struct:btrfs_async_delayed_work	file:
nr	relocation.c	/^	unsigned int nr;$/;"	m	struct:file_extent_cluster	file:
nr_async_bios	ctree.h	/^	atomic_t nr_async_bios;$/;"	m	struct:btrfs_fs_info
nr_async_submits	ctree.h	/^	atomic_t nr_async_submits;$/;"	m	struct:btrfs_fs_info
nr_data	raid56.c	/^	int nr_data;$/;"	m	struct:btrfs_raid_bio	file:
nr_data_stripes	raid56.h	/^static inline int nr_data_stripes(struct map_lookup *map)$/;"	f
nr_delalloc_inodes	ctree.h	/^	u64 nr_delalloc_inodes;$/;"	m	struct:btrfs_root
nr_edges	relocation.c	/^	int nr_edges;$/;"	m	struct:backref_cache	file:
nr_items	ctree.c	/^	int nr_items;$/;"	m	struct:tree_mod_move	file:
nr_nodes	relocation.c	/^	int nr_nodes;$/;"	m	struct:backref_cache	file:
nr_ordered_extents	ctree.h	/^	u64 nr_ordered_extents;$/;"	m	struct:btrfs_root
nr_pages	compression.h	/^	unsigned long nr_pages;$/;"	m	struct:compressed_bio
nr_pages	inode.c	/^	unsigned long nr_pages;$/;"	m	struct:async_extent	file:
nr_pages	raid56.c	/^	int nr_pages;$/;"	m	struct:btrfs_raid_bio	file:
nr_parity_stripes	raid56.h	/^static inline int nr_parity_stripes(struct map_lookup *map)$/;"	f
nritems	ctree.h	/^	__le32 nritems;$/;"	m	struct:btrfs_header
nsec	ioctl.c	/^	__u32 nsec;$/;"	m	struct:btrfs_ioctl_timespec_32	file:
nsectors	scrub.c	/^	int			nsectors;$/;"	m	struct:scrub_parity	file:
num_bytes	delayed-ref.h	/^	u64 num_bytes;$/;"	m	struct:btrfs_delayed_ref_node
num_bytes	inode.c	/^	u64 num_bytes;$/;"	m	struct:sa_defrag_extent_backref	file:
num_bytes	qgroup.h	/^	u64 num_bytes;$/;"	m	struct:btrfs_qgroup_extent_record
num_copies	check-integrity.c	/^	int num_copies;$/;"	m	struct:btrfsic_stack_frame	file:
num_devices	ctree.h	/^	__le64 num_devices;$/;"	m	struct:btrfs_root_backup
num_devices	ctree.h	/^	__le64 num_devices;$/;"	m	struct:btrfs_super_block
num_devices	volumes.h	/^	u64 num_devices;$/;"	m	struct:btrfs_fs_devices
num_dirty_bgs	transaction.h	/^	u64 num_dirty_bgs;$/;"	m	struct:btrfs_transaction
num_entries	delayed-ref.h	/^	atomic_t num_entries;$/;"	m	struct:btrfs_delayed_ref_root
num_extent_pages	extent_io.h	/^static inline unsigned long num_extent_pages(u64 start, u64 len)$/;"	f
num_extwriters	transaction.h	/^	atomic_t num_extwriters;$/;"	m	struct:btrfs_transaction
num_heads	delayed-ref.h	/^	unsigned long num_heads;$/;"	m	struct:btrfs_delayed_ref_root
num_heads_ready	delayed-ref.h	/^	unsigned long num_heads_ready;$/;"	m	struct:btrfs_delayed_ref_root
num_pages	ctree.h	/^	int num_pages;$/;"	m	struct:btrfs_io_ctl
num_pages	ioctl.c	/^	int		num_pages;$/;"	m	struct:cmp_pages	file:
num_stripes	volumes.h	/^	int num_stripes;$/;"	m	struct:btrfs_bio
num_stripes	volumes.h	/^	int num_stripes;$/;"	m	struct:map_lookup
num_tgtdevs	volumes.h	/^	int num_tgtdevs;$/;"	m	struct:btrfs_bio
num_uncorrectable_read_errors	ctree.h	/^	atomic64_t num_uncorrectable_read_errors;$/;"	m	struct:btrfs_dev_replace
num_write_errors	ctree.h	/^	atomic64_t num_write_errors;$/;"	m	struct:btrfs_dev_replace
num_writers	transaction.h	/^	atomic_t num_writers;$/;"	m	struct:btrfs_transaction
nzones	reada.c	/^	int			nzones;$/;"	m	struct:reada_extent	file:
objectid	ctree.h	/^	u64 objectid;$/;"	m	struct:btrfs_root
objectid	delayed-ref.h	/^	u64 objectid;$/;"	m	struct:btrfs_delayed_data_ref
objectid	export.h	/^	u64 objectid;$/;"	m	struct:btrfs_fid
objectid_mutex	ctree.h	/^	struct mutex objectid_mutex;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::mutex
offset	backref.c	/^	u64 offset;$/;"	m	struct:extent_inode_elem	file:
offset	ctree.h	/^	__le32 offset;$/;"	m	struct:btrfs_item
offset	ctree.h	/^	unsigned long offset;$/;"	m	struct:btrfs_map_token
offset	delayed-ref.h	/^	u64 offset;$/;"	m	struct:btrfs_delayed_data_ref
offset	extent_io.c	/^	u64 offset;$/;"	m	struct:fiemap_cache	file:
offset	free-space-cache.h	/^	u64 offset;$/;"	m	struct:btrfs_free_space
offset	inode.c	/^	u64 offset;$/;"	m	struct:dir_entry	file:
offset	inode.c	/^	u64 offset;$/;"	m	struct:old_sa_defrag_extent	file:
offset	scrub.c	/^	u64			offset;$/;"	m	struct:scrub_nocow_inode	file:
offset	send.c	/^	u64 offset;$/;"	m	struct:clone_root	file:
offset_in_entry	ordered-data.c	/^static int offset_in_entry(struct btrfs_ordered_extent *entry, u64 file_offset)$/;"	f	file:
offset_index	free-space-cache.h	/^	struct rb_node offset_index;$/;"	m	struct:btrfs_free_space	typeref:struct:btrfs_free_space::rb_node
offset_to_bit	free-space-cache.c	/^static inline unsigned long offset_to_bit(u64 bitmap_start, u32 unit,$/;"	f	file:
offset_to_bitmap	free-space-cache.c	/^static inline u64 offset_to_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
old	inode.c	/^	struct old_sa_defrag_extent *old;$/;"	m	struct:sa_defrag_extent_backref	typeref:struct:sa_defrag_extent_backref::old_sa_defrag_extent	file:
old_refcnt	qgroup.h	/^	u64 old_refcnt;$/;"	m	struct:btrfs_qgroup
old_root	ctree.c	/^	struct tree_mod_root old_root;$/;"	m	struct:tree_mod_elem	typeref:struct:tree_mod_elem::tree_mod_root	file:
old_roots	qgroup.h	/^	struct ulist *old_roots;$/;"	m	struct:btrfs_qgroup_extent_record	typeref:struct:btrfs_qgroup_extent_record::ulist
old_sa_defrag_extent	inode.c	/^struct old_sa_defrag_extent {$/;"	s	file:
op	ctree.c	/^	enum mod_log_op op;$/;"	m	struct:tree_mod_elem	typeref:enum:tree_mod_elem::mod_log_op	file:
op	free-space-cache.h	/^	const struct btrfs_free_space_op *op;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:btrfs_free_space_ctl::btrfs_free_space_op
open_ctree	disk-io.c	/^int open_ctree(struct super_block *sb,$/;"	f
open_devices	volumes.h	/^	u64 open_devices;$/;"	m	struct:btrfs_fs_devices
open_ioctl_trans	ctree.h	/^	atomic_t open_ioctl_trans;$/;"	m	struct:btrfs_fs_info
open_seed_devices	volumes.c	/^static struct btrfs_fs_devices *open_seed_devices(struct btrfs_fs_info *fs_info,$/;"	f	file:
opened	volumes.h	/^	int opened;$/;"	m	struct:btrfs_fs_devices
operation	raid56.c	/^	enum btrfs_rbio_ops operation;$/;"	m	struct:btrfs_raid_bio	typeref:enum:btrfs_raid_bio::btrfs_rbio_ops	file:
ops	extent_io.h	/^	const struct extent_io_ops *ops;$/;"	m	struct:extent_io_tree	typeref:struct:extent_io_tree::extent_io_ops
ordered_data_exit	ordered-data.c	/^void ordered_data_exit(void)$/;"	f
ordered_data_init	ordered-data.c	/^int __init ordered_data_init(void)$/;"	f
ordered_data_tree_panic	ordered-data.c	/^static void ordered_data_tree_panic(struct inode *inode, int errno,$/;"	f	file:
ordered_extent_lock	ctree.h	/^	spinlock_t ordered_extent_lock;$/;"	m	struct:btrfs_root
ordered_extent_mutex	ctree.h	/^	struct mutex ordered_extent_mutex;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::mutex
ordered_extents	ctree.h	/^	struct list_head ordered_extents;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
ordered_free	async-thread.h	/^	btrfs_func_t ordered_free;$/;"	m	struct:btrfs_work
ordered_func	async-thread.h	/^	btrfs_func_t ordered_func;$/;"	m	struct:btrfs_work
ordered_list	async-thread.c	/^	struct list_head ordered_list;$/;"	m	struct:__btrfs_workqueue	typeref:struct:__btrfs_workqueue::list_head	file:
ordered_list	async-thread.h	/^	struct list_head ordered_list;$/;"	m	struct:btrfs_work	typeref:struct:btrfs_work::list_head
ordered_operations_mutex	ctree.h	/^	struct mutex ordered_operations_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
ordered_root	ctree.h	/^	struct list_head ordered_root;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
ordered_root_lock	ctree.h	/^	spinlock_t ordered_root_lock;$/;"	m	struct:btrfs_fs_info
ordered_roots	ctree.h	/^	struct list_head ordered_roots;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
ordered_tree	btrfs_inode.h	/^	struct btrfs_ordered_inode_tree ordered_tree;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::btrfs_ordered_inode_tree
orig	ctree.h	/^	void *cur, *orig;$/;"	m	struct:btrfs_io_ctl
orig_bio	btrfs_inode.h	/^	struct bio *orig_bio;$/;"	m	struct:btrfs_dio_private	typeref:struct:btrfs_dio_private::bio
orig_bio	compression.h	/^	struct bio *orig_bio;$/;"	m	struct:compressed_bio	typeref:struct:compressed_bio::bio
orig_bio	volumes.h	/^	struct bio *orig_bio;$/;"	m	struct:btrfs_bio	typeref:struct:btrfs_bio::bio
orig_bio_bh_end_io	check-integrity.c	/^	} orig_bio_bh_end_io;$/;"	m	struct:btrfsic_block	typeref:union:btrfsic_block::__anon5	file:
orig_bio_bh_private	check-integrity.c	/^	void *orig_bio_bh_private;$/;"	m	struct:btrfsic_block	file:
orig_block_len	extent_map.h	/^	u64 orig_block_len;$/;"	m	struct:extent_map
orig_rsv	transaction.h	/^	struct btrfs_block_rsv *orig_rsv;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_trans_handle::btrfs_block_rsv
orig_start	extent_map.h	/^	u64 orig_start;$/;"	m	struct:extent_map
orphan_block_rsv	ctree.h	/^	struct btrfs_block_rsv *orphan_block_rsv;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_block_rsv
orphan_cleanup_state	ctree.h	/^	int orphan_cleanup_state;$/;"	m	struct:btrfs_root
orphan_dir_info	send.c	/^struct orphan_dir_info {$/;"	s	file:
orphan_dirs	send.c	/^	struct rb_root orphan_dirs;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::rb_root	file:
orphan_inodes	ctree.h	/^	atomic_t orphan_inodes;$/;"	m	struct:btrfs_root
orphan_lock	ctree.h	/^	spinlock_t orphan_lock;$/;"	m	struct:btrfs_root
orphanize_inode	send.c	/^static int orphanize_inode(struct send_ctx *sctx, u64 ino, u64 gen,$/;"	f	file:
orphanized	send.c	/^	bool orphanized;$/;"	m	struct:waiting_dir_move	file:
outstanding_extents	btrfs_inode.h	/^	unsigned outstanding_extents;$/;"	m	struct:btrfs_inode
outstanding_extents	inode.c	/^	u64 outstanding_extents;$/;"	m	struct:btrfs_dio_data	file:
outstanding_isize	ordered-data.h	/^	u64 outstanding_isize;$/;"	m	struct:btrfs_ordered_extent
outstanding_pages	scrub.c	/^	atomic_t		outstanding_pages;$/;"	m	struct:scrub_block	file:
overwrite	inode.c	/^	int overwrite;$/;"	m	struct:btrfs_dio_data	file:
overwrite_item	tree-log.c	/^static noinline int overwrite_item(struct btrfs_trans_handle *trans,$/;"	f	file:
owner	ctree.h	/^	__le64 owner;$/;"	m	struct:btrfs_header
owner	relocation.c	/^	u64 owner;$/;"	m	struct:backref_node	file:
p_list	delayed-inode.h	/^	struct list_head p_list;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_delayed_node::list_head
pad	send.c	/^		char pad[256];$/;"	m	union:fs_path::__anon1	file:
page	ctree.h	/^	struct page *page;$/;"	m	struct:btrfs_io_ctl	typeref:struct:btrfs_io_ctl::page
page	extent_io.h	/^	struct page *page;$/;"	m	struct:io_failure_record	typeref:struct:io_failure_record::page
page	inode.c	/^	struct page *page;$/;"	m	struct:btrfs_writepage_fixup	typeref:struct:btrfs_writepage_fixup::page	file:
page	scrub.c	/^	struct page		*page;$/;"	m	struct:scrub_page	typeref:struct:scrub_page::page	file:
page_count	scrub.c	/^	int			page_count;$/;"	m	struct:scrub_bio	file:
page_count	scrub.c	/^	int			page_count;$/;"	m	struct:scrub_block	file:
page_in_rbio	raid56.c	/^static struct page *page_in_rbio(struct btrfs_raid_bio *rbio,$/;"	f	file:
pages	ctree.h	/^	struct page **pages;$/;"	m	struct:btrfs_io_ctl	typeref:struct:btrfs_io_ctl::page
pages	extent_io.h	/^	struct page *pages[INLINE_EXTENT_BUFFER_PAGES];$/;"	m	struct:extent_buffer	typeref:struct:extent_buffer::page
pages	inode.c	/^	struct page **pages;$/;"	m	struct:async_extent	typeref:struct:async_extent::page	file:
pages_per_rd_bio	scrub.c	/^	int			pages_per_rd_bio;$/;"	m	struct:scrub_ctx	file:
pages_per_wr_bio	scrub.c	/^	int                     pages_per_wr_bio; \/* <= SCRUB_PAGES_PER_WR_BIO *\/$/;"	m	struct:scrub_ctx	file:
pagev	check-integrity.c	/^	struct page **pagev;$/;"	m	struct:btrfsic_block_data_ctx	typeref:struct:btrfsic_block_data_ctx::page	file:
pagev	scrub.c	/^	struct scrub_page	*pagev[SCRUB_MAX_PAGES_PER_BLOCK];$/;"	m	struct:scrub_block	typeref:struct:scrub_block::scrub_page	file:
pagev	scrub.c	/^	struct scrub_page	*pagev[SCRUB_PAGES_PER_RD_BIO];$/;"	m	struct:scrub_bio	typeref:struct:scrub_bio::scrub_page	file:
pagev	scrub.c	/^	struct scrub_page	*pagev[SCRUB_PAGES_PER_WR_BIO];$/;"	m	struct:scrub_bio	typeref:struct:scrub_bio::scrub_page	file:
parent	backref.h	/^	u64 parent;$/;"	m	struct:prelim_ref
parent	delayed-ref.h	/^	u64 parent;$/;"	m	struct:btrfs_delayed_data_ref
parent	delayed-ref.h	/^	u64 parent;$/;"	m	struct:btrfs_delayed_tree_ref
parent_gen	export.h	/^	u32 parent_gen;$/;"	m	struct:btrfs_fid
parent_gen	send.c	/^	u64 parent_gen;$/;"	m	struct:name_cache_entry	file:
parent_generation	check-integrity.c	/^	u64 parent_generation;$/;"	m	struct:btrfsic_block_link	file:
parent_ino	send.c	/^	u64 parent_ino;$/;"	m	struct:name_cache_entry	file:
parent_ino	send.c	/^	u64 parent_ino;$/;"	m	struct:pending_dir_move	file:
parent_objectid	export.h	/^	u64 parent_objectid;$/;"	m	struct:btrfs_fid
parent_root	send.c	/^	struct btrfs_root *parent_root;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::btrfs_root	file:
parent_root_objectid	export.h	/^	u64 parent_root_objectid;$/;"	m	struct:btrfs_fid
parity_smaller	volumes.c	/^static inline int parity_smaller(u64 a, u64 b)$/;"	f	file:
parse_security_options	super.c	/^static int parse_security_options(char *orig_opts,$/;"	f	file:
partial_stripe_write	raid56.c	/^static int partial_stripe_write(struct btrfs_raid_bio *rbio)$/;"	f	file:
path	inode.c	/^	struct btrfs_path *path;$/;"	m	struct:new_sa_defrag_extent	typeref:struct:new_sa_defrag_extent::btrfs_path	file:
path	relocation.c	/^	struct backref_node *path[BTRFS_MAX_LEVEL];$/;"	m	struct:backref_cache	typeref:struct:backref_cache::backref_node	file:
path	scrub.c	/^	struct btrfs_path	*path;$/;"	m	struct:scrub_warning	typeref:struct:scrub_warning::btrfs_path	file:
path	send.c	/^	struct btrfs_path *path;$/;"	m	struct:backref_ctx	typeref:struct:backref_ctx::btrfs_path	file:
path	transaction.h	/^	struct btrfs_path *path;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::btrfs_path
path_loop	send.c	/^static int path_loop(struct send_ctx *sctx, struct fs_path *name,$/;"	f	file:
paths_from_inode	backref.c	/^int paths_from_inode(u64 inum, struct inode_fs_paths *ipath)$/;"	f
pending	async-thread.c	/^	atomic_t pending;$/;"	m	struct:__btrfs_workqueue	file:
pending	relocation.c	/^	struct list_head pending[BTRFS_MAX_LEVEL];$/;"	m	struct:backref_cache	typeref:struct:backref_cache::list_head	file:
pending	relocation.c	/^	unsigned int pending:1;$/;"	m	struct:backref_node	file:
pending_bios	btrfs_inode.h	/^	atomic_t pending_bios;$/;"	m	struct:btrfs_dio_private
pending_bios	compression.h	/^	refcount_t pending_bios;$/;"	m	struct:compressed_bio
pending_bios	volumes.h	/^	struct btrfs_pending_bios pending_bios;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::btrfs_pending_bios
pending_bios_fn	volumes.c	/^static void pending_bios_fn(struct btrfs_work *work)$/;"	f	file:
pending_changes	ctree.h	/^	unsigned long pending_changes;$/;"	m	struct:btrfs_fs_info
pending_chunks	transaction.h	/^	struct list_head pending_chunks;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
pending_csums	delayed-ref.h	/^	u64 pending_csums;$/;"	m	struct:btrfs_delayed_ref_root
pending_dir_move	send.c	/^struct pending_dir_move {$/;"	s	file:
pending_dir_moves	send.c	/^	struct rb_root pending_dir_moves;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::rb_root	file:
pending_ordered	transaction.h	/^	atomic_t pending_ordered;$/;"	m	struct:btrfs_transaction
pending_snapshots	transaction.h	/^	struct list_head pending_snapshots;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
pending_sync_bios	volumes.h	/^	struct btrfs_pending_bios pending_sync_bios;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::btrfs_pending_bios
pending_wait	transaction.h	/^	wait_queue_head_t pending_wait;$/;"	m	struct:btrfs_transaction
phys	extent_io.c	/^	u64 phys;$/;"	m	struct:fiemap_cache	file:
physical	scrub.c	/^	u64			physical;$/;"	m	struct:scrub_bio	file:
physical	scrub.c	/^	u64			physical;$/;"	m	struct:scrub_page	file:
physical	volumes.h	/^	u64 physical;$/;"	m	struct:btrfs_bio_stripe
physical_for_dev_replace	scrub.c	/^	u64			physical_for_dev_replace;$/;"	m	struct:scrub_copy_nocow_ctx	file:
physical_for_dev_replace	scrub.c	/^	u64			physical_for_dev_replace;$/;"	m	struct:scrub_page	file:
pin	tree-log.c	/^	int pin;$/;"	m	struct:walk_control	file:
pin_down_extent	extent-tree.c	/^static int pin_down_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
pinned	ctree.h	/^	u64 pinned;$/;"	m	struct:btrfs_block_group_cache
pinned_chunks	ctree.h	/^	struct list_head pinned_chunks;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
pinned_extents	ctree.h	/^	struct extent_io_tree *pinned_extents;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::extent_io_tree
pinned_free_ino_op	inode-map.c	/^static const struct btrfs_free_space_op pinned_free_ino_op = {$/;"	v	typeref:struct:btrfs_free_space_op	file:
pinned_recalc_thresholds	inode-map.c	/^static void pinned_recalc_thresholds(struct btrfs_free_space_ctl *ctl)$/;"	f	file:
pinned_use_bitmap	inode-map.c	/^static bool pinned_use_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
plug_cmp	raid56.c	/^static int plug_cmp(void *priv, struct list_head *a, struct list_head *b)$/;"	f	file:
plug_list	raid56.c	/^	struct list_head plug_list;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::list_head	file:
populate_free_space_tree	free-space-tree.c	/^static int populate_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
prealloc_file_extent_cluster	relocation.c	/^int prealloc_file_extent_cluster(struct inode *inode,$/;"	f	file:
prealloc_only	tests/inode-tests.c	/^static unsigned long prealloc_only = 0;$/;"	v	file:
preftree	backref.c	/^struct preftree {$/;"	s	file:
preftrees	backref.c	/^struct preftrees {$/;"	s	file:
prelim_ref	backref.h	/^struct prelim_ref {$/;"	s
prelim_ref_compare	backref.c	/^static int prelim_ref_compare(struct prelim_ref *ref1,$/;"	f	file:
prelim_ref_insert	backref.c	/^static void prelim_ref_insert(const struct btrfs_fs_info *fs_info,$/;"	f	file:
prelim_release	backref.c	/^static void prelim_release(struct preftree *preftree)$/;"	f	file:
prepare_list	delayed-inode.h	/^	struct list_head prepare_list;$/;"	m	struct:btrfs_delayed_root	typeref:struct:btrfs_delayed_root::list_head
prepare_pages	file.c	/^static noinline int prepare_pages(struct inode *inode, struct page **pages,$/;"	f	file:
prepare_to_merge	relocation.c	/^int prepare_to_merge(struct reloc_control *rc, int err)$/;"	f	file:
prepare_to_relocate	relocation.c	/^int prepare_to_relocate(struct reloc_control *rc)$/;"	f	file:
prepare_uptodate_page	file.c	/^static int prepare_uptodate_page(struct inode *inode,$/;"	f	file:
prev	check-integrity.c	/^	struct btrfsic_stack_frame *prev;$/;"	m	struct:btrfsic_stack_frame	typeref:struct:btrfsic_stack_frame::btrfsic_stack_frame	file:
prev_extent_map	inode.c	/^static struct extent_map *prev_extent_map(struct extent_map *em)$/;"	f	file:
print_chunk	print-tree.c	/^static void print_chunk(struct extent_buffer *eb, struct btrfs_chunk *chunk)$/;"	f	file:
print_dev_item	print-tree.c	/^static void print_dev_item(struct extent_buffer *eb,$/;"	f	file:
print_extent_data_ref	print-tree.c	/^static void print_extent_data_ref(struct extent_buffer *eb,$/;"	f	file:
print_extent_item	print-tree.c	/^static void print_extent_item(struct extent_buffer *eb, int slot, int type)$/;"	f	file:
print_extent_ref_v0	print-tree.c	/^static void print_extent_ref_v0(struct extent_buffer *eb, int slot)$/;"	f	file:
print_mask	check-integrity.c	/^	u32 print_mask;$/;"	m	struct:btrfsic_state	file:
print_uuid_item	print-tree.c	/^static void print_uuid_item(struct extent_buffer *l, unsigned long offset,$/;"	f	file:
printk_in_rcu	rcu-string.h	41;"	d
printk_limits	super.c	/^static struct ratelimit_state printk_limits[] = {$/;"	v	typeref:struct:ratelimit_state	file:
printk_ratelimited_in_rcu	rcu-string.h	47;"	d
priority_reclaim_metadata_space	extent-tree.c	/^static void priority_reclaim_metadata_space(struct btrfs_fs_info *fs_info,$/;"	f	file:
priority_tickets	ctree.h	/^	struct list_head priority_tickets;$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::list_head
private	disk-io.c	/^	void *private;$/;"	m	struct:btrfs_end_io_wq	file:
private_data	disk-io.c	/^	void *private_data;$/;"	m	struct:async_submit_bio	file:
private_data	extent_io.h	/^	void *private_data;$/;"	m	struct:extent_io_tree
process_all_extents	send.c	/^static int process_all_extents(struct send_ctx *sctx)$/;"	f	file:
process_all_new_xattrs	send.c	/^static int process_all_new_xattrs(struct send_ctx *sctx)$/;"	f	file:
process_all_refs	send.c	/^static int process_all_refs(struct send_ctx *sctx,$/;"	f	file:
process_changed_xattr	send.c	/^static int process_changed_xattr(struct send_ctx *sctx)$/;"	f	file:
process_deleted_xattr	send.c	/^static int process_deleted_xattr(struct send_ctx *sctx)$/;"	f	file:
process_extent	send.c	/^static int process_extent(struct send_ctx *sctx,$/;"	f	file:
process_func	tree-log.c	/^	int (*process_func)(struct btrfs_root *log, struct extent_buffer *eb,$/;"	m	struct:walk_control	file:
process_new_xattr	send.c	/^static int process_new_xattr(struct send_ctx *sctx)$/;"	f	file:
process_one_buffer	tree-log.c	/^static int process_one_buffer(struct btrfs_root *log,$/;"	f	file:
process_page_range	tests/extent-io-tests.c	/^static noinline int process_page_range(struct inode *inode, u64 start, u64 end,$/;"	f	file:
process_recorded_refs	send.c	/^static int process_recorded_refs(struct send_ctx *sctx, int *pending_move)$/;"	f	file:
process_recorded_refs_if_needed	send.c	/^static int process_recorded_refs_if_needed(struct send_ctx *sctx, int at_end,$/;"	f	file:
processed	relocation.c	/^	unsigned int processed:1;$/;"	m	struct:backref_node	file:
processed_blocks	relocation.c	/^	struct extent_io_tree processed_blocks;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::extent_io_tree	file:
processing	delayed-ref.h	/^	unsigned int processing:1;$/;"	m	struct:btrfs_delayed_ref_head
profiles_lock	ctree.h	/^	seqlock_t profiles_lock;$/;"	m	struct:btrfs_fs_info
progress	ctree.h	/^	u64 progress;$/;"	m	struct:btrfs_caching_control
prop_compress	btrfs_inode.h	/^	unsigned prop_compress;		\/* per-file compression algorithm *\/$/;"	m	struct:btrfs_inode
prop_compression_apply	props.c	/^static int prop_compression_apply(struct inode *inode,$/;"	f	file:
prop_compression_extract	props.c	/^static const char *prop_compression_extract(struct inode *inode)$/;"	f	file:
prop_compression_validate	props.c	/^static int prop_compression_validate(const char *value, size_t len)$/;"	f	file:
prop_handler	props.c	/^struct prop_handler {$/;"	s	file:
prop_handlers	props.c	/^static struct prop_handler prop_handlers[] = {$/;"	v	typeref:struct:prop_handler	file:
ptrs	ctree.h	/^	struct btrfs_key_ptr ptrs[];$/;"	m	struct:btrfs_node	typeref:struct:btrfs_node::btrfs_key_ptr
push_for_double_split	ctree.c	/^static noinline int push_for_double_split(struct btrfs_trans_handle *trans,$/;"	f	file:
push_leaf_left	ctree.c	/^static int push_leaf_left(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f	file:
push_leaf_right	ctree.c	/^static int push_leaf_right(struct btrfs_trans_handle *trans, struct btrfs_root$/;"	f	file:
push_node_left	ctree.c	/^static int push_node_left(struct btrfs_trans_handle *trans,$/;"	f	file:
push_nodes_for_insert	ctree.c	/^static noinline int push_nodes_for_insert(struct btrfs_trans_handle *trans,$/;"	f	file:
put_caching_control	extent-tree.c	/^static void put_caching_control(struct btrfs_caching_control *ctl)$/;"	f	file:
put_unaligned_le8	struct-funcs.c	/^static inline void put_unaligned_le8(u8 val, void *p)$/;"	f	file:
qgroup_account_snapshot	transaction.c	/^static int qgroup_account_snapshot(struct btrfs_trans_handle *trans,$/;"	f	file:
qgroup_check_limits	qgroup.c	/^static bool qgroup_check_limits(const struct btrfs_qgroup *qg, u64 num_bytes)$/;"	f	file:
qgroup_dirty	qgroup.c	/^static void qgroup_dirty(struct btrfs_fs_info *fs_info,$/;"	f	file:
qgroup_flags	ctree.h	/^	u64 qgroup_flags;$/;"	m	struct:btrfs_fs_info
qgroup_free_reserved_data	qgroup.c	/^static int qgroup_free_reserved_data(struct inode *inode,$/;"	f	file:
qgroup_ioctl_lock	ctree.h	/^	struct mutex qgroup_ioctl_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
qgroup_lock	ctree.h	/^	spinlock_t qgroup_lock;$/;"	m	struct:btrfs_fs_info
qgroup_meta_rsv	ctree.h	/^	atomic64_t qgroup_meta_rsv;$/;"	m	struct:btrfs_root
qgroup_op_lock	ctree.h	/^	spinlock_t qgroup_op_lock;$/;"	m	struct:btrfs_fs_info
qgroup_op_seq	ctree.h	/^	atomic_t qgroup_op_seq;$/;"	m	struct:btrfs_fs_info
qgroup_op_tree	ctree.h	/^	struct rb_root qgroup_op_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rb_root
qgroup_ref_root	delayed-ref.h	/^	u64 qgroup_ref_root;$/;"	m	struct:btrfs_delayed_ref_head
qgroup_rescan_completion	ctree.h	/^	struct completion qgroup_rescan_completion;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::completion
qgroup_rescan_helper	async-thread.c	/^BTRFS_WORK_HELPER(qgroup_rescan_helper);$/;"	v
qgroup_rescan_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(qgroup_rescan_helper);$/;"	v
qgroup_rescan_init	qgroup.c	/^qgroup_rescan_init(struct btrfs_fs_info *fs_info, u64 progress_objectid,$/;"	f	file:
qgroup_rescan_leaf	qgroup.c	/^qgroup_rescan_leaf(struct btrfs_fs_info *fs_info, struct btrfs_path *path,$/;"	f	file:
qgroup_rescan_lock	ctree.h	/^	struct mutex qgroup_rescan_lock; \/* protects the progress item *\/$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
qgroup_rescan_progress	ctree.h	/^	struct btrfs_key qgroup_rescan_progress;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_key
qgroup_rescan_running	ctree.h	/^	bool qgroup_rescan_running;	\/* protected by qgroup_rescan_lock *\/$/;"	m	struct:btrfs_fs_info
qgroup_rescan_work	ctree.h	/^	struct btrfs_work qgroup_rescan_work;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_work
qgroup_rescan_workers	ctree.h	/^	struct btrfs_workqueue *qgroup_rescan_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
qgroup_rescan_zero_tracking	qgroup.c	/^qgroup_rescan_zero_tracking(struct btrfs_fs_info *fs_info)$/;"	f	file:
qgroup_reserve	qgroup.c	/^static int qgroup_reserve(struct btrfs_root *root, u64 num_bytes, bool enforce)$/;"	f	file:
qgroup_reserved	delayed-ref.h	/^	u64 qgroup_reserved;$/;"	m	struct:btrfs_delayed_ref_head
qgroup_reserved	transaction.h	/^	u64 qgroup_reserved;$/;"	m	struct:btrfs_pending_snapshot
qgroup_seq	ctree.h	/^	u64 qgroup_seq;$/;"	m	struct:btrfs_fs_info
qgroup_to_aux	qgroup.c	/^static inline u64 qgroup_to_aux(struct btrfs_qgroup *qg)$/;"	f	file:
qgroup_to_skip	delayed-ref.h	/^	u64 qgroup_to_skip;$/;"	m	struct:btrfs_delayed_ref_root
qgroup_tree	ctree.h	/^	struct rb_root qgroup_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rb_root
qgroup_ulist	ctree.h	/^	struct ulist *qgroup_ulist;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::ulist
qgroup_update_counters	qgroup.c	/^static int qgroup_update_counters(struct btrfs_fs_info *fs_info,$/;"	f	file:
qgroup_update_refcnt	qgroup.c	/^static int qgroup_update_refcnt(struct btrfs_fs_info *fs_info,$/;"	f	file:
qgroupid	qgroup.h	/^	u64 qgroupid;$/;"	m	struct:btrfs_qgroup
quick_update_accounting	qgroup.c	/^static int quick_update_accounting(struct btrfs_fs_info *fs_info,$/;"	f	file:
quota_override_show	sysfs.c	/^static ssize_t quota_override_show(struct kobject *kobj,$/;"	f	file:
quota_override_store	sysfs.c	/^static ssize_t quota_override_store(struct kobject *kobj,$/;"	f	file:
quota_root	ctree.h	/^	struct btrfs_root *quota_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
ra	send.c	/^	struct file_ra_state ra;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::file_ra_state	file:
radix_list	send.c	/^	struct list_head radix_list;$/;"	m	struct:name_cache_entry	typeref:struct:name_cache_entry::list_head	file:
raid56_add_scrub_pages	raid56.c	/^void raid56_add_scrub_pages(struct btrfs_raid_bio *rbio, struct page *page,$/;"	f
raid56_alloc_missing_rbio	raid56.c	/^raid56_alloc_missing_rbio(struct btrfs_fs_info *fs_info, struct bio *bio,$/;"	f
raid56_parity_alloc_scrub_rbio	raid56.c	/^raid56_parity_alloc_scrub_rbio(struct btrfs_fs_info *fs_info, struct bio *bio,$/;"	f
raid56_parity_recover	raid56.c	/^int raid56_parity_recover(struct btrfs_fs_info *fs_info, struct bio *bio,$/;"	f
raid56_parity_scrub_end_io	raid56.c	/^static void raid56_parity_scrub_end_io(struct bio *bio)$/;"	f	file:
raid56_parity_scrub_stripe	raid56.c	/^static void raid56_parity_scrub_stripe(struct btrfs_raid_bio *rbio)$/;"	f	file:
raid56_parity_submit_scrub_rbio	raid56.c	/^void raid56_parity_submit_scrub_rbio(struct btrfs_raid_bio *rbio)$/;"	f
raid56_parity_write	raid56.c	/^int raid56_parity_write(struct btrfs_fs_info *fs_info, struct bio *bio,$/;"	f
raid56_rmw_stripe	raid56.c	/^static int raid56_rmw_stripe(struct btrfs_raid_bio *rbio)$/;"	f	file:
raid56_submit_missing_rbio	raid56.c	/^void raid56_submit_missing_rbio(struct btrfs_raid_bio *rbio)$/;"	f
raid_attributes	sysfs.c	/^static struct attribute *raid_attributes[] = {$/;"	v	typeref:struct:attribute	file:
raid_bytes_show	sysfs.c	/^static ssize_t raid_bytes_show(struct kobject *kobj,$/;"	f	file:
raid_kobject	ctree.h	/^struct raid_kobject {$/;"	s
raid_map	volumes.h	/^	u64 *raid_map;$/;"	m	struct:btrfs_bio
raid_recover_end_io	raid56.c	/^static void raid_recover_end_io(struct bio *bio)$/;"	f	file:
raid_rmw_end_io	raid56.c	/^static void raid_rmw_end_io(struct bio *bio)$/;"	f	file:
raid_type	ctree.h	/^	int raid_type;$/;"	m	struct:raid_kobject
raid_write_end_io	raid56.c	/^static void raid_write_end_io(struct bio *bio)$/;"	f	file:
ram_bytes	extent_map.h	/^	u64 ram_bytes;$/;"	m	struct:extent_map
ram_size	inode.c	/^	u64 ram_size;$/;"	m	struct:async_extent	file:
range_changed	extent_io.h	/^	struct ulist range_changed;$/;"	m	struct:extent_changeset	typeref:struct:extent_changeset::ulist
range_end	extent_map.c	/^static u64 range_end(u64 start, u64 len)$/;"	f	file:
range_is_hole_in_parent	send.c	/^static int range_is_hole_in_parent(struct send_ctx *sctx,$/;"	f	file:
range_overlaps	ordered-data.c	/^static int range_overlaps(struct btrfs_ordered_extent *entry, u64 file_offset,$/;"	f	file:
rb_node	btrfs_inode.h	/^	struct rb_node rb_node;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::rb_node
rb_node	delayed-inode.h	/^	struct rb_node rb_node;$/;"	m	struct:btrfs_delayed_item	typeref:struct:btrfs_delayed_item::rb_node
rb_node	extent_io.c	/^	struct rb_node rb_node;$/;"	m	struct:tree_entry	typeref:struct:tree_entry::rb_node	file:
rb_node	extent_io.h	/^	struct rb_node rb_node;$/;"	m	struct:extent_state	typeref:struct:extent_state::rb_node
rb_node	extent_map.h	/^	struct rb_node rb_node;$/;"	m	struct:extent_map	typeref:struct:extent_map::rb_node
rb_node	file.c	/^	struct rb_node rb_node;$/;"	m	struct:inode_defrag	typeref:struct:inode_defrag::rb_node	file:
rb_node	ordered-data.h	/^	struct rb_node rb_node;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::rb_node
rb_node	relocation.c	/^	struct rb_node rb_node;$/;"	m	struct:backref_node	typeref:struct:backref_node::rb_node	file:
rb_node	relocation.c	/^	struct rb_node rb_node;$/;"	m	struct:mapping_node	typeref:struct:mapping_node::rb_node	file:
rb_node	relocation.c	/^	struct rb_node rb_node;$/;"	m	struct:tree_block	typeref:struct:tree_block::rb_node	file:
rb_node	relocation.c	/^	struct rb_node rb_node;$/;"	m	struct:tree_entry	typeref:struct:tree_entry::rb_node	file:
rb_node	ulist.h	/^	struct rb_node rb_node;	\/* used to speed up search *\/$/;"	m	struct:ulist_node	typeref:struct:ulist_node::rb_node
rb_root	relocation.c	/^	struct rb_root rb_root;$/;"	m	struct:backref_cache	typeref:struct:backref_cache::rb_root	file:
rb_root	relocation.c	/^	struct rb_root rb_root;$/;"	m	struct:mapping_tree	typeref:struct:mapping_tree::rb_root	file:
rbio_add_io_page	raid56.c	/^static int rbio_add_io_page(struct btrfs_raid_bio *rbio,$/;"	f	file:
rbio_bucket	raid56.c	/^static int rbio_bucket(struct btrfs_raid_bio *rbio)$/;"	f	file:
rbio_can_merge	raid56.c	/^static int rbio_can_merge(struct btrfs_raid_bio *last,$/;"	f	file:
rbio_is_full	raid56.c	/^static int rbio_is_full(struct btrfs_raid_bio *rbio)$/;"	f	file:
rbio_list	raid56.c	/^	struct list_head rbio_list;$/;"	m	struct:btrfs_plug_cb	typeref:struct:btrfs_plug_cb::list_head	file:
rbio_nr_pages	raid56.c	/^static unsigned long rbio_nr_pages(unsigned long stripe_len, int nr_stripes)$/;"	f	file:
rbio_orig_end_io	raid56.c	/^static void rbio_orig_end_io(struct btrfs_raid_bio *rbio, blk_status_t err)$/;"	f	file:
rbio_pstripe_page	raid56.c	/^static struct page *rbio_pstripe_page(struct btrfs_raid_bio *rbio, int index)$/;"	f	file:
rbio_qstripe_page	raid56.c	/^static struct page *rbio_qstripe_page(struct btrfs_raid_bio *rbio, int index)$/;"	f	file:
rbio_stripe_page	raid56.c	/^static struct page *rbio_stripe_page(struct btrfs_raid_bio *rbio, int stripe,$/;"	f	file:
rbio_stripe_page_index	raid56.c	/^static int rbio_stripe_page_index(struct btrfs_raid_bio *rbio, int stripe,$/;"	f	file:
rbnode	backref.h	/^	struct rb_node rbnode;$/;"	m	struct:prelim_ref	typeref:struct:prelim_ref::rb_node
rc	reada.c	/^	struct reada_control	*rc;$/;"	m	struct:reada_extctl	typeref:struct:reada_extctl::reada_control	file:
rcu	rcu-string.h	/^	struct rcu_head rcu;$/;"	m	struct:rcu_string	typeref:struct:rcu_string::rcu_head
rcu	volumes.h	/^	struct rcu_head rcu;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::rcu_head
rcu_head	extent_io.h	/^	struct rcu_head rcu_head;$/;"	m	struct:extent_buffer	typeref:struct:extent_buffer::rcu_head
rcu_str_deref	rcu-string.h	53;"	d
rcu_string	rcu-string.h	/^struct rcu_string {$/;"	s
rcu_string_free	rcu-string.h	/^static inline void rcu_string_free(struct rcu_string *str)$/;"	f
rcu_string_strdup	rcu-string.h	/^static inline struct rcu_string *rcu_string_strdup(const char *src, gfp_t mask)$/;"	f
rcu_work	volumes.h	/^	struct work_struct rcu_work;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::work_struct
read_block_for_search	ctree.c	/^read_block_for_search(struct btrfs_root *root, struct btrfs_path *p,$/;"	f	file:
read_buf	send.c	/^	char *read_buf;$/;"	m	struct:send_ctx	file:
read_compress_length	lzo.c	/^static inline size_t read_compress_length(const char *buf)$/;"	f	file:
read_eb_member	ctree.h	1461;"	d
read_extent_buffer	extent_io.c	/^void read_extent_buffer(const struct extent_buffer *eb, void *dstv,$/;"	f
read_extent_buffer_pages	extent_io.c	/^int read_extent_buffer_pages(struct extent_io_tree *tree,$/;"	f
read_extent_buffer_to_user	extent_io.c	/^int read_extent_buffer_to_user(const struct extent_buffer *eb,$/;"	f
read_fs_root	relocation.c	/^static struct btrfs_root *read_fs_root(struct btrfs_fs_info *fs_info,$/;"	f	file:
read_lock_wq	ctree.h	/^	wait_queue_head_t read_lock_wq;$/;"	m	struct:btrfs_dev_replace
read_lock_wq	extent_io.h	/^	wait_queue_head_t read_lock_wq;$/;"	m	struct:extent_buffer
read_locks	ctree.h	/^	atomic_t read_locks;$/;"	m	struct:btrfs_dev_replace
read_locks	extent_io.h	/^	atomic_t read_locks;$/;"	m	struct:extent_buffer
read_mirror	extent_io.h	/^	int read_mirror;$/;"	m	struct:extent_buffer
read_node_slot	ctree.c	/^read_node_slot(struct btrfs_fs_info *fs_info, struct extent_buffer *parent,$/;"	f	file:
read_one_chunk	volumes.c	/^static int read_one_chunk(struct btrfs_fs_info *fs_info, struct btrfs_key *key,$/;"	f	file:
read_one_dev	volumes.c	/^static int read_one_dev(struct btrfs_fs_info *fs_info,$/;"	f	file:
read_one_inode	tree-log.c	/^static noinline struct inode *read_one_inode(struct btrfs_root *root,$/;"	f	file:
read_rebuild_work	raid56.c	/^static void read_rebuild_work(struct btrfs_work *work)$/;"	f	file:
read_symlink	send.c	/^static int read_symlink(struct btrfs_root *root,$/;"	f	file:
read_tree_block	disk-io.c	/^struct extent_buffer *read_tree_block(struct btrfs_fs_info *fs_info, u64 bytenr,$/;"	f
reada	ctree.h	/^	u8 reada;$/;"	m	struct:btrfs_path
reada_add_block	reada.c	/^static int reada_add_block(struct reada_control *rc, u64 logical,$/;"	f	file:
reada_control	ctree.h	/^struct reada_control {$/;"	s
reada_control_release	reada.c	/^static void reada_control_release(struct kref *kref)$/;"	f	file:
reada_count	extent-tree.c	/^	int reada_count;$/;"	m	struct:walk_control	file:
reada_curr_zone	volumes.h	/^	struct reada_zone *reada_curr_zone;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::reada_zone
reada_extctl	reada.c	/^struct reada_extctl {$/;"	s	file:
reada_extent	reada.c	/^struct reada_extent {$/;"	s	file:
reada_extent_put	reada.c	/^static void reada_extent_put(struct btrfs_fs_info *fs_info,$/;"	f	file:
reada_extents	volumes.h	/^	struct radix_tree_root reada_extents;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::radix_tree_root
reada_find_extent	reada.c	/^static struct reada_extent *reada_find_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
reada_find_zone	reada.c	/^static struct reada_zone *reada_find_zone(struct btrfs_device *dev, u64 logical,$/;"	f	file:
reada_for_balance	ctree.c	/^static noinline void reada_for_balance(struct btrfs_fs_info *fs_info,$/;"	f	file:
reada_for_search	ctree.c	/^static void reada_for_search(struct btrfs_fs_info *fs_info,$/;"	f	file:
reada_in_flight	volumes.h	/^	atomic_t reada_in_flight;$/;"	m	struct:btrfs_device
reada_lock	ctree.h	/^	spinlock_t reada_lock;$/;"	m	struct:btrfs_fs_info
reada_lock	volumes.h	/^	spinlock_t reada_lock;$/;"	m	struct:btrfs_device
reada_machine_work	reada.c	/^struct reada_machine_work {$/;"	s	file:
reada_next	volumes.h	/^	u64 reada_next;$/;"	m	struct:btrfs_device
reada_peer_zones_set_lock	reada.c	/^static void reada_peer_zones_set_lock(struct reada_zone *zone, int lock)$/;"	f	file:
reada_pick_zone	reada.c	/^static int reada_pick_zone(struct btrfs_device *dev)$/;"	f	file:
reada_slot	extent-tree.c	/^	int reada_slot;$/;"	m	struct:walk_control	file:
reada_start_machine	reada.c	/^static void reada_start_machine(struct btrfs_fs_info *fs_info)$/;"	f	file:
reada_start_machine_dev	reada.c	/^static int reada_start_machine_dev(struct btrfs_device *dev)$/;"	f	file:
reada_start_machine_worker	reada.c	/^static void reada_start_machine_worker(struct btrfs_work *work)$/;"	f	file:
reada_tree	ctree.h	/^	struct radix_tree_root reada_tree;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::radix_tree_root
reada_tree_block_flagged	disk-io.c	/^int reada_tree_block_flagged(struct btrfs_fs_info *fs_info, u64 bytenr,$/;"	f
reada_walk_down	extent-tree.c	/^static noinline void reada_walk_down(struct btrfs_trans_handle *trans,$/;"	f	file:
reada_works_cnt	ctree.h	/^	atomic_t reada_works_cnt;$/;"	m	struct:btrfs_fs_info
reada_zone	reada.c	/^struct reada_zone {$/;"	s	file:
reada_zone_release	reada.c	/^static void reada_zone_release(struct kref *kref)$/;"	f	file:
reada_zones	volumes.h	/^	struct radix_tree_root reada_zones;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::radix_tree_root
readahead_cache	free-space-cache.c	/^static void readahead_cache(struct inode *inode)$/;"	f	file:
readahead_helper	async-thread.c	/^BTRFS_WORK_HELPER(readahead_helper);$/;"	v
readahead_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(readahead_helper);$/;"	v
readahead_tree_block	disk-io.c	/^void readahead_tree_block(struct btrfs_fs_info *fs_info, u64 bytenr)$/;"	f
readahead_workers	ctree.h	/^	struct btrfs_workqueue *readahead_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
readdir_list	delayed-inode.h	/^	struct list_head readdir_list;	\/* used for readdir items *\/$/;"	m	struct:btrfs_delayed_item	typeref:struct:btrfs_delayed_item::list_head
readonly	scrub.c	/^	int			readonly;$/;"	m	struct:scrub_ctx	file:
readonly	transaction.h	/^	bool readonly;$/;"	m	struct:btrfs_pending_snapshot
readpage_end_io_hook	extent_io.h	/^	int (*readpage_end_io_hook)(struct btrfs_io_bio *io_bio, u64 phy_offset,$/;"	m	struct:extent_io_ops
readpage_io_failed_hook	extent_io.h	/^	int (*readpage_io_failed_hook)(struct page *page, int failed_mirror);$/;"	m	struct:extent_io_ops
real_stripes	raid56.c	/^	int real_stripes;$/;"	m	struct:btrfs_raid_bio	file:
recalc_thresholds	free-space-cache.h	/^	void (*recalc_thresholds)(struct btrfs_free_space_ctl *ctl);$/;"	m	struct:btrfs_free_space_op
recalculate_thresholds	free-space-cache.c	/^static void recalculate_thresholds(struct btrfs_free_space_ctl *ctl)$/;"	f	file:
recalculate_thresholds	inode-map.c	/^static void recalculate_thresholds(struct btrfs_free_space_ctl *ctl)$/;"	f	file:
record_changed_ref	send.c	/^static int record_changed_ref(struct send_ctx *sctx)$/;"	f	file:
record_deleted_ref	send.c	/^static int record_deleted_ref(struct send_ctx *sctx)$/;"	f	file:
record_extent_backrefs	inode.c	/^static noinline bool record_extent_backrefs(struct btrfs_path *path,$/;"	f	file:
record_inode_for_nocow	scrub.c	/^static int record_inode_for_nocow(u64 inum, u64 offset, u64 root, void *ctx)$/;"	f	file:
record_new_ref	send.c	/^static int record_new_ref(struct send_ctx *sctx)$/;"	f	file:
record_old_file_extents	inode.c	/^record_old_file_extents(struct inode *inode,$/;"	f	file:
record_one_backref	inode.c	/^static noinline int record_one_backref(u64 inum, u64 offset, u64 root_id,$/;"	f	file:
record_ref	send.c	/^static int record_ref(struct btrfs_root *root, int num, u64 dir, int index,$/;"	f	file:
record_reloc_root_in_trans	relocation.c	/^static int record_reloc_root_in_trans(struct btrfs_trans_handle *trans,$/;"	f	file:
record_root_in_trans	transaction.c	/^static int record_root_in_trans(struct btrfs_trans_handle *trans,$/;"	f	file:
recorded_ref	send.c	/^struct recorded_ref {$/;"	s	file:
recover	scrub.c	/^	struct scrub_recover	*recover;$/;"	m	struct:scrub_page	typeref:struct:scrub_page::scrub_recover	file:
ref_add_list	delayed-ref.h	/^	struct list_head ref_add_list;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:btrfs_delayed_ref_head::list_head
ref_cnt	check-integrity.c	/^	u32 ref_cnt;$/;"	m	struct:btrfsic_block_link	file:
ref_from_list	check-integrity.c	/^	struct list_head ref_from_list;	\/* list *\/$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block::list_head	file:
ref_get_fields	tree-log.c	/^static int ref_get_fields(struct extent_buffer *eb, int slot,$/;"	f	file:
ref_list	delayed-ref.h	/^	struct list_head ref_list;$/;"	m	struct:btrfs_delayed_ref_head	typeref:struct:btrfs_delayed_ref_head::list_head
ref_mod	delayed-ref.h	/^	int ref_mod;$/;"	m	struct:btrfs_delayed_ref_node
ref_to_list	check-integrity.c	/^	struct list_head ref_to_list;	\/* list *\/$/;"	m	struct:btrfsic_block	typeref:struct:btrfsic_block::list_head	file:
refcnt	ctree.h	/^	struct kref		refcnt;$/;"	m	struct:reada_control	typeref:struct:reada_control::kref
refcnt	reada.c	/^	int 			refcnt;$/;"	m	struct:reada_extent	file:
refcnt	reada.c	/^	struct kref		refcnt;$/;"	m	struct:reada_zone	typeref:struct:reada_zone::kref	file:
refill_lock	ctree.h	/^	spinlock_t refill_lock;$/;"	m	struct:btrfs_free_cluster
refs	ctree.h	/^	refcount_t refs;$/;"	m	struct:btrfs_root
refs	delayed-inode.h	/^	refcount_t refs;$/;"	m	struct:btrfs_delayed_item
refs	delayed-inode.h	/^	refcount_t refs;$/;"	m	struct:btrfs_delayed_node
refs	delayed-ref.h	/^	refcount_t refs;$/;"	m	struct:btrfs_delayed_ref_node
refs	extent-tree.c	/^	u64 refs[BTRFS_MAX_LEVEL];$/;"	m	struct:walk_control	file:
refs	extent_io.h	/^	atomic_t refs;$/;"	m	struct:extent_buffer
refs	extent_io.h	/^	refcount_t refs;$/;"	m	struct:extent_state
refs	extent_map.h	/^	refcount_t refs;$/;"	m	struct:extent_map
refs	ordered-data.h	/^	refcount_t refs;$/;"	m	struct:btrfs_ordered_extent
refs	raid56.c	/^	refcount_t refs;$/;"	m	struct:btrfs_raid_bio	file:
refs	scrub.c	/^	atomic_t		refs;$/;"	m	struct:scrub_page	file:
refs	scrub.c	/^	refcount_t		refs; \/* free mem on transition to zero *\/$/;"	m	struct:scrub_block	file:
refs	scrub.c	/^	refcount_t		refs;$/;"	m	struct:scrub_parity	file:
refs	scrub.c	/^	refcount_t		refs;$/;"	m	struct:scrub_recover	file:
refs	scrub.c	/^	refcount_t              refs;$/;"	m	struct:scrub_ctx	file:
refs	scrub.c	/^	u64 refs;$/;"	m	struct:full_stripe_lock	file:
refs	volumes.h	/^	refcount_t refs;$/;"	m	struct:btrfs_bio
refs_lock	extent_io.h	/^	spinlock_t refs_lock;$/;"	m	struct:extent_buffer
release_extent_buffer	extent_io.c	/^static int release_extent_buffer(struct extent_buffer *eb)$/;"	f	file:
release_global_block_rsv	extent-tree.c	/^static void release_global_block_rsv(struct btrfs_fs_info *fs_info)$/;"	f	file:
release_raid_kobj	sysfs.c	/^static void release_raid_kobj(struct kobject *kobj)$/;"	f	file:
relink_extent_backref	inode.c	/^static noinline int relink_extent_backref(struct btrfs_path *path,$/;"	f	file:
relink_file_extents	inode.c	/^static void relink_file_extents(struct new_sa_defrag_extent *new)$/;"	f	file:
relink_is_mergable	inode.c	/^static int relink_is_mergable(struct extent_buffer *leaf,$/;"	f	file:
reloc_control	relocation.c	/^struct reloc_control {$/;"	s	file:
reloc_ctl	ctree.h	/^	struct reloc_control *reloc_ctl;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::reloc_control
reloc_mutex	ctree.h	/^	struct mutex reloc_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
reloc_reserved	transaction.h	/^	bool reloc_reserved;$/;"	m	struct:btrfs_trans_handle
reloc_root	ctree.h	/^	struct btrfs_root *reloc_root;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_root
reloc_root_tree	relocation.c	/^	struct mapping_tree reloc_root_tree;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::mapping_tree	file:
reloc_roots	relocation.c	/^	struct list_head reloc_roots;$/;"	m	struct:reloc_control	typeref:struct:reloc_control::list_head	file:
relocate_block_group	relocation.c	/^static noinline_for_stack int relocate_block_group(struct reloc_control *rc)$/;"	f	file:
relocate_data_extent	relocation.c	/^int relocate_data_extent(struct inode *inode, struct btrfs_key *extent_key,$/;"	f	file:
relocate_file_extent_cluster	relocation.c	/^static int relocate_file_extent_cluster(struct inode *inode,$/;"	f	file:
relocate_tree_block	relocation.c	/^static int relocate_tree_block(struct btrfs_trans_handle *trans,$/;"	f	file:
relocate_tree_blocks	relocation.c	/^int relocate_tree_blocks(struct btrfs_trans_handle *trans,$/;"	f	file:
remove_backref_node	relocation.c	/^static void remove_backref_node(struct backref_cache *cache,$/;"	f	file:
remove_block_group_free_space	free-space-tree.c	/^int remove_block_group_free_space(struct btrfs_trans_handle *trans,$/;"	f
remove_extent_backref	extent-tree.c	/^static int remove_extent_backref(struct btrfs_trans_handle *trans,$/;"	f	file:
remove_extent_data_ref	extent-tree.c	/^static noinline int remove_extent_data_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
remove_extent_item	tests/qgroup-tests.c	/^static int remove_extent_item(struct btrfs_root *root, u64 bytenr,$/;"	f	file:
remove_extent_mapping	extent_map.c	/^int remove_extent_mapping(struct extent_map_tree *tree, struct extent_map *em)$/;"	f
remove_extent_ref	tests/qgroup-tests.c	/^static int remove_extent_ref(struct btrfs_root *root, u64 bytenr,$/;"	f	file:
remove_free_space_extent	free-space-tree.c	/^static int remove_free_space_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
remove_from_bitmap	free-space-cache.c	/^static noinline int remove_from_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
remove_from_free_space_tree	free-space-tree.c	/^int remove_from_free_space_tree(struct btrfs_trans_handle *trans,$/;"	f
remove_rbio_from_cache	raid56.c	/^static void remove_rbio_from_cache(struct btrfs_raid_bio *rbio)$/;"	f	file:
removed	ctree.h	/^	unsigned int removed:1;$/;"	m	struct:btrfs_block_group_cache
repair_eb_io_failure	extent_io.c	/^int repair_eb_io_failure(struct btrfs_fs_info *fs_info,$/;"	f
repair_io_failure	extent_io.c	/^int repair_io_failure(struct btrfs_fs_info *fs_info, u64 ino, u64 start,$/;"	f
replace_extent_mapping	extent_map.c	/^void replace_extent_mapping(struct extent_map_tree *tree,$/;"	f
replace_file_extents	relocation.c	/^int replace_file_extents(struct btrfs_trans_handle *trans,$/;"	f	file:
replace_path	relocation.c	/^int replace_path(struct btrfs_trans_handle *trans,$/;"	f	file:
replace_state	ctree.h	/^	u64 replace_state;	\/* see #define above *\/$/;"	m	struct:btrfs_dev_replace
replace_wait	ctree.h	/^	wait_queue_head_t replace_wait;$/;"	m	struct:btrfs_fs_info
replay_dest	tree-log.c	/^	struct btrfs_root *replay_dest;$/;"	m	struct:walk_control	typeref:struct:walk_control::btrfs_root	file:
replay_dir_deletes	tree-log.c	/^static noinline int replay_dir_deletes(struct btrfs_trans_handle *trans,$/;"	f	file:
replay_one_buffer	tree-log.c	/^static int replay_one_buffer(struct btrfs_root *log, struct extent_buffer *eb,$/;"	f	file:
replay_one_dir_item	tree-log.c	/^static noinline int replay_one_dir_item(struct btrfs_trans_handle *trans,$/;"	f	file:
replay_one_extent	tree-log.c	/^static noinline int replay_one_extent(struct btrfs_trans_handle *trans,$/;"	f	file:
replay_one_name	tree-log.c	/^static noinline int replay_one_name(struct btrfs_trans_handle *trans,$/;"	f	file:
replay_xattr_deletes	tree-log.c	/^static int replay_xattr_deletes(struct btrfs_trans_handle *trans,$/;"	f	file:
report_reserved_underflow	qgroup.c	/^static void report_reserved_underflow(struct btrfs_fs_info *fs_info,$/;"	f	file:
requeue_list	volumes.c	/^static void requeue_list(struct btrfs_pending_bios *pending_bios,$/;"	f	file:
reservations	ctree.h	/^	atomic_t reservations;$/;"	m	struct:btrfs_block_group_cache
reserve	inode.c	/^	u64 reserve;$/;"	m	struct:btrfs_dio_data	file:
reserve_metadata_bytes	extent-tree.c	/^static int reserve_metadata_bytes(struct btrfs_root *root,$/;"	f	file:
reserve_metadata_space	relocation.c	/^static int reserve_metadata_space(struct btrfs_trans_handle *trans,$/;"	f	file:
reserve_ticket	extent-tree.c	/^struct reserve_ticket {$/;"	s	file:
reserved	ctree.h	/^	__le64 reserved[30];$/;"	m	struct:btrfs_super_block
reserved	ctree.h	/^	u64 reserved;$/;"	m	struct:btrfs_block_group_cache
reserved	ctree.h	/^	u64 reserved;$/;"	m	struct:btrfs_block_rsv
reserved	ioctl.c	/^	__u64	reserved[16];		\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	file:
reserved	qgroup.h	/^	u64 reserved;$/;"	m	struct:btrfs_qgroup
reserved_bytes	relocation.c	/^	u64 reserved_bytes;$/;"	m	struct:reloc_control	file:
reserved_extents	btrfs_inode.h	/^	unsigned reserved_extents;$/;"	m	struct:btrfs_inode
resized_devices	volumes.h	/^	struct list_head resized_devices;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::list_head
resized_list	volumes.h	/^	struct list_head resized_list;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::list_head
resolve_indirect_ref	backref.c	/^static int resolve_indirect_ref(struct btrfs_fs_info *fs_info,$/;"	f	file:
resolve_indirect_refs	backref.c	/^static int resolve_indirect_refs(struct btrfs_fs_info *fs_info,$/;"	f	file:
ret	send.c	/^	int ret;$/;"	m	struct:name_cache_entry	file:
reversed	send.c	/^			unsigned short reversed:1;$/;"	m	struct:fs_path::__anon1::__anon2	file:
rfer	qgroup.h	/^	u64 rfer;	\/* referenced *\/$/;"	m	struct:btrfs_qgroup
rfer_cmpr	qgroup.h	/^	u64 rfer_cmpr;	\/* referenced compressed *\/$/;"	m	struct:btrfs_qgroup
right_path	send.c	/^	struct btrfs_path *right_path;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::btrfs_path	file:
rmdir_ino	send.c	/^	u64 rmdir_ino;$/;"	m	struct:waiting_dir_move	file:
rmw_helper	async-thread.c	/^BTRFS_WORK_HELPER(rmw_helper);$/;"	v
rmw_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(rmw_helper);$/;"	v
rmw_work	raid56.c	/^static void rmw_work(struct btrfs_work *work)$/;"	f	file:
rmw_workers	ctree.h	/^	struct btrfs_workqueue *rmw_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
ro	ctree.h	/^	unsigned int ro;$/;"	m	struct:btrfs_block_group_cache
ro_bgs	ctree.h	/^	struct list_head ro_bgs;$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::list_head
ro_block_group_mutex	ctree.h	/^	struct mutex ro_block_group_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
ro_list	ctree.h	/^	struct list_head ro_list;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::list_head
root	backref.c	/^	struct rb_root root;$/;"	m	struct:preftree	typeref:struct:preftree::rb_root	file:
root	btrfs_inode.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::btrfs_root
root	ctree.h	/^	__le64 root;$/;"	m	struct:btrfs_super_block
root	ctree.h	/^	struct rb_root root;$/;"	m	struct:btrfs_free_cluster	typeref:struct:btrfs_free_cluster::rb_root
root	ctree.h	/^	struct rb_root root;$/;"	m	struct:btrfs_full_stripe_locks_tree	typeref:struct:btrfs_full_stripe_locks_tree::rb_root
root	delayed-inode.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_delayed_node	typeref:struct:btrfs_delayed_node::btrfs_root
root	delayed-ref.h	/^	u64 root;$/;"	m	struct:btrfs_delayed_data_ref
root	delayed-ref.h	/^	u64 root;$/;"	m	struct:btrfs_delayed_tree_ref
root	extent-tree.c	/^	struct btrfs_root *root;$/;"	m	struct:async_delayed_refs	typeref:struct:async_delayed_refs::btrfs_root	file:
root	file.c	/^	u64 root;$/;"	m	struct:inode_defrag	file:
root	inode.c	/^	struct btrfs_root *root;$/;"	m	struct:async_cow	typeref:struct:async_cow::btrfs_root	file:
root	inode.c	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_iget_args	typeref:struct:btrfs_iget_args::btrfs_root	file:
root	inode.c	/^	struct rb_root root;$/;"	m	struct:new_sa_defrag_extent	typeref:struct:new_sa_defrag_extent::rb_root	file:
root	relocation.c	/^	struct btrfs_root *root;$/;"	m	struct:backref_node	typeref:struct:backref_node::btrfs_root	file:
root	scrub.c	/^	struct btrfs_root	*root;$/;"	m	struct:scrub_fixup_nodatasum	typeref:struct:scrub_fixup_nodatasum::btrfs_root	file:
root	scrub.c	/^	u64			root;$/;"	m	struct:scrub_nocow_inode	file:
root	send.c	/^	struct btrfs_root *root;$/;"	m	struct:clone_root	typeref:struct:clone_root::btrfs_root	file:
root	send.c	/^	struct btrfs_root *root;$/;"	m	struct:find_ref_ctx	typeref:struct:find_ref_ctx::btrfs_root	file:
root	transaction.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::btrfs_root
root	transaction.h	/^	struct btrfs_root *root;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_trans_handle::btrfs_root
root	ulist.h	/^	struct rb_root root;$/;"	m	struct:ulist	typeref:struct:ulist::rb_root
root_add_used	ctree.c	/^static void root_add_used(struct btrfs_root *root, u32 size)$/;"	f	file:
root_dir_objectid	ctree.h	/^	__le64 root_dir_objectid;$/;"	m	struct:btrfs_super_block
root_extent_list	ordered-data.h	/^	struct list_head root_extent_list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::list_head
root_id	backref.h	/^	u64 root_id;$/;"	m	struct:prelim_ref
root_id	inode.c	/^	u64 root_id;$/;"	m	struct:sa_defrag_extent_backref	file:
root_item	ctree.h	/^	struct btrfs_root_item root_item;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_root_item
root_item	transaction.h	/^	struct btrfs_root_item *root_item;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::btrfs_root_item
root_item_lock	ctree.h	/^	spinlock_t root_item_lock;$/;"	m	struct:btrfs_root
root_key	ctree.h	/^	struct btrfs_key root_key;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_key
root_level	ctree.h	/^	u8 root_level;$/;"	m	struct:btrfs_super_block
root_list	ctree.h	/^	struct list_head root_list;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::list_head
root_objectid	backref.c	/^	u64 root_objectid;$/;"	m	struct:share_check	file:
root_objectid	export.h	/^	u64 root_objectid;$/;"	m	struct:btrfs_fid
root_sub_used	ctree.c	/^static void root_sub_used(struct btrfs_root *root, u32 size)$/;"	f	file:
rotating	volumes.h	/^	int rotating;$/;"	m	struct:btrfs_fs_devices
rsv_excl	qgroup.h	/^	u64 rsv_excl;$/;"	m	struct:btrfs_qgroup
rsv_rfer	qgroup.h	/^	u64 rsv_rfer;$/;"	m	struct:btrfs_qgroup
rtime	ioctl.c	/^	struct btrfs_ioctl_timespec_32 rtime; \/* out *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:struct:btrfs_ioctl_received_subvol_args_32::btrfs_ioctl_timespec_32	file:
rtransid	ioctl.c	/^	__u64	rtransid;		\/* out *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	file:
run_delalloc_nocow	inode.c	/^static noinline int run_delalloc_nocow(struct inode *inode,$/;"	f	file:
run_delalloc_range	inode.c	/^static int run_delalloc_range(void *private_data, struct page *locked_page,$/;"	f	file:
run_delayed_data_ref	extent-tree.c	/^static int run_delayed_data_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
run_delayed_extent_op	extent-tree.c	/^static int run_delayed_extent_op(struct btrfs_trans_handle *trans,$/;"	f	file:
run_delayed_start	delayed-ref.h	/^	u64 run_delayed_start;$/;"	m	struct:btrfs_delayed_ref_root
run_delayed_tree_ref	extent-tree.c	/^static int run_delayed_tree_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
run_one_async_done	disk-io.c	/^static void run_one_async_done(struct btrfs_work *work)$/;"	f	file:
run_one_async_free	disk-io.c	/^static void run_one_async_free(struct btrfs_work *work)$/;"	f	file:
run_one_async_start	disk-io.c	/^static void run_one_async_start(struct btrfs_work *work)$/;"	f	file:
run_one_delayed_ref	extent-tree.c	/^static int run_one_delayed_ref(struct btrfs_trans_handle *trans,$/;"	f	file:
run_ordered_work	async-thread.c	/^static void run_ordered_work(struct __btrfs_workqueue *wq)$/;"	f	file:
run_plug	raid56.c	/^static void run_plug(struct btrfs_plug_cb *plug)$/;"	f	file:
run_scheduled_bios	volumes.c	/^static noinline void run_scheduled_bios(struct btrfs_device *device)$/;"	f	file:
run_test	tests/free-space-tree-tests.c	/^static int run_test(test_func_t test_func, int bitmaps, u32 sectorsize,$/;"	f	file:
run_test_both_formats	tests/free-space-tree-tests.c	/^static int run_test_both_formats(test_func_t test_func, u32 sectorsize,$/;"	f	file:
run_xor	raid56.c	/^static void run_xor(void **pages, int src_cnt, ssize_t len)$/;"	f	file:
running_pending	volumes.h	/^	int running_pending;$/;"	m	struct:btrfs_device
running_transaction	ctree.h	/^	struct btrfs_transaction *running_transaction;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_transaction
runtime_flags	btrfs_inode.h	/^	unsigned long runtime_flags;$/;"	m	struct:btrfs_inode
rw_devices	volumes.h	/^	u64 rw_devices;$/;"	m	struct:btrfs_fs_devices
sa_defrag_extent_backref	inode.c	/^struct sa_defrag_extent_backref {$/;"	s	file:
sb	ctree.h	/^	struct super_block *sb;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::super_block
sblock	scrub.c	/^	struct scrub_block	*sblock;$/;"	m	struct:scrub_page	typeref:struct:scrub_page::scrub_block	file:
scheduled	reada.c	/^	int			scheduled;$/;"	m	struct:reada_extent	file:
scrub_add_page_to_rd_bio	scrub.c	/^static int scrub_add_page_to_rd_bio(struct scrub_ctx *sctx,$/;"	f	file:
scrub_add_page_to_wr_bio	scrub.c	/^static int scrub_add_page_to_wr_bio(struct scrub_ctx *sctx,$/;"	f	file:
scrub_bio	scrub.c	/^struct scrub_bio {$/;"	s	file:
scrub_bio_end_io	scrub.c	/^static void scrub_bio_end_io(struct bio *bio)$/;"	f	file:
scrub_bio_end_io_worker	scrub.c	/^static void scrub_bio_end_io_worker(struct btrfs_work *work)$/;"	f	file:
scrub_bio_ret	scrub.c	/^struct scrub_bio_ret {$/;"	s	file:
scrub_bio_wait_endio	scrub.c	/^static void scrub_bio_wait_endio(struct bio *bio)$/;"	f	file:
scrub_block	scrub.c	/^struct scrub_block {$/;"	s	file:
scrub_block_complete	scrub.c	/^static void scrub_block_complete(struct scrub_block *sblock)$/;"	f	file:
scrub_block_get	scrub.c	/^static void scrub_block_get(struct scrub_block *sblock)$/;"	f	file:
scrub_block_put	scrub.c	/^static void scrub_block_put(struct scrub_block *sblock)$/;"	f	file:
scrub_blocked_if_needed	scrub.c	/^static void scrub_blocked_if_needed(struct btrfs_fs_info *fs_info)$/;"	f	file:
scrub_calc_parity_bitmap_len	scrub.c	/^static inline int scrub_calc_parity_bitmap_len(int nsectors)$/;"	f	file:
scrub_cancel_req	ctree.h	/^	atomic_t scrub_cancel_req;$/;"	m	struct:btrfs_fs_info
scrub_check_fsid	scrub.c	/^static inline int scrub_check_fsid(u8 fsid[],$/;"	f	file:
scrub_checksum	scrub.c	/^static int scrub_checksum(struct scrub_block *sblock)$/;"	f	file:
scrub_checksum_data	scrub.c	/^static int scrub_checksum_data(struct scrub_block *sblock)$/;"	f	file:
scrub_checksum_super	scrub.c	/^static int scrub_checksum_super(struct scrub_block *sblock)$/;"	f	file:
scrub_checksum_tree_block	scrub.c	/^static int scrub_checksum_tree_block(struct scrub_block *sblock)$/;"	f	file:
scrub_chunk	scrub.c	/^static noinline_for_stack int scrub_chunk(struct scrub_ctx *sctx,$/;"	f	file:
scrub_copy_nocow_ctx	scrub.c	/^struct scrub_copy_nocow_ctx {$/;"	s	file:
scrub_ctx	scrub.c	/^struct scrub_ctx {$/;"	s	file:
scrub_dev	scrub.c	/^	struct btrfs_device	*scrub_dev;$/;"	m	struct:scrub_parity	typeref:struct:scrub_parity::btrfs_device	file:
scrub_device	volumes.h	/^	struct scrub_ctx *scrub_device;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::scrub_ctx
scrub_enumerate_chunks	scrub.c	/^int scrub_enumerate_chunks(struct scrub_ctx *sctx,$/;"	f	file:
scrub_extent	scrub.c	/^static int scrub_extent(struct scrub_ctx *sctx, u64 logical, u64 len,$/;"	f	file:
scrub_extent_for_parity	scrub.c	/^static int scrub_extent_for_parity(struct scrub_parity *sparity,$/;"	f	file:
scrub_find_csum	scrub.c	/^static int scrub_find_csum(struct scrub_ctx *sctx, u64 logical, u8 *csum)$/;"	f	file:
scrub_fixup_nodatasum	scrub.c	/^static void scrub_fixup_nodatasum(struct btrfs_work *work)$/;"	f	file:
scrub_fixup_nodatasum	scrub.c	/^struct scrub_fixup_nodatasum {$/;"	s	file:
scrub_fixup_readpage	scrub.c	/^static int scrub_fixup_readpage(u64 inum, u64 offset, u64 root, void *fixup_ctx)$/;"	f	file:
scrub_free_csums	scrub.c	/^static void scrub_free_csums(struct scrub_ctx *sctx)$/;"	f	file:
scrub_free_ctx	scrub.c	/^static noinline_for_stack void scrub_free_ctx(struct scrub_ctx *sctx)$/;"	f	file:
scrub_free_parity	scrub.c	/^static void scrub_free_parity(struct scrub_parity *sparity)$/;"	f	file:
scrub_get_recover	scrub.c	/^static inline void scrub_get_recover(struct scrub_recover *recover)$/;"	f	file:
scrub_handle_errored_block	scrub.c	/^static int scrub_handle_errored_block(struct scrub_block *sblock_to_check)$/;"	f	file:
scrub_helper	async-thread.c	/^BTRFS_WORK_HELPER(scrub_helper);$/;"	v
scrub_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(scrub_helper);$/;"	v
scrub_is_page_on_raid56	scrub.c	/^static inline int scrub_is_page_on_raid56(struct scrub_page *page)$/;"	f	file:
scrub_lock	ctree.h	/^	struct mutex scrub_lock;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
scrub_missing_raid56_end_io	scrub.c	/^static void scrub_missing_raid56_end_io(struct bio *bio)$/;"	f	file:
scrub_missing_raid56_pages	scrub.c	/^static void scrub_missing_raid56_pages(struct scrub_block *sblock)$/;"	f	file:
scrub_missing_raid56_worker	scrub.c	/^static void scrub_missing_raid56_worker(struct btrfs_work *work)$/;"	f	file:
scrub_nocow_inode	scrub.c	/^struct scrub_nocow_inode {$/;"	s	file:
scrub_nocow_workers	ctree.h	/^	struct btrfs_workqueue *scrub_nocow_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
scrub_nr_raid_mirrors	scrub.c	/^static inline int scrub_nr_raid_mirrors(struct btrfs_bio *bbio)$/;"	f	file:
scrub_page	scrub.c	/^struct scrub_page {$/;"	s	file:
scrub_page_get	scrub.c	/^static void scrub_page_get(struct scrub_page *spage)$/;"	f	file:
scrub_page_put	scrub.c	/^static void scrub_page_put(struct scrub_page *spage)$/;"	f	file:
scrub_pages	scrub.c	/^static int scrub_pages(struct scrub_ctx *sctx, u64 logical, u64 len,$/;"	f	file:
scrub_pages_for_parity	scrub.c	/^static int scrub_pages_for_parity(struct scrub_parity *sparity,$/;"	f	file:
scrub_parity	scrub.c	/^struct scrub_parity {$/;"	s	file:
scrub_parity_bio_endio	scrub.c	/^static void scrub_parity_bio_endio(struct bio *bio)$/;"	f	file:
scrub_parity_bio_endio_worker	scrub.c	/^static void scrub_parity_bio_endio_worker(struct btrfs_work *work)$/;"	f	file:
scrub_parity_check_and_repair	scrub.c	/^static void scrub_parity_check_and_repair(struct scrub_parity *sparity)$/;"	f	file:
scrub_parity_get	scrub.c	/^static void scrub_parity_get(struct scrub_parity *sparity)$/;"	f	file:
scrub_parity_mark_sectors_data	scrub.c	/^static inline void scrub_parity_mark_sectors_data(struct scrub_parity *sparity,$/;"	f	file:
scrub_parity_mark_sectors_error	scrub.c	/^static inline void scrub_parity_mark_sectors_error(struct scrub_parity *sparity,$/;"	f	file:
scrub_parity_put	scrub.c	/^static void scrub_parity_put(struct scrub_parity *sparity)$/;"	f	file:
scrub_parity_work	raid56.c	/^static void scrub_parity_work(struct btrfs_work *work)$/;"	f	file:
scrub_parity_workers	ctree.h	/^	struct btrfs_workqueue *scrub_parity_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
scrub_pause_off	scrub.c	/^static void scrub_pause_off(struct btrfs_fs_info *fs_info)$/;"	f	file:
scrub_pause_on	scrub.c	/^static void scrub_pause_on(struct btrfs_fs_info *fs_info)$/;"	f	file:
scrub_pause_req	ctree.h	/^	atomic_t scrub_pause_req;$/;"	m	struct:btrfs_fs_info
scrub_pause_wait	ctree.h	/^	wait_queue_head_t scrub_pause_wait;$/;"	m	struct:btrfs_fs_info
scrub_pending_bio_dec	scrub.c	/^static void scrub_pending_bio_dec(struct scrub_ctx *sctx)$/;"	f	file:
scrub_pending_bio_inc	scrub.c	/^static void scrub_pending_bio_inc(struct scrub_ctx *sctx)$/;"	f	file:
scrub_pending_trans_workers_dec	scrub.c	/^static void scrub_pending_trans_workers_dec(struct scrub_ctx *sctx)$/;"	f	file:
scrub_pending_trans_workers_inc	scrub.c	/^static void scrub_pending_trans_workers_inc(struct scrub_ctx *sctx)$/;"	f	file:
scrub_print_warning	scrub.c	/^static void scrub_print_warning(const char *errstr, struct scrub_block *sblock)$/;"	f	file:
scrub_print_warning_inode	scrub.c	/^static int scrub_print_warning_inode(u64 inum, u64 offset, u64 root,$/;"	f	file:
scrub_progress	ctree.h	/^	struct btrfs_scrub_progress scrub_progress;$/;"	m	struct:btrfs_dev_replace	typeref:struct:btrfs_dev_replace::btrfs_scrub_progress
scrub_put_ctx	scrub.c	/^static void scrub_put_ctx(struct scrub_ctx *sctx)$/;"	f	file:
scrub_put_recover	scrub.c	/^static inline void scrub_put_recover(struct btrfs_fs_info *fs_info,$/;"	f	file:
scrub_raid56_parity	scrub.c	/^static noinline_for_stack int scrub_raid56_parity(struct scrub_ctx *sctx,$/;"	f	file:
scrub_recheck_block	scrub.c	/^static void scrub_recheck_block(struct btrfs_fs_info *fs_info,$/;"	f	file:
scrub_recheck_block_checksum	scrub.c	/^static void scrub_recheck_block_checksum(struct scrub_block *sblock)$/;"	f	file:
scrub_recover	scrub.c	/^struct scrub_recover {$/;"	s	file:
scrub_remap_extent	scrub.c	/^static void scrub_remap_extent(struct btrfs_fs_info *fs_info,$/;"	f	file:
scrub_repair_block_from_good_copy	scrub.c	/^static int scrub_repair_block_from_good_copy(struct scrub_block *sblock_bad,$/;"	f	file:
scrub_repair_page_from_good_copy	scrub.c	/^static int scrub_repair_page_from_good_copy(struct scrub_block *sblock_bad,$/;"	f	file:
scrub_setup_ctx	scrub.c	/^struct scrub_ctx *scrub_setup_ctx(struct btrfs_device *dev, int is_dev_replace)$/;"	f	file:
scrub_setup_recheck_block	scrub.c	/^static int scrub_setup_recheck_block(struct scrub_block *original_sblock,$/;"	f	file:
scrub_stripe	scrub.c	/^static noinline_for_stack int scrub_stripe(struct scrub_ctx *sctx,$/;"	f	file:
scrub_stripe_index_and_offset	scrub.c	/^static inline void scrub_stripe_index_and_offset(u64 logical, u64 map_type,$/;"	f	file:
scrub_submit	scrub.c	/^static void scrub_submit(struct scrub_ctx *sctx)$/;"	f	file:
scrub_submit_raid56_bio_wait	scrub.c	/^static int scrub_submit_raid56_bio_wait(struct btrfs_fs_info *fs_info,$/;"	f	file:
scrub_supers	scrub.c	/^static noinline_for_stack int scrub_supers(struct scrub_ctx *sctx,$/;"	f	file:
scrub_warning	scrub.c	/^struct scrub_warning {$/;"	s	file:
scrub_workers	ctree.h	/^	struct btrfs_workqueue *scrub_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
scrub_workers_get	scrub.c	/^static noinline_for_stack int scrub_workers_get(struct btrfs_fs_info *fs_info,$/;"	f	file:
scrub_workers_put	scrub.c	/^static noinline_for_stack void scrub_workers_put(struct btrfs_fs_info *fs_info)$/;"	f	file:
scrub_workers_refcnt	ctree.h	/^	int scrub_workers_refcnt;$/;"	m	struct:btrfs_fs_info
scrub_wr_bio_end_io	scrub.c	/^static void scrub_wr_bio_end_io(struct bio *bio)$/;"	f	file:
scrub_wr_bio_end_io_worker	scrub.c	/^static void scrub_wr_bio_end_io_worker(struct btrfs_work *work)$/;"	f	file:
scrub_wr_completion_workers	ctree.h	/^	struct btrfs_workqueue *scrub_wr_completion_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
scrub_wr_submit	scrub.c	/^static void scrub_wr_submit(struct scrub_ctx *sctx)$/;"	f	file:
scrub_write_block_to_dev_replace	scrub.c	/^static void scrub_write_block_to_dev_replace(struct scrub_block *sblock)$/;"	f	file:
scrub_write_page_to_dev_replace	scrub.c	/^static int scrub_write_page_to_dev_replace(struct scrub_block *sblock,$/;"	f	file:
scrubnc_helper	async-thread.c	/^BTRFS_WORK_HELPER(scrubnc_helper);$/;"	v
scrubnc_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(scrubnc_helper);$/;"	v
scrubp	raid56.c	/^	int scrubp;$/;"	m	struct:btrfs_raid_bio	file:
scrubparity_helper	async-thread.c	/^BTRFS_WORK_HELPER(scrubparity_helper);$/;"	v
scrubparity_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(scrubparity_helper);$/;"	v
scrubs_paused	ctree.h	/^	atomic_t scrubs_paused;$/;"	m	struct:btrfs_fs_info
scrubs_running	ctree.h	/^	atomic_t scrubs_running;$/;"	m	struct:btrfs_fs_info
scrubwrc_helper	async-thread.c	/^BTRFS_WORK_HELPER(scrubwrc_helper);$/;"	v
scrubwrc_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(scrubwrc_helper);$/;"	v
sctx	scrub.c	/^	struct scrub_ctx	*sctx;$/;"	m	struct:scrub_bio	typeref:struct:scrub_bio::scrub_ctx	file:
sctx	scrub.c	/^	struct scrub_ctx	*sctx;$/;"	m	struct:scrub_block	typeref:struct:scrub_block::scrub_ctx	file:
sctx	scrub.c	/^	struct scrub_ctx	*sctx;$/;"	m	struct:scrub_copy_nocow_ctx	typeref:struct:scrub_copy_nocow_ctx::scrub_ctx	file:
sctx	scrub.c	/^	struct scrub_ctx	*sctx;$/;"	m	struct:scrub_fixup_nodatasum	typeref:struct:scrub_fixup_nodatasum::scrub_ctx	file:
sctx	scrub.c	/^	struct scrub_ctx	*sctx;$/;"	m	struct:scrub_parity	typeref:struct:scrub_parity::scrub_ctx	file:
sctx	send.c	/^	struct send_ctx *sctx;$/;"	m	struct:backref_ctx	typeref:struct:backref_ctx::send_ctx	file:
search_bitmap	free-space-cache.c	/^static int search_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
search_commit_root	ctree.h	/^	unsigned int search_commit_root:1;$/;"	m	struct:btrfs_path
search_extent_mapping	extent_map.c	/^struct extent_map *search_extent_mapping(struct extent_map_tree *tree,$/;"	f
search_for_split	ctree.h	/^	unsigned int search_for_split:1;$/;"	m	struct:btrfs_path
search_free_space_info	free-space-tree.c	/^search_free_space_info(struct btrfs_trans_handle *trans,$/;"	f
search_full_stripe_lock	scrub.c	/^static struct full_stripe_lock *search_full_stripe_lock($/;"	f	file:
search_ioctl	ioctl.c	/^static noinline int search_ioctl(struct inode *inode,$/;"	f	file:
search_start	relocation.c	/^	u64 search_start;$/;"	m	struct:reloc_control	file:
sec	ioctl.c	/^	__u64 sec;$/;"	m	struct:btrfs_ioctl_timespec_32	file:
sector	scrub.c	/^	sector_t		sector;$/;"	m	struct:scrub_warning	file:
sector_size	volumes.h	/^	u32 sector_size;$/;"	m	struct:btrfs_device
sectorsize	ctree.h	/^	__le32 sectorsize;$/;"	m	struct:btrfs_super_block
sectorsize	ctree.h	/^	u32 sectorsize;$/;"	m	struct:btrfs_fs_info
security_opts	ctree.h	/^	struct security_mnt_opts security_opts;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::security_mnt_opts
seed	volumes.h	/^	struct btrfs_fs_devices *seed;$/;"	m	struct:btrfs_fs_devices	typeref:struct:btrfs_fs_devices::btrfs_fs_devices
seeding	volumes.h	/^	int seeding;$/;"	m	struct:btrfs_fs_devices
select_delayed_ref	extent-tree.c	/^select_delayed_ref(struct btrfs_delayed_ref_head *head)$/;"	f	file:
select_one_root	relocation.c	/^struct btrfs_root *select_one_root(struct backref_node *node)$/;"	f	file:
select_reloc_root	relocation.c	/^struct btrfs_root *select_reloc_root(struct btrfs_trans_handle *trans,$/;"	f	file:
send_buf	send.c	/^	char *send_buf;$/;"	m	struct:send_ctx	file:
send_chmod	send.c	/^static int send_chmod(struct send_ctx *sctx, u64 ino, u64 gen, u64 mode)$/;"	f	file:
send_chown	send.c	/^static int send_chown(struct send_ctx *sctx, u64 ino, u64 gen, u64 uid, u64 gid)$/;"	f	file:
send_clone	send.c	/^static int send_clone(struct send_ctx *sctx,$/;"	f	file:
send_cmd	send.c	/^static int send_cmd(struct send_ctx *sctx)$/;"	f	file:
send_create_inode	send.c	/^static int send_create_inode(struct send_ctx *sctx, u64 ino)$/;"	f	file:
send_create_inode_if_needed	send.c	/^static int send_create_inode_if_needed(struct send_ctx *sctx)$/;"	f	file:
send_ctx	send.c	/^struct send_ctx {$/;"	s	file:
send_extent_data	send.c	/^static int send_extent_data(struct send_ctx *sctx,$/;"	f	file:
send_filp	send.c	/^	struct file *send_filp;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::file	file:
send_header	send.c	/^static int send_header(struct send_ctx *sctx)$/;"	f	file:
send_hole	send.c	/^static int send_hole(struct send_ctx *sctx, u64 end)$/;"	f	file:
send_in_progress	ctree.h	/^	int send_in_progress;$/;"	m	struct:btrfs_root
send_link	send.c	/^static int send_link(struct send_ctx *sctx,$/;"	f	file:
send_max_size	send.c	/^	u32 send_max_size;$/;"	m	struct:send_ctx	file:
send_off	send.c	/^	loff_t send_off;$/;"	m	struct:send_ctx	file:
send_progress	send.c	/^	u64 send_progress;$/;"	m	struct:send_ctx	file:
send_remove_xattr	send.c	/^static int send_remove_xattr(struct send_ctx *sctx,$/;"	f	file:
send_rename	send.c	/^static int send_rename(struct send_ctx *sctx,$/;"	f	file:
send_rmdir	send.c	/^static int send_rmdir(struct send_ctx *sctx, struct fs_path *path)$/;"	f	file:
send_root	send.c	/^	struct btrfs_root *send_root;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::btrfs_root	file:
send_set_xattr	send.c	/^static int send_set_xattr(struct send_ctx *sctx,$/;"	f	file:
send_size	send.c	/^	u32 send_size;$/;"	m	struct:send_ctx	file:
send_subvol	send.c	/^static int send_subvol(struct send_ctx *sctx)$/;"	f	file:
send_subvol_begin	send.c	/^static int send_subvol_begin(struct send_ctx *sctx)$/;"	f	file:
send_truncate	send.c	/^static int send_truncate(struct send_ctx *sctx, u64 ino, u64 gen, u64 size)$/;"	f	file:
send_unlink	send.c	/^static int send_unlink(struct send_ctx *sctx, struct fs_path *path)$/;"	f	file:
send_update_extent	send.c	/^static int send_update_extent(struct send_ctx *sctx,$/;"	f	file:
send_utimes	send.c	/^static int send_utimes(struct send_ctx *sctx, u64 ino, u64 gen)$/;"	f	file:
send_write	send.c	/^static int send_write(struct send_ctx *sctx, u64 offset, u32 len)$/;"	f	file:
send_write_or_clone	send.c	/^static int send_write_or_clone(struct send_ctx *sctx,$/;"	f	file:
seq	ctree.c	/^	u64 seq;$/;"	m	struct:tree_mod_elem	file:
seq	ctree.h	/^	u64 seq;$/;"	m	struct:seq_list
seq	delayed-ref.h	/^	u64 seq;$/;"	m	struct:btrfs_delayed_ref_node
seq_list	ctree.h	/^struct seq_list {$/;"	s
set_avail_alloc_bits	extent-tree.c	/^static void set_avail_alloc_bits(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	file:
set_balance_control	volumes.c	/^static void set_balance_control(struct btrfs_balance_control *bctl)$/;"	f	file:
set_bio_pages_uptodate	raid56.c	/^static void set_bio_pages_uptodate(struct bio *bio)$/;"	f	file:
set_bit_hook	extent_io.h	/^	void (*set_bit_hook)(void *private_data, struct extent_state *state,$/;"	m	struct:extent_io_ops
set_btree_ioerr	extent_io.c	/^static void set_btree_ioerr(struct page *page)$/;"	f	file:
set_extent_bit	extent_io.c	/^int set_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f
set_extent_bits	extent_io.h	/^static inline int set_extent_bits(struct extent_io_tree *tree, u64 start,$/;"	f
set_extent_buffer_dirty	extent_io.c	/^int set_extent_buffer_dirty(struct extent_buffer *eb)$/;"	f
set_extent_buffer_uptodate	extent_io.c	/^void set_extent_buffer_uptodate(struct extent_buffer *eb)$/;"	f
set_extent_defrag	extent_io.h	/^static inline int set_extent_defrag(struct extent_io_tree *tree, u64 start,$/;"	f
set_extent_delalloc	extent_io.h	/^static inline int set_extent_delalloc(struct extent_io_tree *tree, u64 start,$/;"	f
set_extent_dirty	extent_io.h	/^static inline int set_extent_dirty(struct extent_io_tree *tree, u64 start,$/;"	f
set_extent_new	extent_io.h	/^static inline int set_extent_new(struct extent_io_tree *tree, u64 start,$/;"	f
set_extent_uptodate	extent_io.h	/^static inline int set_extent_uptodate(struct extent_io_tree *tree, u64 start,$/;"	f
set_features	sysfs.c	/^static void set_features(struct btrfs_fs_info *fs_info,$/;"	f	file:
set_free_space_tree_thresholds	free-space-tree.c	/^void set_free_space_tree_thresholds(struct btrfs_block_group_cache *cache)$/;"	f
set_page_extent_mapped	extent_io.c	/^void set_page_extent_mapped(struct page *page)$/;"	f
set_range_writeback	extent_io.c	/^static void set_range_writeback(struct extent_io_tree *tree, u64 start, u64 end)$/;"	f	file:
set_range_writeback	extent_io.h	/^	void (*set_range_writeback)(void *private_data, u64 start, u64 end);$/;"	m	struct:extent_io_ops
set_record_extent_bits	extent_io.c	/^int set_record_extent_bits(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f
set_ref_path	send.c	/^static void set_ref_path(struct recorded_ref *ref, struct fs_path *path)$/;"	f	file:
set_reloc_control	relocation.c	/^static void set_reloc_control(struct reloc_control *rc)$/;"	f	file:
set_state_bits	extent_io.c	/^static void set_state_bits(struct extent_io_tree *tree,$/;"	f	file:
set_state_cb	extent_io.c	/^static void set_state_cb(struct extent_io_tree *tree,$/;"	f	file:
set_state_failrec	extent_io.c	/^static noinline int set_state_failrec(struct extent_io_tree *tree, u64 start,$/;"	f	file:
setup_cluster_bitmap	free-space-cache.c	/^setup_cluster_bitmap(struct btrfs_block_group_cache *block_group,$/;"	f	file:
setup_cluster_no_bitmap	free-space-cache.c	/^setup_cluster_no_bitmap(struct btrfs_block_group_cache *block_group,$/;"	f	file:
setup_extent_mapping	extent_map.c	/^static inline void setup_extent_mapping(struct extent_map_tree *tree,$/;"	f	file:
setup_extent_mapping	relocation.c	/^int setup_extent_mapping(struct inode *inode, u64 start, u64 end,$/;"	f	file:
setup_file_extents	tests/inode-tests.c	/^static void setup_file_extents(struct btrfs_root *root, u32 sectorsize)$/;"	f	file:
setup_inline_extent_backref	extent-tree.c	/^void setup_inline_extent_backref(struct btrfs_fs_info *fs_info,$/;"	f	file:
setup_items_for_insert	ctree.c	/^void setup_items_for_insert(struct btrfs_root *root, struct btrfs_path *path,$/;"	f
setup_leaf_for_split	ctree.c	/^static noinline int setup_leaf_for_split(struct btrfs_trans_handle *trans,$/;"	f	file:
setup_nodes_for_search	ctree.c	/^setup_nodes_for_search(struct btrfs_trans_handle *trans,$/;"	f	file:
setup_root_args	super.c	/^static char *setup_root_args(char *args)$/;"	f	file:
setup_security_options	super.c	/^static int setup_security_options(struct btrfs_fs_info *fs_info,$/;"	f	file:
share_check	backref.c	/^struct share_check {$/;"	s	file:
share_count	backref.c	/^	int share_count;$/;"	m	struct:share_check	file:
shared_level	extent-tree.c	/^	int shared_level;$/;"	m	struct:walk_control	file:
should_alloc_chunk	extent-tree.c	/^static int should_alloc_chunk(struct btrfs_fs_info *fs_info,$/;"	f	file:
should_balance_chunk	volumes.c	/^static int should_balance_chunk(struct btrfs_fs_info *fs_info,$/;"	f	file:
should_cow_block	ctree.c	/^static inline int should_cow_block(struct btrfs_trans_handle *trans,$/;"	f	file:
should_defrag_range	ioctl.c	/^static int should_defrag_range(struct inode *inode, u64 start, u32 thresh,$/;"	f	file:
should_end_transaction	transaction.c	/^static int should_end_transaction(struct btrfs_trans_handle *trans)$/;"	f	file:
should_ignore_root	relocation.c	/^static int should_ignore_root(struct btrfs_root *root)$/;"	f	file:
shrink_delalloc	extent-tree.c	/^static void shrink_delalloc(struct btrfs_fs_info *fs_info, u64 to_reclaim,$/;"	f	file:
size	ctree.h	/^	__le32 size;$/;"	m	struct:btrfs_item
size	ctree.h	/^	u64 size;$/;"	m	struct:btrfs_block_rsv
size	ctree.h	/^	unsigned long size;$/;"	m	struct:btrfs_io_ctl
size	zstd.c	/^	size_t size;$/;"	m	struct:workspace	file:
skip_locking	ctree.h	/^	unsigned int skip_locking:1;$/;"	m	struct:btrfs_path
skip_release_on_error	ctree.h	/^	unsigned int skip_release_on_error:1;$/;"	m	struct:btrfs_path
slot	ctree.c	/^	int slot;$/;"	m	struct:tree_mod_elem	file:
slots	ctree.h	/^	int slots[BTRFS_MAX_LEVEL];$/;"	m	struct:btrfs_path
snap	transaction.h	/^	struct btrfs_root *snap;$/;"	m	struct:btrfs_pending_snapshot	typeref:struct:btrfs_pending_snapshot::btrfs_root
sort_parity_stripes	volumes.c	/^static void sort_parity_stripes(struct btrfs_bio *bbio, int num_stripes)$/;"	f	file:
space_info	ctree.h	/^	struct btrfs_space_info *space_info;$/;"	m	struct:btrfs_block_group_cache	typeref:struct:btrfs_block_group_cache::btrfs_space_info
space_info	ctree.h	/^	struct btrfs_space_info *space_info;$/;"	m	struct:btrfs_block_rsv	typeref:struct:btrfs_block_rsv::btrfs_space_info
space_info	ctree.h	/^	struct list_head space_info;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
space_info_add_new_bytes	extent-tree.c	/^static void space_info_add_new_bytes(struct btrfs_fs_info *fs_info,$/;"	f	file:
space_info_add_old_bytes	extent-tree.c	/^static void space_info_add_old_bytes(struct btrfs_fs_info *fs_info,$/;"	f	file:
space_info_attrs	sysfs.c	/^static struct attribute *space_info_attrs[] = {$/;"	v	typeref:struct:attribute	file:
space_info_kobj	ctree.h	/^	struct kobject *space_info_kobj;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::kobject
space_info_ktype	sysfs.c	/^struct kobj_type space_info_ktype = {$/;"	v	typeref:struct:kobj_type
space_info_release	sysfs.c	/^static void space_info_release(struct kobject *kobj)$/;"	f	file:
spages	scrub.c	/^	struct list_head	spages;$/;"	m	struct:scrub_parity	typeref:struct:scrub_parity::list_head	file:
sparity	scrub.c	/^	struct scrub_parity	*sparity;$/;"	m	struct:scrub_block	typeref:struct:scrub_block::scrub_parity	file:
spinning_readers	extent_io.h	/^	atomic_t spinning_readers;$/;"	m	struct:extent_buffer
spinning_writers	extent_io.h	/^	atomic_t spinning_writers;$/;"	m	struct:extent_buffer
split_cb	extent_io.c	/^static void split_cb(struct extent_io_tree *tree, struct extent_state *orig,$/;"	f	file:
split_extent_hook	extent_io.h	/^	void (*split_extent_hook)(void *private_data,$/;"	m	struct:extent_io_ops
split_item	ctree.c	/^static noinline int split_item(struct btrfs_fs_info *fs_info,$/;"	f	file:
split_leaf	ctree.c	/^static noinline int split_leaf(struct btrfs_trans_handle *trans,$/;"	f	file:
split_node	ctree.c	/^static noinline int split_node(struct btrfs_trans_handle *trans,$/;"	f	file:
split_state	extent_io.c	/^static int split_state(struct extent_io_tree *tree, struct extent_state *orig,$/;"	f	file:
src_pages	ioctl.c	/^	struct page	**src_pages;$/;"	m	struct:cmp_pages	typeref:struct:cmp_pages::page	file:
srcdev	ctree.h	/^	struct btrfs_device *srcdev;$/;"	m	struct:btrfs_dev_replace	typeref:struct:btrfs_dev_replace::btrfs_device
stage	extent-tree.c	/^	int stage;$/;"	m	struct:walk_control	file:
stage	relocation.c	/^	unsigned int stage:8;$/;"	m	struct:reloc_control	file:
stage	tree-log.c	/^	int stage;$/;"	m	struct:walk_control	file:
start	check-integrity.c	/^	u64 start;		\/* virtual bytenr *\/$/;"	m	struct:btrfsic_block_data_ctx	file:
start	compression.h	/^	u64 start;$/;"	m	struct:compressed_bio
start	extent_io.c	/^	u64 start;$/;"	m	struct:tree_entry	file:
start	extent_io.h	/^	u64 start;$/;"	m	struct:extent_buffer
start	extent_io.h	/^	u64 start;$/;"	m	struct:extent_state
start	extent_io.h	/^	u64 start;$/;"	m	struct:io_failure_record
start	extent_map.h	/^	u64 start;$/;"	m	struct:extent_map
start	file.c	/^	u64 start;$/;"	m	struct:falloc_range	file:
start	free-space-cache.c	/^	u64 start;$/;"	m	struct:btrfs_trim_range	file:
start	free-space-cache.h	/^	u64 start;$/;"	m	struct:btrfs_free_space_ctl
start	inode.c	/^	u64 start;$/;"	m	struct:async_cow	file:
start	inode.c	/^	u64 start;$/;"	m	struct:async_extent	file:
start	inode.c	/^	u64 start;$/;"	m	struct:btrfs_retry_complete	file:
start	ordered-data.h	/^	u64 start;$/;"	m	struct:btrfs_ordered_extent
start	reada.c	/^	u64			start;$/;"	m	struct:reada_zone	file:
start	relocation.c	/^	u64 start;$/;"	m	struct:file_extent_cluster	file:
start	send.c	/^			char *start;$/;"	m	struct:fs_path::__anon1::__anon2	file:
start	tests/free-space-tree-tests.c	/^	u64 start;$/;"	m	struct:free_space_extent	file:
start_caching	inode-map.c	/^static void start_caching(struct btrfs_root *root)$/;"	f	file:
start_log_trans	tree-log.c	/^static int start_log_trans(struct btrfs_trans_handle *trans,$/;"	f	file:
start_ordered_ops	file.c	/^static int start_ordered_ops(struct inode *inode, loff_t start, loff_t end)$/;"	f	file:
start_time	transaction.h	/^	unsigned long start_time;$/;"	m	struct:btrfs_transaction
start_transaction	transaction.c	/^start_transaction(struct btrfs_root *root, unsigned int num_items,$/;"	f	file:
stat	scrub.c	/^	struct btrfs_scrub_progress stat;$/;"	m	struct:scrub_ctx	typeref:struct:scrub_ctx::btrfs_scrub_progress	file:
stat	volumes.h	/^	struct btrfs_balance_progress stat;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_control::btrfs_balance_progress
stat_lock	scrub.c	/^	spinlock_t		stat_lock;$/;"	m	struct:scrub_ctx	file:
state	check-integrity.c	/^	struct btrfsic_state *state;$/;"	m	struct:btrfsic_dev_state	typeref:struct:btrfsic_dev_state::btrfsic_state	file:
state	ctree.h	/^	unsigned long state;$/;"	m	struct:btrfs_root
state	extent_io.h	/^	struct rb_root state;$/;"	m	struct:extent_io_tree	typeref:struct:extent_io_tree::rb_root
state	extent_io.h	/^	unsigned state;$/;"	m	struct:extent_state
state	transaction.h	/^	enum btrfs_trans_state state;$/;"	m	struct:btrfs_transaction	typeref:enum:btrfs_transaction::btrfs_trans_state
status	disk-io.c	/^	blk_status_t status;$/;"	m	struct:async_submit_bio	file:
status	disk-io.c	/^	blk_status_t status;$/;"	m	struct:btrfs_end_io_wq	file:
status	scrub.c	/^	blk_status_t		status;$/;"	m	struct:scrub_bio	file:
status	scrub.c	/^	blk_status_t status;$/;"	m	struct:scrub_bio_ret	file:
steal_from_bitmap	free-space-cache.c	/^static void steal_from_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
steal_from_bitmap_to_end	free-space-cache.c	/^static bool steal_from_bitmap_to_end(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
steal_from_bitmap_to_front	free-space-cache.c	/^static bool steal_from_bitmap_to_front(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
steal_rbio	raid56.c	/^static void steal_rbio(struct btrfs_raid_bio *src, struct btrfs_raid_bio *dest)$/;"	f	file:
stime	ioctl.c	/^	struct btrfs_ioctl_timespec_32 stime; \/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	typeref:struct:btrfs_ioctl_received_subvol_args_32::btrfs_ioctl_timespec_32	file:
str	rcu-string.h	/^	char str[0];$/;"	m	struct:rcu_string
stransid	ioctl.c	/^	__u64	stransid;		\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	file:
stripe_cache	ctree.h	/^	struct list_head stripe_cache;$/;"	m	struct:btrfs_stripe_hash_table	typeref:struct:btrfs_stripe_hash_table::list_head
stripe_cache	raid56.c	/^	struct list_head stripe_cache;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::list_head	file:
stripe_hash_table	ctree.h	/^	struct btrfs_stripe_hash_table *stripe_hash_table;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_stripe_hash_table
stripe_index	volumes.h	/^	unsigned int stripe_index;$/;"	m	struct:btrfs_io_bio
stripe_len	raid56.c	/^	int stripe_len;$/;"	m	struct:btrfs_raid_bio	file:
stripe_len	scrub.c	/^	u64			stripe_len;$/;"	m	struct:scrub_parity	file:
stripe_len	volumes.h	/^	u64 stripe_len;$/;"	m	struct:map_lookup
stripe_npages	raid56.c	/^	int stripe_npages;$/;"	m	struct:btrfs_raid_bio	file:
stripe_pages	raid56.c	/^	struct page **stripe_pages;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::page	file:
stripes	volumes.h	/^	struct btrfs_bio_stripe stripes[];$/;"	m	struct:btrfs_bio	typeref:struct:btrfs_bio::btrfs_bio_stripe
stripes	volumes.h	/^	struct btrfs_bio_stripe stripes[];$/;"	m	struct:map_lookup	typeref:struct:map_lookup::btrfs_bio_stripe
stripes_pending	raid56.c	/^	atomic_t stripes_pending;$/;"	m	struct:btrfs_raid_bio	file:
stripes_pending	volumes.h	/^	atomic_t stripes_pending;$/;"	m	struct:btrfs_bio
stripesize	ctree.h	/^	__le32 stripesize;$/;"	m	struct:btrfs_super_block
stripesize	ctree.h	/^	u32 stripesize;$/;"	m	struct:btrfs_fs_info
strm	zlib.c	/^	z_stream strm;$/;"	m	struct:workspace	file:
sub_stripes	volumes.h	/^	int sub_stripes;	\/* sub_stripes info for map *\/$/;"	m	struct:btrfs_raid_attr
sub_stripes	volumes.h	/^	int sub_stripes;$/;"	m	struct:map_lookup
subio_endio	btrfs_inode.h	/^	blk_status_t (*subio_endio)(struct inode *, struct btrfs_io_bio *,$/;"	m	struct:btrfs_dio_private
submit_bio_bh_rw	check-integrity.c	/^	int submit_bio_bh_rw;$/;"	m	struct:btrfsic_block	file:
submit_bio_done	disk-io.c	/^	extent_submit_bio_hook_t *submit_bio_done;$/;"	m	struct:async_submit_bio	file:
submit_bio_hook	extent_io.h	/^	extent_submit_bio_hook_t *submit_bio_hook;$/;"	m	struct:extent_io_ops
submit_bio_start	disk-io.c	/^	extent_submit_bio_hook_t *submit_bio_start;$/;"	m	struct:async_submit_bio	file:
submit_compressed_extents	inode.c	/^static noinline void submit_compressed_extents(struct inode *inode,$/;"	f	file:
submit_dio_repair_bio	inode.c	/^static inline blk_status_t submit_dio_repair_bio(struct inode *inode,$/;"	f	file:
submit_extent_page	extent_io.c	/^static int submit_extent_page(unsigned int opf, struct extent_io_tree *tree,$/;"	f	file:
submit_helper	async-thread.c	/^BTRFS_WORK_HELPER(submit_helper);$/;"	v
submit_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(submit_helper);$/;"	v
submit_one_bio	extent_io.c	/^static int __must_check submit_one_bio(struct bio *bio, int mirror_num,$/;"	f	file:
submit_stripe_bio	volumes.c	/^static void submit_stripe_bio(struct btrfs_bio *bbio, struct bio *bio,$/;"	f	file:
submit_workers	ctree.h	/^	struct btrfs_workqueue *submit_workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
subv_writers	ctree.h	/^	struct btrfs_subvolume_writers *subv_writers;$/;"	m	struct:btrfs_root	typeref:struct:btrfs_root::btrfs_subvolume_writers
subvol_sem	ctree.h	/^	struct rw_semaphore subvol_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rw_semaphore
subvol_srcu	ctree.h	/^	struct srcu_struct subvol_srcu;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::srcu_struct
sums	compression.h	/^	u32 sums;$/;"	m	struct:compressed_bio
sums	ordered-data.h	/^	u32 sums[];$/;"	m	struct:btrfs_ordered_sum
super_copy	ctree.h	/^	struct btrfs_super_block *super_copy;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_super_block
super_for_commit	ctree.h	/^	struct btrfs_super_block *super_for_commit;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_super_block
super_lock	ctree.h	/^	spinlock_t super_lock;$/;"	m	struct:btrfs_fs_info
super_roots	ctree.h	/^	struct btrfs_root_backup super_roots[BTRFS_NUM_BACKUP_ROOTS];$/;"	m	struct:btrfs_super_block	typeref:struct:btrfs_super_block::btrfs_root_backup
supported_feature_masks	sysfs.c	/^static const u64 supported_feature_masks[3] = {$/;"	v	file:
switch_commit_roots	transaction.c	/^static noinline void switch_commit_roots(struct btrfs_transaction *trans,$/;"	f	file:
switch_commits	transaction.h	/^	struct list_head switch_commits;$/;"	m	struct:btrfs_transaction	typeref:struct:btrfs_transaction::list_head
sync	extent-tree.c	/^	int sync;$/;"	m	struct:async_delayed_refs	file:
sync	transaction.h	/^	bool sync;$/;"	m	struct:btrfs_trans_handle
sync_io	extent_io.c	/^	unsigned int sync_io:1;$/;"	m	struct:extent_page_data	file:
sync_writers	btrfs_inode.h	/^	atomic_t sync_writers;$/;"	m	struct:btrfs_inode
sys	volumes.h	/^	struct btrfs_balance_args sys;$/;"	m	struct:btrfs_balance_control	typeref:struct:btrfs_balance_control::btrfs_balance_args
sys_chunk_array	ctree.h	/^	u8 sys_chunk_array[BTRFS_SYSTEM_CHUNK_ARRAY_SIZE];$/;"	m	struct:btrfs_super_block
sys_chunk_array_size	ctree.h	/^	__le32 sys_chunk_array_size;$/;"	m	struct:btrfs_super_block
table	check-integrity.c	/^	struct list_head table[BTRFSIC_BLOCK_HASHTABLE_SIZE];$/;"	m	struct:btrfsic_block_hashtable	typeref:struct:btrfsic_block_hashtable::list_head	file:
table	check-integrity.c	/^	struct list_head table[BTRFSIC_BLOCK_LINK_HASHTABLE_SIZE];$/;"	m	struct:btrfsic_block_link_hashtable	typeref:struct:btrfsic_block_link_hashtable::list_head	file:
table	check-integrity.c	/^	struct list_head table[BTRFSIC_DEV2STATE_HASHTABLE_SIZE];$/;"	m	struct:btrfsic_dev_state_hashtable	typeref:struct:btrfsic_dev_state_hashtable::list_head	file:
table	ctree.h	/^	struct btrfs_stripe_hash table[];$/;"	m	struct:btrfs_stripe_hash_table	typeref:struct:btrfs_stripe_hash_table::btrfs_stripe_hash
tail	volumes.h	/^	struct bio *tail;$/;"	m	struct:btrfs_pending_bios	typeref:struct:btrfs_pending_bios::bio
tail_append_pending_moves	send.c	/^static void tail_append_pending_moves(struct pending_dir_move *moves,$/;"	f	file:
test_add_free_space_entry	free-space-cache.c	/^int test_add_free_space_entry(struct btrfs_block_group_cache *cache,$/;"	f
test_bitmaps	tests/free-space-tests.c	/^static int test_bitmaps(struct btrfs_block_group_cache *cache,$/;"	f	file:
test_bitmaps_and_extents	tests/free-space-tests.c	/^static int test_bitmaps_and_extents(struct btrfs_block_group_cache *cache,$/;"	f	file:
test_btrfs_get_extent	tests/inode-tests.c	/^static noinline int test_btrfs_get_extent(u32 sectorsize, u32 nodesize)$/;"	f	file:
test_btrfs_split_item	tests/extent-buffer-tests.c	/^static int test_btrfs_split_item(u32 sectorsize, u32 nodesize)$/;"	f	file:
test_check_exists	free-space-cache.c	/^int test_check_exists(struct btrfs_block_group_cache *cache,$/;"	f
test_eb_bitmaps	tests/extent-io-tests.c	/^static int test_eb_bitmaps(u32 sectorsize, u32 nodesize)$/;"	f	file:
test_empty_block_group	tests/free-space-tree-tests.c	/^static int test_empty_block_group(struct btrfs_trans_handle *trans,$/;"	f	file:
test_extent_accounting	tests/inode-tests.c	/^static int test_extent_accounting(u32 sectorsize, u32 nodesize)$/;"	f	file:
test_extents	tests/free-space-tests.c	/^static int test_extents(struct btrfs_block_group_cache *cache)$/;"	f	file:
test_find_delalloc	tests/extent-io-tests.c	/^static int test_find_delalloc(u32 sectorsize)$/;"	f	file:
test_func_t	tests/free-space-tree-tests.c	/^typedef int (*test_func_t)(struct btrfs_trans_handle *,$/;"	t	file:
test_hole_first	tests/inode-tests.c	/^static int test_hole_first(u32 sectorsize, u32 nodesize)$/;"	f	file:
test_merge_both	tests/free-space-tree-tests.c	/^static int test_merge_both(struct btrfs_trans_handle *trans,$/;"	f	file:
test_merge_left	tests/free-space-tree-tests.c	/^static int test_merge_left(struct btrfs_trans_handle *trans,$/;"	f	file:
test_merge_none	tests/free-space-tree-tests.c	/^static int test_merge_none(struct btrfs_trans_handle *trans,$/;"	f	file:
test_merge_right	tests/free-space-tree-tests.c	/^static int test_merge_right(struct btrfs_trans_handle *trans,$/;"	f	file:
test_mnt	tests/btrfs-tests.c	/^static struct vfsmount *test_mnt = NULL;$/;"	v	typeref:struct:vfsmount	file:
test_msg	tests/btrfs-tests.h	25;"	d
test_multiple_refs	tests/qgroup-tests.c	/^static int test_multiple_refs(struct btrfs_root *root,$/;"	f	file:
test_no_shared_qgroup	tests/qgroup-tests.c	/^static int test_no_shared_qgroup(struct btrfs_root *root,$/;"	f	file:
test_range_bit	extent_io.c	/^int test_range_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f
test_remove_all	tests/free-space-tree-tests.c	/^static int test_remove_all(struct btrfs_trans_handle *trans,$/;"	f	file:
test_remove_beginning	tests/free-space-tree-tests.c	/^static int test_remove_beginning(struct btrfs_trans_handle *trans,$/;"	f	file:
test_remove_end	tests/free-space-tree-tests.c	/^static int test_remove_end(struct btrfs_trans_handle *trans,$/;"	f	file:
test_remove_middle	tests/free-space-tree-tests.c	/^static int test_remove_middle(struct btrfs_trans_handle *trans,$/;"	f	file:
test_steal_space_from_bitmap_to_extent	tests/free-space-tests.c	/^test_steal_space_from_bitmap_to_extent(struct btrfs_block_group_cache *cache,$/;"	f	file:
test_type	tests/btrfs-tests.c	/^static struct file_system_type test_type = {$/;"	v	typeref:struct:file_system_type	file:
test_use_bitmap	tests/free-space-tests.c	/^static bool test_use_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
tfm	hash.c	/^static struct crypto_shash *tfm;$/;"	v	typeref:struct:crypto_shash	file:
tgtdev	ctree.h	/^	struct btrfs_device *tgtdev;$/;"	m	struct:btrfs_dev_replace	typeref:struct:btrfs_dev_replace::btrfs_device
tgtdev_map	volumes.h	/^	int *tgtdev_map;$/;"	m	struct:btrfs_bio
this_mirror	extent_io.h	/^	int this_mirror;$/;"	m	struct:io_failure_record
thread_pool_size	ctree.h	/^	int thread_pool_size;$/;"	m	struct:btrfs_fs_info
thres_lock	async-thread.c	/^	spinlock_t thres_lock;$/;"	m	struct:__btrfs_workqueue	file:
thresh	async-thread.c	/^	int thresh;$/;"	m	struct:__btrfs_workqueue	file:
thresh_exec_hook	async-thread.c	/^static inline void thresh_exec_hook(struct __btrfs_workqueue *wq)$/;"	f	file:
thresh_queue_hook	async-thread.c	/^static inline void thresh_queue_hook(struct __btrfs_workqueue *wq)$/;"	f	file:
tickets	ctree.h	/^	struct list_head tickets;$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::list_head
tickets_id	ctree.h	/^	u64 tickets_id;$/;"	m	struct:btrfs_space_info
time_started	ctree.h	/^	u64 time_started;	\/* seconds since 1-Jan-1970 *\/$/;"	m	struct:btrfs_dev_replace
time_stopped	ctree.h	/^	u64 time_stopped;	\/* seconds since 1-Jan-1970 *\/$/;"	m	struct:btrfs_dev_replace
tlv_len	send.h	/^	__le16 tlv_len;$/;"	m	struct:btrfs_tlv_header
tlv_put	send.c	/^static int tlv_put(struct send_ctx *sctx, u16 attr, const void *data, int len)$/;"	f	file:
tlv_put_btrfs_timespec	send.c	/^static int tlv_put_btrfs_timespec(struct send_ctx *sctx, u16 attr,$/;"	f	file:
tlv_put_string	send.c	/^static int tlv_put_string(struct send_ctx *sctx, u16 attr,$/;"	f	file:
tlv_put_uuid	send.c	/^static int tlv_put_uuid(struct send_ctx *sctx, u16 attr,$/;"	f	file:
tlv_type	send.h	/^	__le16 tlv_type;$/;"	m	struct:btrfs_tlv_header
to_async_delayed_refs	extent-tree.c	/^to_async_delayed_refs(struct btrfs_work *work)$/;"	f	file:
to_btrfs_feature_attr	sysfs.h	/^to_btrfs_feature_attr(struct kobj_attribute *a)$/;"	f
to_fs_devs	sysfs.c	/^static inline struct btrfs_fs_devices *to_fs_devs(struct kobject *kobj)$/;"	f	file:
to_fs_info	sysfs.c	/^static inline struct btrfs_fs_info *to_fs_info(struct kobject *kobj)$/;"	f	file:
to_raid_kobj	sysfs.c	262;"	d	file:
to_space_info	sysfs.c	261;"	d	file:
tokens	super.c	/^static const match_table_t tokens = {$/;"	v	file:
tolerated_failures	volumes.h	/^	int tolerated_failures; \/* max tolerated fail devs *\/$/;"	m	struct:btrfs_raid_attr
top	reada.c	/^	struct btrfs_key	top;$/;"	m	struct:reada_extent	typeref:struct:reada_extent::btrfs_key	file:
total_avail	volumes.h	/^	u64 total_avail;$/;"	m	struct:btrfs_device_info
total_bitmaps	free-space-cache.h	/^	int total_bitmaps;$/;"	m	struct:btrfs_free_space_ctl
total_bytes	ctree.h	/^	__le64 total_bytes;$/;"	m	struct:btrfs_root_backup
total_bytes	ctree.h	/^	__le64 total_bytes;$/;"	m	struct:btrfs_super_block
total_bytes	ctree.h	/^	u64 total_bytes;	\/* total bytes in the space,$/;"	m	struct:btrfs_space_info
total_bytes	sysfs.c	/^SPACE_INFO_ATTR(total_bytes);$/;"	v
total_bytes	volumes.h	/^	u64 total_bytes;$/;"	m	struct:btrfs_device
total_bytes	volumes.h	/^BTRFS_DEVICE_GETSET_FUNCS(total_bytes);$/;"	v
total_bytes_pinned	ctree.h	/^	struct percpu_counter total_bytes_pinned;$/;"	m	struct:btrfs_space_info	typeref:struct:btrfs_space_info::percpu_counter
total_devices	volumes.h	/^	u64 total_devices;$/;"	m	struct:btrfs_fs_devices
total_pinned	ctree.h	/^	u64 total_pinned;$/;"	m	struct:btrfs_fs_info
total_ref_mod	delayed-ref.h	/^	int total_ref_mod;$/;"	m	struct:btrfs_delayed_ref_head
total_rw_bytes	volumes.h	/^	u64 total_rw_bytes;$/;"	m	struct:btrfs_fs_devices
total_send_size	send.c	/^	u64 total_send_size;$/;"	m	struct:send_ctx	file:
total_ws	compression.c	/^	atomic_t total_ws;$/;"	m	struct:__anon6	file:
track_uptodate	extent_io.h	/^	int track_uptodate;$/;"	m	struct:extent_io_tree
trans	ctree.h	/^	struct btrfs_trans_handle *trans;$/;"	m	struct:btrfs_file_private	typeref:struct:btrfs_file_private::btrfs_trans_handle
trans	tree-log.c	/^	struct btrfs_trans_handle *trans;$/;"	m	struct:walk_control	typeref:struct:walk_control::btrfs_trans_handle	file:
trans_block_rsv	ctree.h	/^	struct btrfs_block_rsv trans_block_rsv;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_block_rsv
trans_list	ctree.h	/^	struct list_head trans_list;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
trans_list	ordered-data.h	/^	struct list_head trans_list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::list_head
trans_lock	ctree.h	/^	spinlock_t trans_lock;$/;"	m	struct:btrfs_fs_info
transaction	transaction.h	/^	struct btrfs_transaction *transaction;$/;"	m	struct:btrfs_trans_handle	typeref:struct:btrfs_trans_handle::btrfs_transaction
transaction_blocked_wait	ctree.h	/^	wait_queue_head_t transaction_blocked_wait;$/;"	m	struct:btrfs_fs_info
transaction_kthread	ctree.h	/^	struct task_struct *transaction_kthread;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::task_struct
transaction_kthread	disk-io.c	/^static int transaction_kthread(void *arg)$/;"	f	file:
transaction_kthread_mutex	ctree.h	/^	struct mutex transaction_kthread_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
transaction_throttle	ctree.h	/^	wait_queue_head_t transaction_throttle;$/;"	m	struct:btrfs_fs_info
transaction_wait	ctree.h	/^	wait_queue_head_t transaction_wait;$/;"	m	struct:btrfs_fs_info
transid	extent-tree.c	/^	u64 transid;$/;"	m	struct:async_delayed_refs	file:
transid	file.c	/^	u64 transid;$/;"	m	struct:inode_defrag	file:
transid	transaction.h	/^	u64 transid;$/;"	m	struct:btrfs_trans_handle
transid	transaction.h	/^	u64 transid;$/;"	m	struct:btrfs_transaction
tree	extent_io.c	/^	struct extent_io_tree *tree;$/;"	m	struct:extent_page_data	typeref:struct:extent_page_data::extent_io_tree	file:
tree	ordered-data.h	/^	struct rb_root tree;$/;"	m	struct:btrfs_ordered_inode_tree	typeref:struct:btrfs_ordered_inode_tree::rb_root
tree_advance	ctree.c	/^static int tree_advance(struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_backref_for_extent	backref.c	/^int tree_backref_for_extent(unsigned long *ptr, struct extent_buffer *eb,$/;"	f
tree_block	relocation.c	/^struct tree_block {$/;"	s	file:
tree_block_processed	relocation.c	/^static int tree_block_processed(u64 bytenr, struct reloc_control *rc)$/;"	f	file:
tree_compare_item	ctree.c	/^static int tree_compare_item(struct btrfs_path *left_path,$/;"	f	file:
tree_entry	extent_io.c	/^struct tree_entry {$/;"	s	file:
tree_entry	relocation.c	/^struct tree_entry {$/;"	s	file:
tree_fs_info	extent_io.c	/^tree_fs_info(struct extent_io_tree *tree)$/;"	f	file:
tree_fs_info	extent_io.h	/^	struct btrfs_fs_info *(*tree_fs_info)(void *private_data);$/;"	m	struct:extent_io_ops	typeref:struct:extent_io_ops::tree_fs_info
tree_insert	extent_io.c	/^static struct rb_node *tree_insert(struct rb_root *root,$/;"	f	file:
tree_insert	extent_map.c	/^static int tree_insert(struct rb_root *root, struct extent_map *em)$/;"	f	file:
tree_insert	ordered-data.c	/^static struct rb_node *tree_insert(struct rb_root *root, u64 file_offset,$/;"	f	file:
tree_insert	relocation.c	/^static struct rb_node *tree_insert(struct rb_root *root, u64 bytenr,$/;"	f	file:
tree_insert_offset	free-space-cache.c	/^static int tree_insert_offset(struct rb_root *root, u64 offset,$/;"	f	file:
tree_list	delayed-inode.h	/^	struct list_head tree_list;	\/* used for batch insert\/delete items *\/$/;"	m	struct:btrfs_delayed_item	typeref:struct:btrfs_delayed_item::list_head
tree_lock	free-space-cache.h	/^	spinlock_t tree_lock;$/;"	m	struct:btrfs_free_space_ctl
tree_log_mutex	ctree.h	/^	struct mutex tree_log_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
tree_mod_dont_log	ctree.c	/^static inline int tree_mod_dont_log(struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_mod_elem	ctree.c	/^struct tree_mod_elem {$/;"	s	file:
tree_mod_log	ctree.h	/^	struct rb_root tree_mod_log;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::rb_root
tree_mod_log_eb_copy	ctree.c	/^tree_mod_log_eb_copy(struct btrfs_fs_info *fs_info, struct extent_buffer *dst,$/;"	f	file:
tree_mod_log_eb_move	ctree.c	/^tree_mod_log_eb_move(struct btrfs_fs_info *fs_info, struct extent_buffer *dst,$/;"	f	file:
tree_mod_log_free_eb	ctree.c	/^tree_mod_log_free_eb(struct btrfs_fs_info *fs_info, struct extent_buffer *eb)$/;"	f	file:
tree_mod_log_insert_key	ctree.c	/^tree_mod_log_insert_key(struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_mod_log_insert_move	ctree.c	/^tree_mod_log_insert_move(struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_mod_log_insert_root	ctree.c	/^tree_mod_log_insert_root(struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_mod_log_lock	ctree.h	/^	rwlock_t tree_mod_log_lock;$/;"	m	struct:btrfs_fs_info
tree_mod_log_read_lock	ctree.c	/^static inline void tree_mod_log_read_lock(struct btrfs_fs_info *fs_info)$/;"	f	file:
tree_mod_log_read_unlock	ctree.c	/^static inline void tree_mod_log_read_unlock(struct btrfs_fs_info *fs_info)$/;"	f	file:
tree_mod_log_rewind	ctree.c	/^tree_mod_log_rewind(struct btrfs_fs_info *fs_info, struct btrfs_path *path,$/;"	f	file:
tree_mod_log_search	ctree.c	/^tree_mod_log_search(struct btrfs_fs_info *fs_info, u64 start, u64 min_seq)$/;"	f	file:
tree_mod_log_search_oldest	ctree.c	/^tree_mod_log_search_oldest(struct btrfs_fs_info *fs_info, u64 start,$/;"	f	file:
tree_mod_log_set_node_key	ctree.c	/^tree_mod_log_set_node_key(struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_mod_log_set_root_pointer	ctree.c	/^tree_mod_log_set_root_pointer(struct btrfs_root *root,$/;"	f	file:
tree_mod_log_write_lock	ctree.c	/^static inline void tree_mod_log_write_lock(struct btrfs_fs_info *fs_info)$/;"	f	file:
tree_mod_log_write_unlock	ctree.c	/^static inline void tree_mod_log_write_unlock(struct btrfs_fs_info *fs_info)$/;"	f	file:
tree_mod_move	ctree.c	/^struct tree_mod_move {$/;"	s	file:
tree_mod_need_log	ctree.c	/^static inline int tree_mod_need_log(const struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_mod_root	ctree.c	/^struct tree_mod_root {$/;"	s	file:
tree_mod_seq	ctree.h	/^	atomic64_t tree_mod_seq;$/;"	m	struct:btrfs_fs_info
tree_mod_seq_list	ctree.h	/^	struct list_head tree_mod_seq_list;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
tree_mod_seq_lock	ctree.h	/^	spinlock_t tree_mod_seq_lock;$/;"	m	struct:btrfs_fs_info
tree_move_down	ctree.c	/^static int tree_move_down(struct btrfs_fs_info *fs_info,$/;"	f	file:
tree_move_next_or_upnext	ctree.c	/^static int tree_move_next_or_upnext(struct btrfs_path *path,$/;"	f	file:
tree_root	ctree.h	/^	__le64 tree_root;$/;"	m	struct:btrfs_root_backup
tree_root	ctree.h	/^	struct btrfs_root *tree_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
tree_root_gen	ctree.h	/^	__le64 tree_root_gen;$/;"	m	struct:btrfs_root_backup
tree_root_level	ctree.h	/^	u8 tree_root_level;$/;"	m	struct:btrfs_root_backup
tree_search	extent_io.c	/^static inline struct rb_node *tree_search(struct extent_io_tree *tree,$/;"	f	file:
tree_search	ordered-data.c	/^static inline struct rb_node *tree_search(struct btrfs_ordered_inode_tree *tree,$/;"	f	file:
tree_search	relocation.c	/^static struct rb_node *tree_search(struct rb_root *root, u64 bytenr)$/;"	f	file:
tree_search_for_insert	extent_io.c	/^tree_search_for_insert(struct extent_io_tree *tree,$/;"	f	file:
tree_search_offset	free-space-cache.c	/^tree_search_offset(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
trim_bitmaps	free-space-cache.c	/^static int trim_bitmaps(struct btrfs_block_group_cache *block_group,$/;"	f	file:
trim_no_bitmap	free-space-cache.c	/^static int trim_no_bitmap(struct btrfs_block_group_cache *block_group,$/;"	f	file:
trimming	ctree.h	/^	atomic_t trimming;$/;"	m	struct:btrfs_block_group_cache
trimming_ranges	free-space-cache.h	/^	struct list_head trimming_ranges;$/;"	m	struct:btrfs_free_space_ctl	typeref:struct:btrfs_free_space_ctl::list_head
truncate_inline_extent	inode.c	/^static int truncate_inline_extent(struct inode *inode,$/;"	f	file:
truncate_one_csum	file-item.c	/^static noinline void truncate_one_csum(struct btrfs_fs_info *fs_info,$/;"	f	file:
truncate_space_check	inode.c	/^static int truncate_space_check(struct btrfs_trans_handle *trans,$/;"	f	file:
truncated_len	ordered-data.h	/^	u64 truncated_len;$/;"	m	struct:btrfs_ordered_extent
try_lock_extent	extent_io.c	/^int try_lock_extent(struct extent_io_tree *tree, u64 start, u64 end)$/;"	f
try_merge_free_space	free-space-cache.c	/^static bool try_merge_free_space(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
try_merge_map	extent_map.c	/^static void try_merge_map(struct extent_map_tree *tree, struct extent_map *em)$/;"	f	file:
try_release_extent_buffer	extent_io.c	/^int try_release_extent_buffer(struct page *page)$/;"	f
try_release_extent_mapping	extent_io.c	/^int try_release_extent_mapping(struct extent_map_tree *map,$/;"	f
try_release_extent_state	extent_io.c	/^static int try_release_extent_state(struct extent_map_tree *map,$/;"	f	file:
type	ctree.h	/^	u32 type;$/;"	m	struct:btrfs_root
type	ctree.h	/^	unsigned short type;$/;"	m	struct:btrfs_block_rsv
type	delayed-ref.h	/^	unsigned int type:8;$/;"	m	struct:btrfs_delayed_ref_node
type	inode.c	/^	unsigned type;$/;"	m	struct:dir_entry	file:
type	transaction.h	/^	unsigned int type;$/;"	m	struct:btrfs_trans_handle
type	volumes.h	/^	u64 type;$/;"	m	struct:btrfs_device
type	volumes.h	/^	u64 type;$/;"	m	struct:map_lookup
ulist	ulist.h	/^struct ulist {$/;"	s
ulist_add	ulist.c	/^int ulist_add(struct ulist *ulist, u64 val, u64 aux, gfp_t gfp_mask)$/;"	f
ulist_add_merge	ulist.c	/^int ulist_add_merge(struct ulist *ulist, u64 val, u64 aux,$/;"	f
ulist_add_merge_ptr	ulist.h	/^static inline int ulist_add_merge_ptr(struct ulist *ulist, u64 val, void *aux,$/;"	f
ulist_alloc	ulist.c	/^struct ulist *ulist_alloc(gfp_t gfp_mask)$/;"	f
ulist_del	ulist.c	/^int ulist_del(struct ulist *ulist, u64 val, u64 aux)$/;"	f
ulist_free	ulist.c	/^void ulist_free(struct ulist *ulist)$/;"	f
ulist_init	ulist.c	/^void ulist_init(struct ulist *ulist)$/;"	f
ulist_iterator	ulist.h	/^struct ulist_iterator {$/;"	s
ulist_next	ulist.c	/^struct ulist_node *ulist_next(struct ulist *ulist, struct ulist_iterator *uiter)$/;"	f
ulist_node	ulist.h	/^struct ulist_node {$/;"	s
ulist_rbtree_erase	ulist.c	/^static void ulist_rbtree_erase(struct ulist *ulist, struct ulist_node *node)$/;"	f	file:
ulist_rbtree_insert	ulist.c	/^static int ulist_rbtree_insert(struct ulist *ulist, struct ulist_node *ins)$/;"	f	file:
ulist_rbtree_search	ulist.c	/^static struct ulist_node *ulist_rbtree_search(struct ulist *ulist, u64 val)$/;"	f	file:
ulist_reinit	ulist.c	/^void ulist_reinit(struct ulist *ulist)$/;"	f
ulist_release	ulist.c	/^void ulist_release(struct ulist *ulist)$/;"	f
uncompress_inline	inode.c	/^static noinline int uncompress_inline(struct btrfs_path *path,$/;"	f	file:
unit	free-space-cache.h	/^	int unit;$/;"	m	struct:btrfs_free_space_ctl
unlink_free_space	free-space-cache.c	/^static void unlink_free_space(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
unlock_extent	extent_io.h	/^static inline int unlock_extent(struct extent_io_tree *tree, u64 start, u64 end)$/;"	f
unlock_extent_cached	extent_io.h	/^static inline int unlock_extent_cached(struct extent_io_tree *tree, u64 start,$/;"	f
unlock_full_stripe	scrub.c	/^static int unlock_full_stripe(struct btrfs_fs_info *fs_info, u64 bytenr,$/;"	f	file:
unlock_node_buffer	relocation.c	/^static void unlock_node_buffer(struct backref_node *node)$/;"	f	file:
unlock_stripe	raid56.c	/^static noinline void unlock_stripe(struct btrfs_raid_bio *rbio)$/;"	f	file:
unlock_up	ctree.c	/^static noinline void unlock_up(struct btrfs_path *path, int level,$/;"	f	file:
unode_aux_to_inode_list	backref.c	/^unode_aux_to_inode_list(struct ulist_node *node)$/;"	f	file:
unode_aux_to_qgroup	qgroup.c	/^static inline struct btrfs_qgroup* unode_aux_to_qgroup(struct ulist_node *n)$/;"	f	file:
unpin_extent_cache	extent_map.c	/^int unpin_extent_cache(struct extent_map_tree *tree, u64 start, u64 len,$/;"	f
unpin_extent_range	extent-tree.c	/^static int unpin_extent_range(struct btrfs_fs_info *fs_info,$/;"	f	file:
unplug_work	raid56.c	/^static void unplug_work(struct btrfs_work *work)$/;"	f	file:
unset_balance_control	volumes.c	/^static void unset_balance_control(struct btrfs_fs_info *fs_info)$/;"	f	file:
unset_reloc_control	relocation.c	/^static void unset_reloc_control(struct reloc_control *rc)$/;"	f	file:
unsubmitted_oe_range_end	inode.c	/^	u64 unsubmitted_oe_range_end;$/;"	m	struct:btrfs_dio_data	file:
unsubmitted_oe_range_start	inode.c	/^	u64 unsubmitted_oe_range_start;$/;"	m	struct:btrfs_dio_data	file:
unuse_block_rsv	extent-tree.c	/^static void unuse_block_rsv(struct btrfs_fs_info *fs_info,$/;"	f	file:
unused_64	ctree.h	/^	__le64 unused_64[4];$/;"	m	struct:btrfs_root_backup
unused_8	ctree.h	/^	u8 unused_8[10];$/;"	m	struct:btrfs_root_backup
unused_bg_unpin_mutex	ctree.h	/^	struct mutex unused_bg_unpin_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
unused_bgs	ctree.h	/^	struct list_head unused_bgs;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::list_head
unused_bgs_lock	ctree.h	/^	spinlock_t unused_bgs_lock;$/;"	m	struct:btrfs_fs_info
update_backref_cache	relocation.c	/^static int update_backref_cache(struct btrfs_trans_handle *trans,$/;"	f	file:
update_backref_node	relocation.c	/^static void update_backref_node(struct backref_cache *cache,$/;"	f	file:
update_balance_args	volumes.c	/^static void update_balance_args(struct btrfs_balance_control *bctl)$/;"	f	file:
update_block_group	extent-tree.c	/^static int update_block_group(struct btrfs_trans_handle *trans,$/;"	f	file:
update_block_group_flags	extent-tree.c	/^static u64 update_block_group_flags(struct btrfs_fs_info *fs_info, u64 flags)$/;"	f	file:
update_cache_item	free-space-cache.c	/^update_cache_item(struct btrfs_trans_handle *trans,$/;"	f	file:
update_cowonly_root	transaction.c	/^static int update_cowonly_root(struct btrfs_trans_handle *trans,$/;"	f	file:
update_dev_stat_item	volumes.c	/^static int update_dev_stat_item(struct btrfs_trans_handle *trans,$/;"	f	file:
update_dev_time	volumes.c	/^static void update_dev_time(const char *path_name)$/;"	f	file:
update_existing_head_ref	delayed-ref.c	/^update_existing_head_ref(struct btrfs_delayed_ref_root *delayed_refs,$/;"	f	file:
update_flags	delayed-ref.h	/^	bool update_flags;$/;"	m	struct:btrfs_delayed_extent_op
update_free_space_extent_count	free-space-tree.c	/^static int update_free_space_extent_count(struct btrfs_trans_handle *trans,$/;"	f	file:
update_global_block_rsv	extent-tree.c	/^static void update_global_block_rsv(struct btrfs_fs_info *fs_info)$/;"	f	file:
update_inline_extent_backref	extent-tree.c	/^void update_inline_extent_backref(struct btrfs_fs_info *fs_info,$/;"	f	file:
update_ioctl_balance_args	ioctl.c	/^void update_ioctl_balance_args(struct btrfs_fs_info *fs_info, int lock,$/;"	f
update_key	delayed-ref.h	/^	bool update_key;$/;"	m	struct:btrfs_delayed_extent_op
update_log_root	tree-log.c	/^static int update_log_root(struct btrfs_trans_handle *trans,$/;"	f	file:
update_nr_written	extent_io.c	/^static void update_nr_written(struct writeback_control *wbc,$/;"	f	file:
update_processed_blocks	relocation.c	/^static void update_processed_blocks(struct reloc_control *rc,$/;"	f	file:
update_progress	extent-tree.c	/^	struct btrfs_key update_progress;$/;"	m	struct:walk_control	typeref:struct:walk_control::btrfs_key	file:
update_qgroup_info_item	qgroup.c	/^static int update_qgroup_info_item(struct btrfs_trans_handle *trans,$/;"	f	file:
update_qgroup_limit_item	qgroup.c	/^static int update_qgroup_limit_item(struct btrfs_trans_handle *trans,$/;"	f	file:
update_qgroup_status_item	qgroup.c	/^static int update_qgroup_status_item(struct btrfs_trans_handle *trans,$/;"	f	file:
update_ref	extent-tree.c	/^	int update_ref;$/;"	m	struct:walk_control	file:
update_ref_for_cow	ctree.c	/^static noinline int update_ref_for_cow(struct btrfs_trans_handle *trans,$/;"	f	file:
update_ref_path	send.c	/^static int update_ref_path(struct send_ctx *sctx, struct recorded_ref *ref)$/;"	f	file:
update_refs	send.c	/^	struct list_head update_refs;$/;"	m	struct:pending_dir_move	typeref:struct:pending_dir_move::list_head	file:
update_share_count	backref.c	/^void update_share_count(struct share_check *sc, int oldcount, int newcount)$/;"	f
update_space_info	extent-tree.c	/^static void update_space_info(struct btrfs_fs_info *info, u64 flags,$/;"	f	file:
update_super_roots	transaction.c	/^static void update_super_roots(struct btrfs_fs_info *fs_info)$/;"	f	file:
update_time_for_write	file.c	/^static void update_time_for_write(struct inode *inode)$/;"	f	file:
upper	relocation.c	/^	struct list_head upper;$/;"	m	struct:backref_node	typeref:struct:backref_node::list_head	file:
uptodate	inode.c	/^	int uptodate;$/;"	m	struct:btrfs_retry_complete	file:
use_bitmap	free-space-cache.c	/^static bool use_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
use_bitmap	free-space-cache.h	/^	bool (*use_bitmap)(struct btrfs_free_space_ctl *ctl,$/;"	m	struct:btrfs_free_space_op
use_bitmap	inode-map.c	/^static bool use_bitmap(struct btrfs_free_space_ctl *ctl,$/;"	f	file:
use_block_rsv	extent-tree.c	/^use_block_rsv(struct btrfs_trans_handle *trans,$/;"	f	file:
use_count	transaction.h	/^	refcount_t use_count;$/;"	m	struct:btrfs_transaction
use_count	transaction.h	/^	unsigned long use_count;$/;"	m	struct:btrfs_trans_handle
uuid	ioctl.c	/^	char	uuid[BTRFS_UUID_SIZE];	\/* in *\/$/;"	m	struct:btrfs_ioctl_received_subvol_args_32	file:
uuid	volumes.h	/^	u8 uuid[BTRFS_UUID_SIZE];$/;"	m	struct:btrfs_device
uuid_mutex	volumes.c	/^DEFINE_MUTEX(uuid_mutex);$/;"	v
uuid_root	ctree.h	/^	struct btrfs_root *uuid_root;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_root
uuid_tree_generation	ctree.h	/^	__le64 uuid_tree_generation;$/;"	m	struct:btrfs_super_block
uuid_tree_rescan_sem	ctree.h	/^	struct semaphore uuid_tree_rescan_sem;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::semaphore
vacancy_only	tests/inode-tests.c	/^static unsigned long vacancy_only = 0;$/;"	v	file:
val	ulist.h	/^	u64 val;		\/* value to store *\/$/;"	m	struct:ulist_node
validate	props.c	/^	int (*validate)(const char *value, size_t len);$/;"	m	struct:prop_handler	file:
validate_convert_profile	volumes.c	/^static inline int validate_convert_profile(struct btrfs_balance_args *bctl_arg,$/;"	f	file:
validate_rbio_for_parity_scrub	raid56.c	/^static void validate_rbio_for_parity_scrub(struct btrfs_raid_bio *rbio)$/;"	f	file:
validate_rbio_for_rmw	raid56.c	/^static void validate_rbio_for_rmw(struct btrfs_raid_bio *rbio)$/;"	f	file:
verify_dir_item	dir-item.c	/^int verify_dir_item(struct btrfs_fs_info *fs_info,$/;"	f
verify_parent_transid	disk-io.c	/^static int verify_parent_transid(struct extent_io_tree *io_tree,$/;"	f	file:
version	send.h	/^	__le32 version;$/;"	m	struct:btrfs_stream_header
vfs_inode	btrfs_inode.h	/^	struct inode vfs_inode;$/;"	m	struct:btrfs_inode	typeref:struct:btrfs_inode::inode
volume_mutex	ctree.h	/^	struct mutex volume_mutex;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::mutex
wait	ctree.h	/^	wait_queue_head_t	wait;$/;"	m	struct:btrfs_subvolume_writers
wait	ctree.h	/^	wait_queue_head_t	wait;$/;"	m	struct:reada_control
wait	ctree.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_caching_control
wait	ctree.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_space_info
wait	ctree.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_stripe_hash
wait	delayed-inode.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_delayed_root
wait	extent-tree.c	/^	struct completion wait;$/;"	m	struct:async_delayed_refs	typeref:struct:async_delayed_refs::completion	file:
wait	extent-tree.c	/^	wait_queue_head_t wait;$/;"	m	struct:reserve_ticket	file:
wait	ordered-data.h	/^	wait_queue_head_t wait;$/;"	m	struct:btrfs_ordered_extent
wait	tree-log.c	/^	int wait;$/;"	m	struct:walk_control	file:
wait_block_group_cache_done	extent-tree.c	/^wait_block_group_cache_done(struct btrfs_block_group_cache *cache)$/;"	f	file:
wait_block_group_cache_progress	extent-tree.c	/^wait_block_group_cache_progress(struct btrfs_block_group_cache *cache,$/;"	f	file:
wait_current_trans	transaction.c	/^static void wait_current_trans(struct btrfs_fs_info *fs_info)$/;"	f	file:
wait_current_trans_commit_start	transaction.c	/^static void wait_current_trans_commit_start(struct btrfs_fs_info *fs_info,$/;"	f	file:
wait_current_trans_commit_start_and_unblock	transaction.c	/^static void wait_current_trans_commit_start_and_unblock($/;"	f	file:
wait_dev_flush	disk-io.c	/^static blk_status_t wait_dev_flush(struct btrfs_device *device)$/;"	f	file:
wait_dev_supers	disk-io.c	/^static int wait_dev_supers(struct btrfs_device *device, int max_mirrors)$/;"	f	file:
wait_extent_bit	extent_io.c	/^static void wait_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,$/;"	f	file:
wait_for_commit	transaction.c	/^static noinline void wait_for_commit(struct btrfs_transaction *commit)$/;"	f	file:
wait_for_dest_dir_move	send.c	/^static int wait_for_dest_dir_move(struct send_ctx *sctx,$/;"	f	file:
wait_for_parent_move	send.c	/^static int wait_for_parent_move(struct send_ctx *sctx,$/;"	f	file:
wait_for_writer	tree-log.c	/^static void wait_for_writer(struct btrfs_root *root)$/;"	f	file:
wait_log_commit	tree-log.c	/^static void wait_log_commit(struct btrfs_root *root, int transid)$/;"	f	file:
wait_on_extent_buffer_writeback	extent_io.c	/^void wait_on_extent_buffer_writeback(struct extent_buffer *eb)$/;"	f
wait_ordered_extents	tree-log.c	/^static int wait_ordered_extents(struct btrfs_trans_handle *trans,$/;"	f	file:
wait_reserve_ticket	extent-tree.c	/^static int wait_reserve_ticket(struct btrfs_fs_info *fs_info,$/;"	f	file:
wait_snapshotting_atomic_t	extent-tree.c	/^static int wait_snapshotting_atomic_t(atomic_t *a)$/;"	f	file:
waiting_dir_move	send.c	/^struct waiting_dir_move {$/;"	s	file:
waiting_dir_moves	send.c	/^	struct rb_root waiting_dir_moves;$/;"	m	struct:send_ctx	typeref:struct:send_ctx::rb_root	file:
wake_all_tickets	extent-tree.c	/^static void wake_all_tickets(struct list_head *head)$/;"	f	file:
walk_control	extent-tree.c	/^struct walk_control {$/;"	s	file:
walk_control	tree-log.c	/^struct walk_control {$/;"	s	file:
walk_down_backref	relocation.c	/^static struct backref_node *walk_down_backref(struct backref_edge *edges[],$/;"	f	file:
walk_down_log_tree	tree-log.c	/^static noinline int walk_down_log_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
walk_down_proc	extent-tree.c	/^static noinline int walk_down_proc(struct btrfs_trans_handle *trans,$/;"	f	file:
walk_down_reloc_tree	relocation.c	/^int walk_down_reloc_tree(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	file:
walk_down_tree	extent-tree.c	/^static noinline int walk_down_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
walk_log_tree	tree-log.c	/^static int walk_log_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
walk_up_backref	relocation.c	/^static struct backref_node *walk_up_backref(struct backref_node *node,$/;"	f	file:
walk_up_log_tree	tree-log.c	/^static noinline int walk_up_log_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
walk_up_proc	extent-tree.c	/^static noinline int walk_up_proc(struct btrfs_trans_handle *trans,$/;"	f	file:
walk_up_reloc_tree	relocation.c	/^int walk_up_reloc_tree(struct btrfs_root *root, struct btrfs_path *path,$/;"	f	file:
walk_up_tree	extent-tree.c	/^static noinline int walk_up_tree(struct btrfs_trans_handle *trans,$/;"	f	file:
wanted_disk_byte	backref.h	/^	u64 wanted_disk_byte;$/;"	m	struct:prelim_ref
will_be_snapshotted	ctree.h	/^	atomic_t will_be_snapshotted;$/;"	m	struct:btrfs_root
will_overwrite_ref	send.c	/^static int will_overwrite_ref(struct send_ctx *sctx, u64 dir, u64 dir_gen,$/;"	f	file:
window_start	ctree.h	/^	u64 window_start;$/;"	m	struct:btrfs_free_cluster
work	ctree.h	/^	struct btrfs_work work;$/;"	m	struct:btrfs_caching_control	typeref:struct:btrfs_caching_control::btrfs_work
work	ctree.h	/^	struct btrfs_work work;$/;"	m	struct:btrfs_delalloc_work	typeref:struct:btrfs_delalloc_work::btrfs_work
work	delayed-inode.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_async_delayed_work	typeref:struct:btrfs_async_delayed_work::btrfs_work	file:
work	disk-io.c	/^	struct btrfs_work work;$/;"	m	struct:async_submit_bio	typeref:struct:async_submit_bio::btrfs_work	file:
work	disk-io.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_end_io_wq	typeref:struct:btrfs_end_io_wq::btrfs_work	file:
work	extent-tree.c	/^	struct btrfs_work work;$/;"	m	struct:async_delayed_refs	typeref:struct:async_delayed_refs::btrfs_work	file:
work	inode.c	/^	struct btrfs_work work;$/;"	m	struct:async_cow	typeref:struct:async_cow::btrfs_work	file:
work	inode.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_writepage_fixup	typeref:struct:btrfs_writepage_fixup::btrfs_work	file:
work	ordered-data.h	/^	struct btrfs_work work;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::btrfs_work
work	raid56.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_plug_cb	typeref:struct:btrfs_plug_cb::btrfs_work	file:
work	raid56.c	/^	struct btrfs_work work;$/;"	m	struct:btrfs_raid_bio	typeref:struct:btrfs_raid_bio::btrfs_work	file:
work	reada.c	/^	struct btrfs_work	work;$/;"	m	struct:reada_machine_work	typeref:struct:reada_machine_work::btrfs_work	file:
work	scrub.c	/^	struct btrfs_work	work;$/;"	m	struct:scrub_bio	typeref:struct:scrub_bio::btrfs_work	file:
work	scrub.c	/^	struct btrfs_work	work;$/;"	m	struct:scrub_block	typeref:struct:scrub_block::btrfs_work	file:
work	scrub.c	/^	struct btrfs_work	work;$/;"	m	struct:scrub_copy_nocow_ctx	typeref:struct:scrub_copy_nocow_ctx::btrfs_work	file:
work	scrub.c	/^	struct btrfs_work	work;$/;"	m	struct:scrub_fixup_nodatasum	typeref:struct:scrub_fixup_nodatasum::btrfs_work	file:
work	scrub.c	/^	struct btrfs_work	work;$/;"	m	struct:scrub_parity	typeref:struct:scrub_parity::btrfs_work	file:
work	transaction.c	/^	struct work_struct work;$/;"	m	struct:btrfs_async_commit	typeref:struct:btrfs_async_commit::work_struct	file:
work	volumes.h	/^	struct btrfs_work work;$/;"	m	struct:btrfs_device	typeref:struct:btrfs_device::btrfs_work
work_list	ordered-data.h	/^	struct list_head work_list;$/;"	m	struct:btrfs_ordered_extent	typeref:struct:btrfs_ordered_extent::list_head
worker_helper	async-thread.c	/^BTRFS_WORK_HELPER(worker_helper);$/;"	v
worker_helper	async-thread.h	/^BTRFS_WORK_HELPER_PROTO(worker_helper);$/;"	v
workers	ctree.h	/^	struct btrfs_workqueue *workers;$/;"	m	struct:btrfs_fs_info	typeref:struct:btrfs_fs_info::btrfs_workqueue
workers_pending	scrub.c	/^	atomic_t		workers_pending;$/;"	m	struct:scrub_ctx	file:
workspace	lzo.c	/^struct workspace {$/;"	s	file:
workspace	zlib.c	/^struct workspace {$/;"	s	file:
workspace	zstd.c	/^struct workspace {$/;"	s	file:
wq	async-thread.h	/^	struct __btrfs_workqueue *wq;$/;"	m	struct:btrfs_work	typeref:struct:btrfs_work::__btrfs_workqueue
wq	extent_io.h	/^	wait_queue_head_t wq;$/;"	m	struct:extent_state
wr_curr_bio	scrub.c	/^	struct scrub_bio        *wr_curr_bio;$/;"	m	struct:scrub_ctx	typeref:struct:scrub_ctx::scrub_bio	file:
wr_lock	scrub.c	/^	struct mutex            wr_lock;$/;"	m	struct:scrub_ctx	typeref:struct:scrub_ctx::mutex	file:
wr_tgtdev	scrub.c	/^	struct btrfs_device     *wr_tgtdev;$/;"	m	struct:scrub_ctx	typeref:struct:scrub_ctx::btrfs_device	file:
write	tree-log.c	/^	int write;$/;"	m	struct:walk_control	file:
write_all_supers	disk-io.c	/^int write_all_supers(struct btrfs_fs_info *fs_info, int max_mirrors)$/;"	f
write_bitmap_entries	free-space-cache.c	/^write_bitmap_entries(struct btrfs_io_ctl *io_ctl, struct list_head *bitmap_list)$/;"	f	file:
write_buf	send.c	/^static int write_buf(struct file *filp, const void *buf, u32 len, loff_t *off)$/;"	f	file:
write_cache_extent_entries	free-space-cache.c	/^int write_cache_extent_entries(struct btrfs_io_ctl *io_ctl,$/;"	f	file:
write_compress_length	lzo.c	/^static inline void write_compress_length(char *buf, size_t len)$/;"	f	file:
write_dev_flush	disk-io.c	/^static void write_dev_flush(struct btrfs_device *device)$/;"	f	file:
write_dev_supers	disk-io.c	/^static int write_dev_supers(struct btrfs_device *device,$/;"	f	file:
write_eb_member	ctree.h	1467;"	d
write_extent_buffer	extent_io.c	/^void write_extent_buffer(struct extent_buffer *eb, const void *srcv,$/;"	f
write_extent_buffer_chunk_tree_uuid	extent_io.c	/^void write_extent_buffer_chunk_tree_uuid(struct extent_buffer *eb,$/;"	f
write_extent_buffer_fsid	extent_io.c	/^void write_extent_buffer_fsid(struct extent_buffer *eb, const void *srcv)$/;"	f
write_lock_wq	extent_io.h	/^	wait_queue_head_t write_lock_wq;$/;"	m	struct:extent_buffer
write_locks	extent_io.h	/^	atomic_t write_locks;$/;"	m	struct:extent_buffer
write_one_cache_group	extent-tree.c	/^static int write_one_cache_group(struct btrfs_trans_handle *trans,$/;"	f	file:
write_one_eb	extent_io.c	/^static noinline_for_stack int write_one_eb(struct extent_buffer *eb,$/;"	f	file:
write_page_nocow	scrub.c	/^static int write_page_nocow(struct scrub_ctx *sctx,$/;"	f	file:
write_pinned_extent_entries	free-space-cache.c	/^write_pinned_extent_entries(struct btrfs_fs_info *fs_info,$/;"	f	file:
writeable	volumes.h	/^	int writeable;$/;"	m	struct:btrfs_device
writepage_delalloc	extent_io.c	/^static noinline_for_stack int writepage_delalloc(struct inode *inode,$/;"	f	file:
writepage_end_io_hook	extent_io.h	/^	void (*writepage_end_io_hook)(struct page *page, u64 start, u64 end,$/;"	m	struct:extent_io_ops
writepage_start_hook	extent_io.h	/^	int (*writepage_start_hook)(struct page *page, u64 start, u64 end);$/;"	m	struct:extent_io_ops
writer_wait	transaction.h	/^	wait_queue_head_t writer_wait;$/;"	m	struct:btrfs_transaction
ws_lock	compression.c	/^	spinlock_t ws_lock;$/;"	m	struct:__anon6	file:
ws_wait	compression.c	/^	wait_queue_head_t ws_wait;$/;"	m	struct:__anon6	file:
xattr_name	props.c	/^	const char *xattr_name;$/;"	m	struct:prop_handler	file:
zlib_alloc_workspace	zlib.c	/^static struct list_head *zlib_alloc_workspace(void)$/;"	f	file:
zlib_compress_pages	zlib.c	/^static int zlib_compress_pages(struct list_head *ws,$/;"	f	file:
zlib_decompress	zlib.c	/^static int zlib_decompress(struct list_head *ws, unsigned char *data_in,$/;"	f	file:
zlib_decompress_bio	zlib.c	/^static int zlib_decompress_bio(struct list_head *ws, struct compressed_bio *cb)$/;"	f	file:
zlib_free_workspace	zlib.c	/^static void zlib_free_workspace(struct list_head *ws)$/;"	f	file:
zones	reada.c	/^	struct reada_zone	*zones[BTRFS_MAX_MIRRORS];$/;"	m	struct:reada_extent	typeref:struct:reada_extent::reada_zone	file:
zstd_alloc_workspace	zstd.c	/^static struct list_head *zstd_alloc_workspace(void)$/;"	f	file:
zstd_compress_pages	zstd.c	/^static int zstd_compress_pages(struct list_head *ws,$/;"	f	file:
zstd_decompress	zstd.c	/^static int zstd_decompress(struct list_head *ws, unsigned char *data_in,$/;"	f	file:
zstd_decompress_bio	zstd.c	/^static int zstd_decompress_bio(struct list_head *ws, struct compressed_bio *cb)$/;"	f	file:
zstd_free_workspace	zstd.c	/^static void zstd_free_workspace(struct list_head *ws)$/;"	f	file:
zstd_get_btrfs_parameters	zstd.c	/^static ZSTD_parameters zstd_get_btrfs_parameters(size_t src_len)$/;"	f	file:
